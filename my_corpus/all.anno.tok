from threading import local into default name space .
import module warnings .
from django.conf import settings into default name space .
from django.core import signals into default name space .
from django.core.cache.backends.base import InvalidCacheBackendError , CacheKeyWarning and BaseCache into default name space .
from django.core.exceptions import ImproperlyConfigured into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
from django.utils.module _ loading import import _ string into default name space .
_ _ all _ _ is an list containing 6 elements : &apos; get _ cache &apos; , &apos; cache &apos; , &apos; DEFAULT _ CACHE _ ALIAS &apos; , &apos; InvalidCacheBackendError &apos; ,
&apos;CacheKeyWarning &apos; and &apos; BaseCache &apos; DEFAULT _ CACHE _ ALIAS is a string &apos; default &apos; .
if DEFAULT _ CACHE _ ALIAS is not contained in settings.CACHES ,
raise an exception ImproperlyConfigured with string &quot; You must define a &apos; % s &apos; cache &quot; as argument , with &apos; % s &apos; replaced with DEFAULT _ CACHE _ ALIAS converted into a string .
define the function get _ cache with backend and dictionary pair of elements kwargs as arguments .
call the function warnings.warn with string &quot; &apos; get _ cache &apos; is deprecated in favor of &apos; caches &apos; . &quot; , RemovedInDjango19Warning ,
and stacklevel set to 2 as arguments. call the _ create _ cache with backend and dictionary kwargs as arguments , substitute the result for cache .
call the function signals.request _ finished.connect with argument cache.close.
return cache .
define the function _ create _ cache with backend and dictionary pair of elements kwargs as arguments .
try ,
try ,
substitute value under the backend key of settings.CACHES dictionary for conf .
if KeyError exception is caught ,
try ,
call the function import _ string with argument backend .
if ImportError , renamed to e , exception is caught ,
raise and exception InvalidCacheBackendError with string &quot; Could not find backend &apos; % s &apos; : % s &quot; as argument , replace &apos; % s &apos; with backend and e , respectively .
remove &apos; LOCATION &apos; key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists .
substitute kwargs for params .
if not ,
call the function conf.copy , substitute it for params .
call the function params.update with argument kwargs .
remove &apos; BACKEND &apos; key from params dictionary and put it into backend .
remove &apos; LOCATION &apos; key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists .
call the import _ string with argument backend , substitute it for backend _ cls .
if ImportError , renamed to e , is caught ,
aise and exception InvalidCacheBackendError with string &quot; Could not find backend &apos; % s &apos; : % s &quot; as argument , replace &apos; % s &apos; with backend and e , respectively .
evaluate the function backend _ cls with location and params as arguments , return the result .
derive the class CacheHandler from the object base class .
define the _ _ init _ _ method with argument self .
call the function local , substitute the result for self . _ caches .
define the _ _ getitem _ _ method with self and alias arguments .
try ,
return value under the alias key of self . _ caches.caches dictionary .
except if AttributeError is caught ,
self . _ caches.caches is an empty dictionary .
except if KeyError exception is caught ,
do nothing .
if alias is not contained in setting.CACHES ,
raise and exception InvalidCacheBackendError with string &quot; Could not find config for &apos; % s &apos; in settings.CACHES &quot; as argument , replace &apos; % s &apos; with alias .
call the function _ create _ cache with argument alias .
substitute cache for value under the alias key of self . _ caches.caches dictionary .
reuturn cache .
define the method all with argument self .
get attribute &apos; caches &apos; from the self . _ caches if exists , otherwise get an empty dictionary , call the values method on the return value , return it .
call the CacheHandler function , substitute the result for caches .
derive the class DefaultCacheProxy from the base class object .
define the method _ _ getattr _ _ with self and name as arguments .
get attribute name from value under the DEFAULT _ CACHE _ ALIAS key of caches dictionary , return it .
define the method _ _ setattr _ _ with self , name and value as arguments .
set the attribute name from value under the DEFAULT _ CACHE _ ALIAS key of caches dictionary to value , return it .
define the method _ _ delattr _ _ with self and name as arguments .
delete the attribute name from the cache dictionary under the DEFAULT _ CACHE _ ALIAS key .
define the method _ _ contains _ _ with self and key as arguments .
if key if contained in value under the DEFAULT _ CACHE _ ALIAS key of caches dictionary , return boolean True , otherwise return False .
define the method _ _ eq _ _ with self and other as arguments .
if value under the DEFAULT _ CACHE _ ALIAS key of caches dictionary equals to other , return boolean True , otherwise return False .
define the method _ _ ne _ _ with self and other as arguments .
if value under the DEFAULT _ CACHE _ ALIAS key of caches dictionary is not equal to other , return boolean True , otherwise return False .
call the DefaultCacheProxy function , substitute it for cache .
define the function close _ caches with dictionary pair of elements kwargs as argument .
for every cache in return value of the function caches.all.
call the function cache.close.
call the function signals.request _ finished.connect with argument close _ caches .
from _ _ future _ _ import unicode _ literals into default name space .
import module time .
import module warnings .
from django.core.exceptions import ImproperlyConfigured and DjangoRuntimeWarning into default name space .
from django.utils.module _ loading import import _ string into default name space .
derive class InvalidCacheBackendError from the ImproperlyConfigured base class .
do nothing .
derive class CacheKeyWarning from the DjangoRuntimeWarning base class .
do nothing .
DEFAULT _ TIMEOUT is a instance of the class object .
MEMCACHE _ MAX _ KEY _ LENGTH is integer 250 .
define the function default _ key _ func with 3 arguments , key , key _ prefix and version .
convert key _ prefix , version and key into strings , concatenate them respectively , with character &apos; : &apos; as delimiter , return the result .
define the function get _ key _ func with argument key _ func .
if key _ func is not of None type ,
if key _ function is callable object ,
return key _ func .
if not ,
evaluate the function import _ string with key _ func as argument , return the result .
return default _ key _ func .
derive the class BaseCache from the object base class .
define the initialization function _ _ init _ _ with self class instance and params as arguments .
call the params.get method with string &apos; TIMEOUT &apos; and integer 300 as arguments , use the string &apos; timeout &apos; and previous result as the arguments for the call to the params.get method , substitute the result for timeout .
if timeout is not None ,
try ,
convert timeout into an integer .
if ValueError or TypeError exceptions occurred ,
timeout is integer 300 .
substitute timeout for self.default _ timeout .
call the params.get with string &apos; OPTIONS &apos; and empty dictionary as arguments , substitute the result for options .
call the options.get method with string &apos; MAX _ ENTRIES &apos; and integer 300 as arguments , use the string &apos; max _ entries &apos; and previous result as the arguments for the call to the params.get method , substitute the result for max _ entries .
try ,
convert max _ entries into a string , substitute it for self . _ max _ entries .
if ValueError or TypeError exceptions occurred ,
self . _ max _ entries is integer 300 .
call the options.get method with string &apos; CULL _ FREQUENCY &apos; and integer 3 as arguments , use the string &apos; cull _ frequency &apos; and previous result as the arguments for the call to the params.get method , substitute the result for cull _ frequency .
try ,
convert cull _ frequency into an integer and substitute it for self . _ cull _ frequency .
if ValueError or TypeError exceptions occurred ,
self . _ cull _ frequency is integer 3 .
call the params.get method with string &apos; KEY _ PREFIX &apos; and an empty string as arguments , substitute the result for self . _ key _ prefix .
call the params.get method wit string &apos; VERSION &apos; and integer 1 as arguments , substitute the result for self.version.
call the method params.get with 2 arguments , string &apos; KEY _ FUNCTION &apos; and None , use the result as the argument for the call to the function get _ key _ func , substitute the result for the self.key _ func .
define the method get _ backend _ timeout with self class instance and timeout set to DEFAULT _ TIMEOUT as arguments ,
if timeout equals to DEFAULT _ TIMEOUT ,
substitute self.default _ timeout for timeout .
else if timeout equals to integer 0 ,
timeout is a integer -1 .
if timeouts is None return None , otherwise return the sum of function time.time return value and timeout .
define the function make _ key with self class instance , key and version set to None as arguments .
if version is None ,
substitute self.version for version .
call the method self.key _ function with key , self.key _ prefix and version as arguments , substitute the result for new _ key .
return new _ key .
define the method add with 5 arguments , self , key , value , timeout defaulting to DEFAULT _ TIMEOUT and version defaulting to None .
docsring
raise an exception of class NotImplementedError with string &apos; subclasses of BaseCache must provide an add ( ) method &apos; as argument .
define the method get with 4 arguments , self , key , default set to None and version set to None .
raise an exception of class NotImplementedError , with string &apos; subclasses of BaseCache must provide a get ( ) method &apos; as argument .
define the method set with 5 arguments , self , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
raise an exception of class NotImplementedError , with string &apos; subclasses of BaseCache must provide a set ( ) method &apos; as argument .
define delete method with self class instance , key and version set to None , as arguments .
raise an exception of class NotImplementedError , with string &apos; subclasses of BaseCache must provide a delete ( ) method &apos; as argument .
define the get _ many method with self class instance , keys and version set to None as arguments .
d is an empty dictionary .
for every k in keys ,
call the self.get method with k and version set to version as arguments , substitute the result for val .
if val is not None ,
substitute val for value under the k key of dictionary d .
return d .
define method has _ key with self class instance , key and version set to None as arguments .
call the self.get method with key and version set to version as arguments , return it if it is not None .
define the method incr with 4 arguments , self class instance , key , delta defaulting to integer 1 and version defaulting to None .
call the method self.get with key and version set to version as arguments , substitute the result for value .
if value is None ,
raise an exception of class ValueError , with string &quot; Key &apos; % s &apos; not found &quot; as argument , where &apos; % s &apos; is substituted for key .
add value and delta together , substitute the result for new _ value .
call the self.set method with key , new _ value and version set to version as arguments .
return new _ value .
define the method decr with arguments self , key , delta defaulting to integer 1 and version defaulting to None .
call the self.incr method with key , negative delta and version set to version as arguments .
define the private method _ _ contains _ _ with self class instance and key as arguments .
evaluate the self.has _ key method with key as argument , return the result .
define the method set _ many with arguments , self , data , timeout defaulting to DEFAULT _ TIMEOUT and version set to None .
for every key and value in data.items method return value ,
call the method self.set with arguments key , value , timeout set to timeout , version set to version .
define the method delete _ many with arguments self , keys and version defaulting to None .
for every key in keys ,
call the delete method with key and version set to version as arguments .
define the method clear with self class instance as the argument ,
raise an exception NotImplementedError with string &apos; subclasses of BaseCache must provide a clear ( ) method &apos; as argument .
define the method validate _ key with self class instance and key as arguments .
if length of key is greater than MEMCACHE _ MAX _ KEY _ LENGTH ,
substitute &apos; % s &apos; in string &apos; Cache key will cause errors if used with memcached : % s ( longer than % s ) &apos; with key ,
and MEMCACHE _ MAX _ KEY _ LENGTH , call the function warnings.warn with previous string and CacheKeyWarning as arguments. for every char in key ,
if ascii value of char is smaller than integer 33 or is equal to integer 127 ,
substitute &apos; % r &apos; in string &apos; Cache key contains characters that will cause errors if used with memcached : % r &apos; with key ,
call the function warnings.warn with previous string and CacheKeyWarning as arguments. define the method incr _ version with 4 arguments , self , key , delta defaulting to integer 1 and version defaulting to None .
if version is None ,
substitute self.version for version .
call the self.get method with arguments key and version set to version , substitute the result for value .
if value is None ,
raise an exception of the class ValueError with string &quot; Key &apos; % s &apos; not found &quot; as argument , &apos; % s &apos; is substituted for key .
call the method self.set with key , value , version incremented by delta , as arguments .
call the self.delete method with key and version set to version as arguments .
sum version and delta together , return the result .
define the method decr _ version with 4 arguments , self , key , delta defaulting to integer 1 and version defaulting to None .
call the method self.incr _ version with key , negative delta and version as arguments .
define the close method with 2 arguments , self and dictionary of argument pairs kwargs .
docstirng
do nothing .
import module base64 .
from datetime import datetime into default name space .
try ,
from django.utils.six.moves import cPickle as pickle , into default namespace .
if ImportError exception occurred ,
import pickle .
from django.conf import settings into default name space .
from django.core.cache.backends.base import BaseCache and DEFAULT _ TIMEOUT into default name space .
from django.db import connections , transaction , router and DatabaseError into default name space .
from django.db.backends.utils import typecast _ timestamp into default name space .
from django.utils import timezone and six into default name space .
from django.utils.encoding import force _ bytes into default name space .
derive class Options from the base class object .
define the initialization method _ _ init _ _ with self class instance and table as arguments .
substitute table for self.db _ table .
self.app _ label is a string &apos; django _ cache &apos; .
self.model _ name is a string &apos; cacheentry &apos; .
self.verbose _ name is a string &apos; cache entry &apos; .
self.verbose _ name _ plural is a string &apos; cache entries &apos; .
self.object _ name is a string &apos; CacheEntry &apos; .
self.abstract is boolean False .
self.managed is boolean True .
self.proxy is boolean False .
derive class BaseDatabaseCache from BaseCache base class .
define the initialization method _ _ init _ _ with self , table and params as arguments .
call the BaseCache . _ _ init _ _ method with self class instance and params as the arguments .
substitute table for self . _ table .
derive CacheEntry class from the object base class .
_ meta is class Options class instance initialized with table argument .
substitute CacheEntry for self.cache _ model _ class .
derive DatabaseCache from the BaseDatabaseCache base class .
define the method get with 4 arguments , self class instance , key , default set to None and version set to None .
call the method self.make _ key Whit key and version set to version as arguments , substitute the result for key .
call the method self.validate _ key with argument key .
call the method router.db _ for _ read with self.cache _ model _ class as argument , substitute the result for db .
call the ops.quote _ name method with argument self . _ table on the value under the db key of connections dictionary , substitute the result for table .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor.execute with string &quot; SELECT cache _ key , value , expires FROM % s WHERE cache _ key = % % s &quot; as argument ,
substitute the &apos; % s &apos; with table and list containing key , respectively. call the cursor.fetchone method , substitute the result for row .
if row is None ,
return default .
call the timezone.now function , substitute the result for now .
substitute third element of row list for expires .
if features.needs _ datetime _ string _ cast field of the object represented stored under the db key of connections dictionary is true ,
and expires is not an instance of datetime. convert expires to a string , use it as argument for the call to the function typecast _ timestamp , substitute the result for expires .
if expires is lesser than now ,
call the method router.db _ for _ write with argument self.cache _ model _ class , substitute the result for db .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor.execute with string &quot; DELETE FROM % s WHERE cache _ key = % % s &quot; as argument ,
substitute the &apos; % s &apos; with table and list containing key , respectively. return default .
call the method ops.process _ clob with second element of row as argument , on the object under the db key of connections dictionary , substitute the result for value .
call the function force _ bytes with argument value , use the result as an argument for the call to the method base64.b64decode ,
use the result as the argument for the function call to the pickle.loads , return the result. define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self.validate _ key with key as argument .
call the method self . _ base _ set with string &apos; set &apos; , key , value and timeout as arguments .
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self.validate _ key with key as argument .
call the method self . _ base _ set with string &apos; add &apos; , key , value and timeout as arguments , return the result .
define the protected method _ base _ set with 4 arguments , self class instance , key , value and timeout set to DEFAULT _ TIMEOUT .
call the method self.get _ backend _ timeout with argument timeout , substitute the result for timeout .
call the method router.db _ for _ write with argument self.cache _ model _ class , substitute the result for db .
call the ops.quote _ name method with argument self . _ table on the object under the db key of connections dictionary , substitute the result for table .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor.execute with string &quot; SELECT COUNT ( * ) FROM % s &quot; as argument , substitute the &apos; % s &apos; with table .
fetch one record from the database cursor points at , substitute the first element of return value for num .
call the timezone.now function , substitute the result for now .
call the function now.replace with microseconds set to integer 0 , substitute the result for now .
if timeout is None ,
substitute the datetime.max for exp .
otherwise is settings.USE _ TI is true ,
call the function datetime.utcfromtimestamp with argument timeout , substitute it for exp .
if not ,
call the function datetime.fromtimestamp with argument timeout , substitute it for exp .
call the exp.replace with microsecond set to integer 0 , substitute the result for exp .
if num is greater than self . _ max _ entries ,
call the method self . _ cull with db , cursor and now as arguments .
call the method pickle.dumps with value and pickle.HIGHEST _ PROTOCOL as arguments , substitute it for pickled .
call the method base64.b64encode with argument pickled , substitute the result for b64encoded .
if six.PY3 is true ,
call the method b64encoded.decode with string &apos; latin1 &apos; as argument , substitute the result for b64encoded .
try ,
with return value of the function transaction.atomic with using set to db as arguments , perform the following ,
call the method cursor.execute with string &quot; SELECT cache _ key , expires FROM % s WHERE cache _ key = % % s &quot; as argument ,
substitute the &apos; % s &apos; with table and list containing key , respectively. fetch one entry from the database that cursor points at , substitute it for the result .
if result is true ,
substitute the second element of result for current _ expires .
if features.needs _ datetime _ string _ cast field of object under the db key of connections dictionary is true and current _ expires is not an instance of datetime object .
convert current _ expires to a string , use it as the argument for the call to the function typecast _ timestamp , substitute the result for current _ expires .
on the object under the db key of connections dictionary call the method ops.value _ to _ db _ datetime with argument exp , substitute the result for the exp .
if mode equals to string &apos; add &apos; and current _ expires is lesser than now , or mode equals to string &apos; set &apos; , and result is true ,
call the method cursor.execute with string &quot; UPDATE % s SET value = % % s , expires = % % s WHERE cache _ key = % % s &quot; as argument ,
substitute the &apos; % s &apos; with table and 3 elements of a list : b64encoded , exp and key , respectively. if not ,
call the method cursor.execute with string &quot; INSERT INTO % s ( cache _ key , value , expires ) VALUES ( % % s , % % s , % % s ) &quot; ,
substitute the &apos; % s &apos; with table and 3 elements of a list : b64encoded , exp and key , respectively. if DatabaseError exception is caught ,
return boolean False .
if not ,
return boolean True .
define the method delete with self class instance , key and version set to None as arguments .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self.validate _ key with argument key .
call the method router.db _ for _ write with argument self.cache _ model _ class , substitute the result for db .
call the ops.quote _ name method with argument self . _ table on the object under the db key of connections dictionary , substitute the result for table .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor.execute with string &quot; DELETE FROM % s WHERE cache _ key = % % s &quot; as argument ,
substitute the &apos; % s &apos; with table and list containing key , respectively. define the method has _ key with self class instance , key and version defaulting to None as arguments .
call the self.make _ key with key and version set to version as arguments , substitute the result for key .
call the self.validate _ key method with argument key .
call the method router.db _ for _ write with argument self.cache _ model _ class , substitute the result for db .
call the ops.quote _ name method with argument self . _ table on the object under the db key of connections dictionary , substitute the result for table .
if settings.USE _ TZ is true ,
call the function datetime.utcnow , substitute the result for now .
if not ,
call the function datetime.now , substitute the result to now .
call the method now.replace with the argument microsecond set to integer 0 , substitute the result for now .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor.execute with string &quot; SELECT cache _ key FROM % s WHERE cache _ key = % % s and expires &gt; % % s &quot; as argument ,
substitute the &apos; % s &apos; with table and list containing return value of the method call ops.value _ to _ db _ datetime with argument now on the object under the db key of connections dictionary , respectively. if exists return next entry from the database that cursor points at .
define the protected method _ cull with self class instance , db , cursor and now as arguments .
if self . _ cull _ frequency equals to integer 0 .
call the self.clear method .
if not ,
call the method now.replace with argument tzinfo set to None , substitute it for now .
call the ops.quote _ name method with argument self . _ table on the object under the db key of connections dictionary , substitute the result for table .
call the method cursor.execute with string &quot; DELETE FROM % s WHERE expires &lt; % % s &quot; as argument ,
substitute the &apos; % s &apos; with table and list containing return value of the method call ops.value _ to _ db _ datetime with argument now on the object under the db key of connections dictionary , respectively. call the method cursor.execute with string &quot; SELECT COUNT ( * ) FROM % s &quot; as argument , substitute the &apos; % s &apos; with table .
fetch next entry for the database that cursor points into , substitute first element of it for num .
if num is greater than self . _ max _ entries ,
divide num by self . _ cull _ frequency , floor the result and substitute it for cull _ num .
evaluate the method connections &#91; db &#93; .ops.cache _ key _ culling _ sql , evaluate the result by table modulus , call the method cursor.execute ,
with previous result and list containing cull _ num , respectively as arguments. call the method cursor.execute with string &quot; DELETE FROM % s WHERE cache _ key &lt; % % s &quot; as argument ,
substitute the &apos; % s &apos; with table and list containing first element of cursor.fetchone method , respectively. define the method clear with argument self .
call the method router.db _ for _ write with argument self.cache _ model _ class , substitute the result for db .
call the ops.quote _ name method with argument self . _ table on the object under the db key of connections dictionary , substitute the result for table .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor.execute with string &quot; DELETE FROM % s &quot; as argument , substitute the &apos; % s &apos; with table .
derive the class CacheClass from the DatabaseCache base class .
do nothing .
from django.core.cache.backends.base import BaseCache and DEFAULT _ TIMEOUT into default name space .
derive the class DummyCache from the base class BaseCache .
define initialization method _ _ init _ _ with 4 arguments : self , host , list of arguments args and dictionary of arguments kwargs .
call the BaseCache initialization method _ _ init _ _ with 3 arguments self , list of arguments args and dictionary of arguments kwargs .
define the method add with 5 arguments : self , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute it for key .
call the method self.validate _ key with argument key .
return boolean True .
define the method get with 4 arguments : self , key , default set to None and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute it for key .
call the method self.validate _ key with argument key .
return default .
define the method set with 5 arguments : self , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute it for key .
call the method self.validate _ key with argument key .
define the method delete with 3 arguments : self , key , and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute it for key .
call the method self.validate _ key with argument key .
define the method get _ many with 3 arguments : self , keys , and version set to None .
return an empty dictionary .
define the method has _ key with 3 arguments : self , key , and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute it for key .
call the method self.validate _ key with argument key .
return boolean False .
define the method set _ many with 4 arguments : self , data , timeout set to DEFAULT _ TIMEOUT and version set to None .
do nothing
define the method delete _ many with 3 arguments : self , keys , and version set to None .
do nothing .
define the method clear with argument self .
do nothing .
derive the class CacheClass from the DummyCache base class .
do nothing .
import module errno .
import module glob .
import module hashlib .
import module io .
import module os .
import module random .
import module tempfile .
import module time .
import module zlib .
from django.core.cache.backends.base import BaseCache and DEFAULT _ TIMEOUT into default name space .
from django.core.files.move import file _ move _ safe into default name space .
from django.utils.encoding import force _ bytes into default name space .
try ,
from django.utils.six.moves import cPickle as pickle into default name space .
if ImportError exception is caught ,
import pickle .
derive the class FileBasedCache from BaseCache base class .
cache _ suffix is a string &apos; .djcache &apos; .
define the initialization method _ _ init _ _ with arguments : self class instance , dir and params .
call method _ _ init _ _ with argument params from the base class of the FileBaseCache .
get absolute directory path of dir , substitute it for self . _ dir .
call the self . _ createdir method .
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
evaluate method self.has _ key with key and version as arguments , if the result is true ,
return boolean False .
call the method self.set with key , value , timeout and version as arguments .
return boolean True .
define the method get with 5 arguments , self class instance , key , default set to None and version set to None .
call the function self . _ key _ to _ file with key and version as arguments , substitute it for fname .
if fname file path exists ,
try ,
with return value of the function io.open with fname and string &apos; rb &apos; as arguments , named as f ,
evaluate self . _ is _ expired method with f as argument , if the result is false ,
call f.read function , use the result as the argument for zlib.decompress function call , call the pickle.loads function with the previous result as argument , return the result .
if IOError , renamed to e , exception is caught ,
if e.errno equals to errno.ENOENT ,
do nothing .
return default .
define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
call the self . _ createdir method .
call the function self . _ key _ to _ file with key and version as arguments , substitute it for fname .
call the method self . _ cull .
call the method tempfile.mkstemp with dir set to self . _ dir , substitute result for fd and tmp _ path , respectively .
renamed is boolean False .
try ,
with return value of the function io.open with fname and string &apos; rb &apos; as arguments , named as f ,
call the method self.get _ backend _ timeout with argument timeout , substitute it for expiry .
call the function pickle.dumps with expiry and integer -1 as arguments , use the result as the argument for the call to f.write function .
call the function pickle.dumps with argument value , use the result and integer -1 as arguments for the call to the function zlib.compress , use the result as an argument for the call to the f.write method .
call the function file _ move _ safe with tmp _ path , fname , allow _ overwrite set to boolean True as arguments .
renamed is boolean True .
finally perform ,
if renamed is boolean False ,
remove file tmp _ path .
define the method delete with self class instance , key and version defaulting to None as arguments .
call the function self . _ key _ to _ file with key and version as arguments , use the result as an argument for the call to the self . _ delete method .
define the method _ delete with self and fname as arguments .
if fname doesnt start with self . _ dir and fname file path doesnt exists ,
return nothing .
try ,
call the function os.remove with argument fname .
if exception OSError , renamed to e , is caught ,
if e.errno does not equals to errno.ENOENT ,
raise an exception .
define the method has _ key with self class instance , key and version defaulting to None as arguments .
call the function self . _ key _ to _ file with key and version as arguments , substitute it for fname .
if fname file path exists ,
with call to the io.open function with fname and string &apos; rb &apos; as arguments , renamed to f ,
call the method self . _ is _ expired with argument f , invert the boolean result and return it .
return boolean False .
define the method _ cull with argument self .
call the self . _ list _ cache _ files method , substitute the result for filelist .
num _ entries is length of filelist .
if num _ entries is lesser than self . _ max _ entries ,
return nothing .
if self . _ cull _ frequency equals to integer 0 .
evaluate self.clear method and return the result .
divide num _ entries by self . _ cull _ frequency , convert the result to an integer , call the random.sample function with filelist and previous result as arguments , substitute the result for filelist .
for every fname in filelist ,
call self . _ delete method with argument fname .
define the method _ createdir with argument self .
if self . _ dir path doesnt exists ,
try ,
call os.makedirs function with self . _ dir and hexadecimal 0o700 as arguments .
if OSError , renamed to e , exception is caught ,
if e.errno is not equal to errno.EEXIST ,
raise an EnvironmentError exception with string &quot; Cache directory &apos; % s &apos; does not exist and could not be created &quot; as argument ,
substitute &apos; % s &apos; with self . _ dir converted to a string. define the method key _ to _ file with self class instance , key and version defaulting to None as arguments .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self.validate _ key with argument key .
join into a string : md5 hash sum of force _ bytes ( key ) and self.cache _ suffix , compose root file path out of self . _ dir and previous result , return it .
define the method clear with argument self .
if self . _ dir file path does not exists ,
return nothing .
if fname is contained in self . _ list _ cache _ files method return value ,
call the self . _ delete method with argument fname .
define the method _ is _ expired with self and f as arguments .
call the function pickle.load with argument f , substitute the result for exp .
if exp is not None and exp is lesser than return value of the function time.time ,
call close method on a file stream .
call the self . _ delete method with argument f.name.
return boolean True .
return boolean False .
define the method _ list _ cache _ files with argument self .
if self . _ dir file path does not exists ,
return an empty list .
for every fname in return value of the glob.glob1 function called with 2 arguments : self . _ dir and ,
self.cache _ suffix converted to a string , appended to the character &apos; * &apos; , call os.path.join with self . _ dir and fname as arguments , filelist is a list containing all the previous results. return filelist .
derive the class CacheClass from the base class FileBasedCache .
do nothing .
import module time .
try ,
from django.utils.six.moves import cPickle as pickle into default name space .
if ImportError exception is caught ,
import pickle .
from django.core.cache.backends.base import BaseCache and DEFAULT _ TIMEOUT into default name space .
from django.utils.synch import RWLock into default name space .
_ _ caches is an empty dictionary .
_ _ expire _ info is an empty dictionary .
_ _ locks is an empty dictionary .
derive the class LocMemCache from the base class BaseCache .
define the initialization method _ _ init _ _ with 3 arguments : self , name and params .
call the _ _ init _ _ method with self and params arguments from the base class BaseCache .
call the _ caches.setdefault method with name and empty dictionary as arguments , substitute the result for self _ cache .
call the _ expire _ info.setdefault method with name and empty dictionary as arguments , substitute the result for self _ expire _ info .
call the _ lock.setdefault method with name and RWLock ( ) as arguments , substitute the result for self _ lock .
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self.validate _ key with argument key .
call the pickle.dumps function with value and pickle.HIGHEST _ PROTOCOL as arguments .
call the self . _ lock.writer method , with the result perform the following ,
evaluate self . _ has _ expired with argument key , if the result is True ,
call the method self . _ set with key , pickled and timeout as arguments .
return boolean True .
return boolean False .
define the method get with 4 arguments , self class instance , key , default set to None and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self.validate _ key with argument key .
substitute None for pickled .
call the self . _ lock.reader method , with the result perform the following ,
evaluate the method self . _ has _ expired with argument key , if it as False ,
substitute value under the key key of self . _ cache dictionary for pickled .
if pickled is not None .
try ,
evaluate pickle.loads with argument pickled , return the result .
if pickle.PickleError exception is caught ,
return default .
call the self . _ lock.writer method , with the result perform the following ,
try ,
delete the value under key key of self . _ cache dictionary .
delete the value under key key of self . _ expire _ info .
if KeyError exception is caught ,
do nothing .
return default .
define the method _ set with 4 arguments , self class instance , key , value and timeout set to DEFAULT _ TIMEOUT .
if length of self . _ cache is greater or equal to self . _ max _ entries ,
call the self . _ cull method .
substitute value for the value under the key key of self . _ cache dictionary .
call the self.get _ backend _ timeout with argument timeout , substitute it for the value under the key key of self . _ expire _ info dictionary .
define the method get with 5 arguments , self class instance , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self.validate _ key with argument key .
call the function pickle.dumps with value and pickle.HIGHEST _ PROTOCOL as the arguments , substitute the result for pickled .
call the self . _ lock.writer method , with the result perform the following ,
call the method self . _ set with key , pickled and timeout as arguments .
define the method incr with self class instance , key , delta set to integer 1 and version set to None , as arguments .
call the self.get method with key and version set to version as arguments , substitute the result for value .
if value is None ,
raise an ValueError exception with string &quot; Key &apos; % s &apos; not found &quot; as argument , substitute &apos; % s &apos; with key converted into a string .
new _ value is a sum of value and delta .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the function pickle.dumps with value and pickle.HIGHEST _ PROTOCOL as the arguments , substitute the result for pickled .
call the self . _ lock.writer method , with the result perform the following ,
substitute pickled for value under the key key of self . _ cache dictionary .
return new _ value .
define the method has _ key with self class instance , key and version defaulting to None as arguments .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self.validate _ key with argument key .
call the self . _ lock.reader method , with the result perform the following ,
if call to the _ has _ expired method with argument key evaluates to boolean False ,
return boolean True .
call the self . _ lock.writer method , with the result perform the following ,
try ,
delete the value under the key key of self . _ cache dictionary .
delete the value under the key key of self . _ expire _ info dictionary .
if KeyError exception is caught ,
do nothing .
return boolean False .
define the method _ has _ expired with self and key as arguments .
call the method self . _ expire _ info.get with key and integer -1 as arguments , substitute the result for exp .
if exp is None or exp is greater than the return value of the call to the function time.time ,
return boolean False .
return boolean True .
define the method _ cull with argument self .
if self . _ cull _ frequency equals to integer 0 .
call self.clear method .
if not ,
for every i and k in enumerated values of self . _ cache , if i is divisible by self . _ cull _ frequency , append k to doomed list .
for every k in doomed ,
call the method self . _ delete with argument k .
define the method _ delete with arguments self and key .
try ,
delete the value under the key key of self . _ cache dictionary .
if KeyError exception is caught ,
do nothing .
try ,
delete the value under the key key of the self . _ expire _ info dictionary .
if KeyError exception is caught ,
do nothing .
define the method delete with self class instance , key and version defaulting to None as arguments .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self.validate _ key with argument key .
call the self . _ lock.writer method , with the result perform the following ,
call the method self . _ delete with argument key .
define the method clear with argument self .
call the method self . _ cache.clear.
call the method self . _ expire _ info.clear.
derive the class CacheClass from the base class LocMemCache .
do nothing .
import module time .
import module pickle .
from django.core.cache.backends.base import BaseCache and DEFAULT _ TIMEOUT into default name space .
from django.utils import six into default name space .
from django.utils.deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space .
from django.utils.encoding import force _ str into default name space .
from django.utils.functional import cached _ property into default name space .
derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class .
renamed methods is a tuple containing 3 elements : &apos; _ get _ memcache _ timeout &apos; , &apos; get _ backend _ timeout &apos; and RemovedInDjango19Warning .
derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache .
define the method _ _ init _ _ with , self , server , params , library , value _ not _ found _ exception as arguments .
call the initialization method with argument params for the base class of the BaseMemcachedCache class .
if server is an instance of six.string _ types ,
split server with &apos; ; &apos; as delimiter , substitute the result for self . _ servers .
if not ,
substitute server for self . _ servers .
substitute value _ not _ found _ exception for self.LibraryValueNotFoundException.
substitute library for self . _ lib .
call the params.get function with string &apos; OPTIONS &apos; and None as arguments , substitute the result for self . _ options .
property decorator ,
define the method _ cache with argument self .
if self object has an attribute &apos; _ client &apos; ,
call the self . _ lib.Client with argument self . _ servers , substitute the result for self . _ client .
return self . _ client .
define the method get _ backend _ timeout with self and timeout set to DEFAULT _ TIMEOUT as arguments .
if timeout equals to DEFAULT _ TIMEOUT ,
substitute self.default _ timeout for timeout .
if timeout is None ,
return integer 0 .
else if timeout converted into an integer equals to integer 0 ,
timeout is a integer -1 .
if timeout is greater than integer 2592000 ,
convert return value of the function time.time to an integer , increment timeout by it .
convert timeout into an integer , return it .
define the method make _ key with self class instance , key and version defaulting to None as arguments .
call the method make _ key with arguments key and version from the base class of the class BaseMemcachedCache , use it as an argument for the call to the function force _ str , return the result .
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self . _ cache.add with key , value , self.get _ backend _ timeout ( timeout ) as arguments .
define the method get with 5 arguments , self class instance , key , default set to None and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the self . _ cache.get method with argument key , substitute the result for val .
if val is None ,
return default .
return val .
define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT _ TIMEOUT and version set to None .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self . _ cache.set with key , value , self.get _ backend _ timeout ( timeout ) as arguments .
define the method delete with self , key and version set to None as arguments .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
call the method self . _ cache.delete with argument key .
define the method get _ many with self class instance , keys and version defaulting to None as arguments .
define the method get _ many with 3 arguments , self class instance , keys and version set to None .
call the method self . _ cache.get _ multi with argument new _ keys , substitute the result for ret .
if ret is true .
_ is an empty dictionary .
zip together new _ keys and keys , convert it to dictionary , assign it to m .
for every k and v in return value of the ret.items function ,
substitute v for value under the k-th element of m key of _ dictionary .
substitute _ for ret .
return ret .
define the method close with self and dictionary pairs of elements kwargs .
call the method self . _ cache.disconnect _ all .
define the method incr with self , key , delta defaulting to integer 1 and version defaulting to None as arguments .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
if delta is smaller than integer 0 ,
evaluate the method self . _ cache.decr with key and negative delta as arguments , return the result .
try ,
call the method self . _ cache.incr with key and delta as arguments , substitute the result for val .
if self.LibraryValueNotFoundException exception is caught ,
val is None .
if val is None ,
raise an ValueError exception with string &quot; Key &apos; % s &apos; not found &quot; as argument , substitute &apos; % s &apos; for key .
return val .
define the method decr with self , key , delta defaulting to integer 1 and version defaulting to None as arguments .
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
if delta is smaller than integer 0 .
evaluate the method self . _ cache.incr with key and negative delta as arguments , return the result .
try ,
call the method self . _ cache.decr with key and delta as arguments , substitute the result for val .
if self.LibraryValueNotFoundException exception is caught ,
val is None .
if val is None ,
raise an ValueError exception with string &quot; Key &apos; % s &apos; not found &quot; as argument , substitute &apos; % s &apos; for key .
return val .
define the method set _ many with self , data , timeout set to DEFAULT _ TIMEOUT and version set to None as arguments .
safe _ data is an empty dictionary .
for every key and value in data.items function return value ,
call the method self.make _ key with key and version set to version as arguments , substitute the result for key .
substitute value for value under the key key of safe _ data dictionary .
call the method self . _ cache.set _ multi with safe _ data , self.get _ backend _ timeout ( timeout ) as arguments .
define the function delete _ many with self , keys and version set to None as arguments .
l is lambda function with argument x , that calls the method self.make _ key with x and version set to version as arguments .
call the method self _ cache.delete _ multi with argument list containing keys mapped through function l .
define the method clear with argument self .
call the method self . _ cache _ flush _ all .
derive the class MemcachedCache from the BaseMemcachedCache base class .
define the method _ _ init _ _ with argument self , server and params .
import memcache .
call method _ _ init _ _ from the base class of the class MemcachedCache with arguments : server , params ,
library set to memcache and value _ not _ found _ exception set to ValueError. property decorator ,
define the method _ cache with self class instance as an argument .
if attribute &apos; _ client &apos; of the self object is None ,
call the method self . _ lib.Client with self . _ servers and pickleProtocol set to pickle.HIGHEST _ PROTOCOL as arguments , substitute the result for self . _ client .
return self . _ client .
derive the class PyLibMCCache from BaseMemcachedCache base class .
define the method _ _ init _ _ with self , server and params as arguments .
import pylibmc .
call method _ _ init _ _ from the base class of the class PyLibMCCache with arguments : server , params ,
library set to pylibmc and value _ not _ found _ exception set to pylibmc.NotFound. decorator cached _ property ,
define the method _ cache with argument self .
call the method self . _ lib.Client with argument self . _ servers .
if self . _ options exists ,
substitute self . _ options for client.behaviors.
return client .
from _ _ future _ _ import unicode _ literals into default name space .
import module hashlib .
from django.utils.encoding import force _ bytes into default name space .
from django.utils.http import urlquote into default name space .
TEMPLATE _ FRAGMENT _ KEY _ TEMPLATE is a string &apos; template.cache. % s . % s &apos; .
define the function make _ template _ fragment _ key with fragment _ name and vary _ on defaulting to None as arguments .
if vary _ on is None ,
vary _ on is an empty tuple .
call the function urlquote with argument var for every var in vary _ on , join the results into a string separated by &apos; : &apos; , substitute it for key .
call the hashlib.md5 fuction with force _ bytes ( key ) as argument .
substitute &apos; % s &apos; in TEMPLATE _ FRAGMENT _ KEY _ TEMPLATE string with fragment _ name and args.hexdigest ( ) , respectively , return the result .
from _ _ future _ _ import unicode _ literals into default name space .
from .messages import CheckMessage , Debug , Info , Warning , Error , Critical , DEBUG , INFO , WARNING , ERROR and CRITICAL into default name space .
from .registry import register , run _ checks , tag _ exists and Tags into default name space .
import module django.core.checks.compatibility.django _ 1 _ 6 _ 0 .
import module django.core.checks.compatibility.django _ 1 _ 7 _ 0 .
import module django.core.checks.model _ checks .
_ _ all _ _ is a list containing next strings , &apos; CheckMessage &apos; , &apos; Debug &apos; , &apos; Info &apos; , &apos; Warning &apos; , &apos; Error &apos; , &apos; Critical &apos; ,
from _ _ future _ _ import unicode _ literals into default name space .
from django.apps import apps into default name space .
from .. import Warning , register and Tags into default name space .
decorator register with argument Tags.compatibility.
define the function check _ 1 _ 6 _ compatibility with argument kwargs dictionary .
errors is an empty list
call the function _ check _ test _ runner with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend.
call the function _ check _ boolean _ field _ default _ value with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend.
return errors .
define the function _ check _ test _ runner with app _ config set to None and kwargs dictionary as arguments .
from django.conf import settings into default name space .
weight is an integer 0 .
if call to the settings.is _ overridden with string &apos; TEST _ RUNNER &apos; evaluates to boolean False .
try ,
settings.SITE _ ID .
increment weight by integer 2 .
if AttributeError exception is caught ,
do nothing .
try ,
settings.BASE _ DIR .
if AttributeError exception is caught ,
increment weight by integer 2 .
call the function settings.is _ overridden with argument string &apos; TEMPLATE _ LOADERS &apos; , if it evaluates to boolean True ,
increment weight by integer 2 .
call the function settings.is _ overridden with argument string &apos; MANAGERS &apos; , if it evaluates to boolean True ,
increment weight by integer 2 .
call the function settings.is _ overridden with argument string &apos; ADMINS &apos; , if it evaluates to boolean True ,
increment weight by integer 2 .
if string &apos; django.middleware.clickjacking.XFrameOptionsMiddleware &apos; is not contained in settings.MIDDLEWARE _ CLASSES set ,
increment weight by integer 2 .
if weight is greater or equal to integer 6 ,
call the Warning function with 3 arguments : hint tuple containing one string , Django 1.6 introduced a new default test runner .
It looks like this project was generated using Django 1.5 or earlier . You should ensure your tests are all running &amp; behaving as expected . See https : / / docs.djangoproject.com / en / dev / releases / 1.6 / # new-test-runner for more information . &quot; , obj set to None and id set to a string &apos; 1 _ 6.W001 &apos; , put the result into a list and return it. if not ,
return an empty list .
define the function _ check _ boolean _ field _ default _ value with app _ config set to None and kwargs dictionary as arguments .
from django.db import models into default name space .
append field to problem _ fields list for every model in apps.get _ models with argument kwargs dictionary , only if app _ configs is None ,
or model . _ meta.app _ config is contained in app _ configs , for every field in model . _ meta.local _ fields , # ANNOTATION only if field is an instance of models.BooleanField and field.has _ default ( ) evaluates to False. call the Warning function with 4 arguments : string &quot; BooleanField does not have a default value . &quot; ,
from _ _ future _ _ import unicode _ literals into default name space .
from .. import Warning , register and Tags into default name space .
decorator register with argument Tags.compatibility.
define the function check _ 1 _ 7 _ compatibility with argument kwargs dictionary .
errors is an empty list .
call the function _ check _ middleware _ classes with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend.
return errors .
define the function _ check _ middleware _ classes with app _ config set to None and kwargs dictionary as arguments .
from django.conf import settings into default name space .
call the function settings.is _ overridden with argument string &apos; MIDDLEWARE _ CLASSES &apos; , if the result is boolean False ,
call the Warning function with 4 arguments : string &quot; MIDDLEWARE _ CLASSES is not set . &quot; , hint tuple containing one string ,
&quot; Django 1.7 changed the global defaults for the MIDDLEWARE _ CLASSES. django.contrib.sessions.middleware.SessionMiddleware , django.contrib.auth.middleware.AuthenticationMiddleware , and django.contrib.messages.middleware.MessageMiddleware were removed from the defaults . If your project needs these middleware then you should configure this setting . &quot; , obj set to None , and id set to a string &apos; 1 _ 7.W001 &apos; , put the result into a list and return it. if not ,
return an empty list .
from _ _ future _ _ import unicode _ literals into default name space .
from django.utils.encoding import python _ 2 _ unicode _ compatible and force _ st into default name space .
DEBUG is integer 10 .
INFO is integer 20 .
WARNING is integer 30 .
ERROR is integer 40 .
CRITICAL is integer 50 .
decorator python _ 2 _ unicode _ compatible .
derive class CheckMessage from object base class .
define initialization method _ _ init _ _ with self class instance , level , msg , hint defaulting to None , obj defaulting to None and if defaulting to None as arguments .
if level is not an integer raise an error with message string &quot; The first argument should be level . &quot; .
substitute level for self.level.
substitute msg for self.msg.
substitute hint for self.hint.
substitute obj for self.obj.
substitute id for self.id.
define private method _ _ eq _ _ with self class instance and other as arguments .
if for all attr in list of attributes &apos; level &apos; , &apos; msg &apos; , &apos; hint &apos; , &apos; obj &apos; and &apos; id &apos; , self and other have the same attribute attr ,
return boolean True , otherwise return boolean False. define private method _ _ ne _ _ with self class instance and other as arguments .
if self equals to other return boolean False , otherwise return True .
define private method _ _ str _ _ with argument self .
from django.db import models into default name space .
if self.obj is None ,
obj is a string &quot; ? &quot; .
otherwise if self.object is an instance of the models.base.ModelBase class ,
substitute self.obj for model .
substitute model . _ meta.app _ label for app .
convert app and model . _ meta.object _ name to strings , join them with separating &apos; .&apos; character , substitute it for obj .
if not ,
call the function force _ str with argument self.obj , substitute the result for obj .
if self.id exists , convert self.id to a string , surround it with round brackets , substitute id for it , otherwise id is an empty string .
if self.hint exists , replace &apos; % s &apos; in a string &quot; \ n \ tHINT : % s &quot; with value of self.hint , substitute it for hint , otherwise hint is an empty string .
replace all &apos; % s &apos; from string &quot; % s : % s % s % s &quot; with values of obj , id , self.msg and hint , respectively , return the result .
define private method _ _ repr _ _ with argument self .
in the string &quot; &lt; % s : level = % r , msg = % r , hint = % r , obj = % r , id = % r &gt; &quot; , replace &apos; % s &apos; with the name of the type of this class instance ,
replace all the &apos; % r &apos; with self.level , self.msg , self.hint. self.obj and self.id , respectively , return the result. define the method is _ serious with argument self .
return boolean True if self.level is greater than or equals to ERROR , otherwise return boolean False .
define the method is _ silence with argument self .
from django.conf import settings into default name space .
if self.id is contained in settings.SILENCED _ SYSTEM _ CHECKS return boolean True , False otherwise .
derive the class Debug from base class CheckMessage .
define initialization method _ _ init _ _ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
call the _ _ init _ _ method with 3 arguments : DEBUG , unpacked list args and unpacked dictionary kwargs from the base class of Debug .
derive the class Info from base class CheckMessage .
define initialization method _ _ init _ _ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
call the _ _ init _ _ method with 3 arguments : INFO , unpacked list args and unpacked dictionary kwargs from the base class of Info .
derive the class Warning from base class CheckMessage .
define initialization method _ _ init _ _ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
call the _ _ init _ _ method with 3 arguments : WARNING , unpacked list args and unpacked dictionary kwargs from the base class of Warning .
derive the class Error from base class CheckMessage .
define initialization method _ _ init _ _ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
call the _ _ init _ _ method with 3 arguments : ERROR , unpacked list args and unpacked dictionary kwargs from the base class of Error .
derive the class Critical from base class CheckMessage .
define initialization method _ _ init _ _ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
call the _ _ init _ _ method with 3 arguments : CRITICAL , unpacked list args and unpacked dictionary kwargs from the base class of Critical .
from _ _ future _ _ import unicode _ literals into default name space .
from itertools import chain into default name space .
import module types .
from django.apps import apps into default name space .
from . import Error , Tags and register into default name space .
decorator register with Tags.models as an argument .
define the function check _ all _ models with app _ configs defaulting to None and unpacked dictionary kwargs as arguments .
call the model.check method with unpacked dictionary kwargs for every model in return value of function apps.get _ models ,
only if app _ configs is None ot model . _ meta.app _ config is contained in app _ configs , error is a list containing all the previous elements. chain all errors elements into a list , return it .
decorator register with Tags.models and Tags.signals as arguments .
define the function check _ model _ signals with app _ config defaulting to None and unpacked dictionary kwargs as arguments ,
from django.db import models into default name space .
errors is an empty list .
for name in attributes of models _ signals object ,
get models.signals name attribute , store it in obj .
if obj is instance of models.signals.ModelSignal class ,
for every reference and receivers in return value of the call of obj.unresolved _ references.items method ,
for every receiver , _ and _ in receivers ,
if receiver is an instance of types.FunctionType type ,
description is a string &quot; The &apos; % s &apos; function &quot; replaced by value of receiver . _ _ name _ _ .
if not ,
description is a string &quot; An instance of the &apos; % s &apos; class &quot; with &apos; % s &apos; replaced by value of receiver . _ _ class _ _ . _ _ name _ _ .
call the Error function with 4 arguments , string &quot; % s was connected to the &apos; % s &apos; signal with a lazy reference to the &apos; % s &apos; sender ,
which has not been installed . &quot; with all the &apos; % s &apos; replaced by values of description , name and reference joined into a string delimited by &apos; .&apos; , respectively , obj set to receiver . _ _ module _ _ , hint set to None and id set to string &apos; signals.E001 &apos; , append the result to errors. return errors .
from _ _ future _ _ import unicode _ literals into default name space .
from itertools import chain into default name space .
from django.utils.itercompat import is _ iterable into default name space .
derive the class Tags with base class object .
admin is a string &apos; admin&apos;
compatibility is a string &apos; compatibility &apos; .
models is a string &apos; models&apos;
signal is a string &apos; signals&apos;
derive the class CheckRegistry with object as base class .
define initialization method _ _ init _ _ with argument self .
self.registered _ checks is an empty list .
define the method register with self ans unpacked list tags as arguments .
define the method inner with argument check .
replace tags for check.tags.
if check is not contained in self.registered _ checks .
call the method self.registered _ checks.append with argument check .
return check .
return inner .
define the method run _ checks with self class instance , app _ configs defaulting to None , tags defaulting to None as argument .
errors is an empty list .
if tags is not None .
append check to checks list , for every check in self.register _ checks , if check has an attribute &apos; tags &apos; and check.tags and tags set intersection is a non empty set .
if not .
substitute self.registered _ checks for checks .
for every check in checks ,
call the check function with argument app _ config set to app _ config , substitute the result for new _ errors .
if new _ errors is not an iterable object raise an error with error message &quot; The function % r did not return a list . All functions registered with the checks registry must return a list . &quot; , with &apos; % s &apos; replaced by value of check .
call the method errors.extend with argument new _ errors .
return errors .
define the method tag _ exists with self class instance and tag as arguments .
return boolean True if tag is contained in self.tags _ available method return value , return False otherwise .
define the method tags _ available with argument self .
append check.tags into a list for every check in self.registered _ checks if check has &apos; tags &apos; attribute , put the elements into a set and return it .
call the function CheckRegistry , substitute the result for registry .
substitute registry.register for register .
substitute registry.run _ checks for run _ checks .
substitute registry.tag _ exists for tag _ exists .
from _ _ future _ _ import unicode _ literals into default name space .
from django.conf import settings into default name space .
from django.middleware.csrf import get _ token into default name space .
from django.utils import six into default name space .
from django.utils.encoding import smart _ text into default name space .
from django.utils.functional import lazy into default name space .
define the function csrf with an argument request .
define the function _ get _ val .
call the function get _ token with an argument request , substitute the result for token .
if token is None ,
return string &apos; NOTPROVIDED &apos; .
if not ,
call the smart _ text function with an argument token , return the result .
call the function lazy with arguments _ get _ val and six.text _ type , substitute the result for _ get _ val .
return an dictionary containing 1 entry : return value of the function _ get _ val for &apos; csrf _ token &apos; .
define the function debug with an argument request .
context _ extras is an empty dictionary .
if settings.DEBUG is true and value of the request.META dictionary under the &apos; REMOTE _ ADDR &apos; key is contained in settings.INTERNAL _ IPS ,
value under the &apos; debug &apos; key of the context _ extras dictionary is boolean True .
from django.db import connection into default name space .
substitute connection.queries for value under the &apos; debug &apos; key of the context _ extras dictionary .
return context _ extras .
define the function i18n with an argument request .
from django.utils import translation into default name space .
context _ extras is an empty dictionary .
substitute settings.LANGUAGES for the value under the &apos; LANGUAGES &apos; key of the context _ extras dictionary .
call the translation.get _ language function , substitute the result for the value under the &apos; LANGUAGE _ CODE &apos; key of the context _ extras dictionary .
call the translation.get _ language _ bidi function , substitute the result for the value under the &apos; LANGUAGE _ BIDI &apos; key of the context _ extras dictionary .
return context _ extras .
define the function tz with an argument request .
from django.utils import timezone into default name space .
return an dictionary containing 1 entry : return value of the function timezone.get _ current _ timezone _ name for &apos; TIME _ ZONE &apos; .
define the function static with an argument request .
return an dictionary containing 1 entry : settings.STATIC _ URL for &apos; STATIC _ URL &apos; .
define the function media with an argument request .
return an dictionary containing 1 entry : settings.MEDIA _ URL for &apos; MEDIA _ URL &apos; .
define the function request with an argument request .
return an dictionary containing 1 entry : request for &apos; request &apos; .
from functools import reduce into default name space .
import module operator .
from django.utils import six into default name space .
from django.utils.encoding import force _ text into default name space .
derive the class DjangoRuntimeWarning from the RuntimeWarning base class .
do nothing .
derive the class AppRegistryNotReady from the Exception base class .
do nothing .
derive the class ObjectDoesNotExist from the Exception base class .
silent _ variable _ failure is an boolean True .
derive the class MultipleObjectsReturned from the Exception base class .
do nothing .
derive the class SuspiciousOperation from the Exception base class .
derive the class SuspiciousMultipartForm from the SuspiciousOperation base class .
do nothing .
derive the class SuspiciousFileOperation from the SuspiciousOperation base class .
do nothing .
derive the class DisallowedHost from the SuspiciousOperation base class .
do nothing .
derive the class DisallowedRedirect from the SuspiciousOperation base class .
do nothing .
derive the class PermissionDenied from the Exception base class .
do nothing .
derive the class ViewDoesNotExist from the Exception base class .
do nothing .
derive the class MiddlewareNotUsed from the Exception base class .
do nothing .
derive the class ImproperlyConfigured from the Exception base class .
do nothing .
derive the class FieldError from the Exception base class .
do nothing .
NON _ FIELD _ ERRORS is an string &apos; _ _ all _ _ &apos; .
derive the class ValidationError from the Exception base class .
define the method _ _ init _ _ with 4 arguments : self , message , code set to None and params set to None .
call the _ _ init _ _ method from the base class of the class ValidationError with arguments message , code and params .
if message is an instance of ValidationError class ,
if message has an &apos; error _ dict &apos; attribute ,
substitute message.error _ dict for message .
alternatively , if six.PY3 is true check if message does not have an attribute &apos; message &apos; , if six.PY3 is false , check if message doesnt have an attribute &apos; code &apos; , perform the following ,
substitute message.error _ list for message .
if not ,
substitute message.message , message.code , message.params for message , code and params , respectively .
if message is an instance of dict type ,
self.error _ dict is an empty dictionary .
for every field , messages in return value of the message.items method ,
if messages is not an instance of the ValidationError class ,
messages is an instance of the ValidationError class created with an argument messages .
substitute messages.error _ list for the value under the field key of the self.error _ dict dictionary .
otherwise if message is an instance of the list type .
self.error _ list is an empty list .
for every message is message ,
if message is not an instance of the ValidationError class ,
message is an instance of the ValidationError class created with an argument message .
extend the self.error _ list list with message.error _ list .
if not ,
substitute message for self.message.
substitute code for self.code.
substitute params for self.params.
substitute list containing element self for self.error _ list .
property getter decorator ,
define the method message _ dict with an argument self .
get attribute &apos; error _ dict &apos; from the self object .
convert object self to a dictionary , return it .
property getter decorator ,
define the messages with an argument self .
if self has an &apos; error _ dict &apos; attribute ,
call the operator.add on the values of the self object converted into a dictionary , until it is reduced to a single value , return it .
convert self to a list and return it .
define the method update _ error _ dict with arguments self and error _ dict .
if self has an &apos; error _ dict &apos; attribute ,
for every field , error _ list in self.error _ dict.items method return value ,
call the method extend with an argument error _ list on the return value of the method error _ dict.setdefault called with 2 arguments : field and an empty list .
if not ,
call the method extend with an argument error _ list on the return value of the method error _ dict.setdefault called with 2 arguments : NON _ FIELD _ ERRORS and an empty list .
return error _ dict .
define the method _ _ iter _ _ with an argument self .
if self has an &apos; error _ dict &apos; attribute ,
for every field , errors in self.error _ dict.items method return value ,
yield field and ValidationError object converted to an list , created with an argument errors .
if not ,
for every error in self.error _ list ,
substitute error.message for message .
if error.params is true ,
divide message by error.params , substitute the residue of the division for message .
call the force _ text with an argument message , yield the result .
define the method _ _ str _ _ with an argument self .
if self has an attribute &apos; error _ dict &apos; ,
return the printable representation of the self object converted to a dictionary .
return the printable representation of the self object converted to a list .
define the method _ _ repr _ _ with an argument self .
return the string &apos; ValidationError ( % s ) &apos; , replace &apos; % s &apos; with self .
from django.core.files.base import File into default name space .
_ _ all _ _ is an list containing a string &apos; File &apos; .
from _ _ future _ _ import unicode _ literals into default name space .
import module os .
from io import BytesIO , StringIO and UnsupportedOperation into default name space .
from django.utils.encoding import smart _ text into default name space .
from django.core.files.utils import FileProxyMixin into default name space .
from django.utils import six into default name space .
from django.utils.encoding import force _ bytes and python _ 2 _ unicode _ compatible into default name space .
decorator python _ 2 _ unicode _ compatible ,
derive the class File from the FileProxyMixin base class .
bring integer 2 to the power of 10 , multiply it by 64 , substitute the result for DEFAULT _ CHUNK _ SIZE .
define the method _ _ init _ _ with self class instance , file , and name defaulting to None as arguments .
substitute file for self.file.
if name is None ,
get &apos; name &apos; attribute from the file object , if it doesnt exists use None , substitute it for name .
substitute name for self.name.
if file object has an attribute &apos; mode &apos; ,
substitute file.mode for self.mode.
define the method _ _ str _ _ with argument self .
evaluate the function smart _ text with argument self.name , if exists , or an empty string , if not , return the result .
define the method _ _ repr _ _ with argument self .
substitute &apos; % s &apos; in string &apos; &lt; % s : % s &gt; &apos; with self . _ _ class _ _ . _ _ name _ _ and self , if exists , or string &apos; None &apos; if it doesnt , return it .
define the method _ _ bool _ _ with argument self .
convert self.name into an boolean , return it .
define the method _ _ nonzero _ _ with argument self .
call the _ _ bool _ _ method with argument self , on the return value of the type function with argument self , return the result .
define the method _ _ len _ _ with argument self .
return self.size.
define the method _ get _ size _ from _ underlying _ file with argument self .
if self.file has an attribute &apos; size &apos; ,
return self.file.size.
if self.file has an attribute &apos; name &apos; ,
try ,
call the os.path.getsize function with argument self.file.name , return the result .
if OSError or TypeError errors occurred .
do nothing .
if self.file has an attribute &apos; tell &apos; and an attribute &apos; seek &apos; ,
get the position of the self.file file pointer , substitute it for pos .
position the file self.file pointer at the end .
get the position of the file self.file pointer , substitute it for size .
position file self.file pointer at the pos position .
return size .
raise an AttributeError exception with string &quot; Unable to determine the file &apos;s size . &quot; as argument .
define the method _ get _ size with argument self .
if self has an attribute &apos; _ size &apos; .
return self . _ size .
call the method self . _ get _ size _ from _ underlying _ file , substitute the result for self . _ size .
return self . _ size .
define the method _ set _ size with arguments self and size .
substitute size for self . _ size .
size is a property object with _ get _ size as getter method and _ set _ size as setter method .
define the method _ get _ closed with argument self .
if self.file is false or self.file.closed is true , return boolean true , otherwise return boolean false .
closed is a property object with _ get _ closed as a getter method .
define the method chunks with arguments self and chunk _ size defaulting to None .
if chunk _ size is false ,
substitute the self.DEFAULT _ CHUNK _ SIZE for chunk _ size .
try ,
position the file pointer at the beginning of self file .
if AttributeError or UnsupportedOperation exception occurred .
do nothing .
endless loop ,
call the self.read method with argument chunk _ size , substitute the result for data .
if data is false ,
break from the smallest enclosing loop .
yield one element of data iterable .
define the method _ _ multiple _ chunks _ _ with arguments self and chunk _ size defaulting to None .
if chunk _ size is false ,
substitute self.DEFAULT _ CHUNK _ SIZE for chunk _ size .
if self.size is greater than chunk _ size , return boolean True , otherwise return boolean False .
define the method _ _ iter _ _ with argument self .
buffer _ is None .
for every chunk in return value of the method self.chunks ,
evaluate the function BytesIO with argument chunk , substitute it for chunk _ buffer .
for every line in chunk _ buffer ,
if buffer _ is true ,
increment line by buffer _ .
buffer _ is None .
if last element of line is newline or carriage return character ,
yield one element of line iterable .
if not ,
substitute line for buffer _ .
if buffer _ is not None ,
yield one element from the buffer _ iterable .
define the method _ _ enter _ _ with argument self .
return self .
define the method _ _ exit _ _ with self , exc _ type , exc _ value and tb as arguments .
close the file self .
define the method open with arguments self and mode defaulting to None .
if file self is not closed ,
position the file pointer at the beginning of self file .
otherwise if self.name exists and self.name file path exists ,
open the file self.name in mode or self.mode mode , whichever exists , assign the file handler to self.file.
if not ,
raise an ValueError exception with string &quot; The file cannot be reopened . &quot; as an argument .
define the method close with argument self .
call the method self.file.close.
decorator python _ 2 _ unicode _ compatible ,
derive the class ContentFile from File base class .
define the method _ _ init _ _ with arguments self , content and name defaulting to None .
if six.PY3 is boolean True ,
substitute StringIO for stream _ class if content is an instance of six.text _ type , otherwise substitute BytesIO for stream _ class .
if not ,
substitute BytesIO for stream _ class .
call the function force _ bytes with argument content , substitute it for content .
call the _ _ init _ _ method with stream _ class ( content ) and name set to name arguments , from the base class of the ContentFile class .
substitute length of content for self.size.
define the method _ _ str _ _ with argument self .
return a string &apos; Raw content &apos; .
define the method _ _ bool _ _ with argument self .
return boolean True .
define the method _ _ nonzero _ _ with argument self .
evaluate the method type ( self ) . _ _ bool _ _ with argument self , return the result .
define the method open with arguments self and mode set to None .
call the self.seek method with argument integer 0 .
define the method close with argument self .
do nothing .
import module zlib .
from django.core.files import File into default name space .
derive class ImageFile from the base class File .
define method _ get _ width with self class instance as the argument .
return the first element of the return value of the call to the self . _ det _ image _ dimensions method .
get property attribute _ get _ width , and substitute it for width .
define method _ get _ height with self class instance as the argument .
return the second element of the return value of the call to the self . _ det _ image _ dimensions method .
get property attribute _ get _ height , and substitute it for width .
define the method _ get _ image _ dimensions with self class instance as the argument .
if self does not have an attribute named &apos; _ dimensions _ cache &apos; .
substitute self.closed for close .
call the method self.open ( )
evaluate the method get _ image _ dimensions with self class instance and close set to close as the arguments , substitute the result for self . _ dimensions _ cache .
return self . _ dimensions _ cache .
define the function get _ image _ dimension with file _ or _ path and close set to boolean False as the arguments .
from PIL module import ImageFile as PillowImageFile .
p is image parser object , set by calling the PillowImageFile.Parser method .
if file _ or _ path has an attribute &apos; read &apos; ,
substitute file _ or _ path for file .
get the position in bytes from the start of the file , store it in file _ pos .
set the file position pointer at the beginning .
if not ,
open file named file _ or _ path for reading , store the file object handle in file .
close is boolean True .
try ,
chunk _ size is an integer 1024 .
endless while loop ,
read chunk _ size bytes from file and store it in data .
if data is empty .
break from the endless loop .
try ,
feed data to the parser p .
if zlib.error as e exception is raised ,
if e.args list first element starts with string &quot; Error -5 &quot; ,
do nothig .
if not ,
raise an exception .
if p.image is not empty ,
return size of the image that was fed to the parser p .
double the chunk size .
return None .
execute regardless of the exception being raised ,
if close is True ,
close file file .
if not ,
set the file position pointer at file _ pos .
import module os .
_ _ all _ _ is a tuple containing strings : &apos; LOCK _ EX &apos; , &apos; LOCK _ SH &apos; , &apos; LOCK _ NB &apos; , &apos; lock &apos; and &apos; unlock &apos; .
define the _ fd function with argument f .
return result of the f.fileno method if f has an &apos; fileno &apos; attribute , otherwise return f .
if os.name equals to &apos; nt &apos; ,
import msvcrt .
from ctypes import sizeof , c _ ulong , c _ void _ p , c _ int64 , Structure , Union , POINTER , windll and byref into default name space .
from ctypes.wintypes import BOOL , DWORD and HANDLE into default name space .
LOCK _ SH is a integer 0 .
LOCK _ NB is a hexadecimal 1 .
LOCK _ EX is a hexadecimal 2 .
if size of c _ ulong does not equals to size of c _ void _ p ,
substitute c _ int64 for ULONG _ PTR .
if not ,
substitute c _ ulong for ULONG _ PTR .
substitute c _ void _ p for PVOID .
derive the class _ OFFSET from the Structure base class .
_ fields _ is a list containing 2 tuples : first tuple contains : string &apos; Offset &apos; and DWORD , second contains : string &apos; OffsetHigh &apos; and DWORD .
derive the class _ OFFSET _ UNION from the Union base class .
_ anonymous _ is a list containing one string : &apos; _ offset &apos; .
_ fields _ is a list containing 2 tuples : first tuple contains : string &apos; _ offset &apos; and _ OFFSET , second contains : string &apos; Pointer &apos; and PVOID .
derive the class OVERLAPPED from the Structure base class .
_ anonymous _ is a list containing one string : &apos; _ offset _ union &apos; .
_ fields _ is a list containing 4 tuples : first tuple contains : string &apos; Internal &apos; and ULONG _ PTR ,
second contains : string &apos; InternalHigh and ULONG _ PTR , third : &apos; _ offset _ union &apos; and _ OFFSET _ UNION , forth &apos; hEvent &apos; and HANDLE. call the function POINTER with argument OVERLAPPED , substitute the result for LPOVERLAPPED .
substitute windll.kernel32.LockFileEx for LockFileEx .
substitute BOOL for LockFileEx.restype.
LockFileEx.argtypes is a list containing 6 elements : HANDLE , DWORD , DWORD , DWORD , DWORD and LPOVERLAPPED .
substitute windll.kernel32.UnlockFileEx for UnlockFileEx .
substitute BOOL for UnlockFileEx.restype.
UnlockFileEx.argtypes is a list containing 5 elements : HANDLE , DWORD , DWORD , DWORD and LPOVERLAPPED .
define the function lock with arguments f and flags .
call the function msvcrt.get _ osfhandle with return value of the _ fd ( f ) function as argument , substitute the result for hfile .
call the OVERLAPPED function , substitute the result for overlapped .
call the LockFileEx function with 6 arguments : hfile , flags , integer 0 , integer 0 , hexadecimal value FFFF0000 , return value of the byref function called with argument overlapped , substitute the result for ret .
convert ret to a boolean , return it .
define the function unlock with argument f .
call the function msvcrt.get _ osfhandle with return value of the _ fd ( f ) function as argument , substitute the result for hfile .
call the OVERLAPPED function , substitute the result for overlapped .
call the LockFileEx function with 5 arguments : hfile , integer 0 , integer 0 , hexadecimal value FFFF0000 , return value of the byref function called with argument overlapped , substitute the result for ret .
convert ret to a boolean , return it .
if not ,
try ,
import fcntl .
substitute fcntl.LOCK _ SH for LOCK _ SH .
substitute fcntl.LOCK _ NB for LOCK _ NB .
substitute fcntl.LOCK _ EX for LOCK _ EX .
if ImportError or AttributeError exception occurred ,
LOCK _ EX , LOCK _ SH and LOCK _ NB are all equal to integer 0 .
define the function lock with arguments f and flags .
return boolean False .
define the function unlock with argument f .
return boolean True .
if not ,
define the function lock with arguments f and flags .
call the function fcntl.flock with return value of the _ fd ( f ) function and flags as arguments , substitute the result for ret .
if ret equals to integer 0 , return boolean True , otherwise return boolean False .
define the function unlock with argument f .
all the function fcntl.flock with return value of the _ fd ( f ) function and fcntl.LOCK _ UN as arguments , substitute the result for ret .
if ret equals to integer 0 , return boolean True , otherwise return boolean False .
import module os .
from django.core.files import locks into default name space .
try ,
from shutil import copystat into default name space .
if ImportError exception occurred ,
import stat .
define the function copystat with arguments src and dst .
call the os.stat function with argument src , substitute the result for st .
call the function stat.S _ IMODE with argument st.st _ mode , substitute the result for mode .
if os has an attribute &apos; utime &apos; ,
call the os.utime function with arguments dst and tuple containing 2 elements : st.st _ atime and st.st _ mtime .
if os has an attribute &apos; chmod &apos; ,
call the function os.chmod with arguments dst and mode .
_ _ all _ _ is a list containing a string &apos; file _ move _ safe &apos; .
define the function _ samefile with arguments src and dst .
if os.path has an attribute &apos; samefile &apos; ,
try ,
call the os.path.samefile with arguments src and dst , return the result .
if exception OSError occurred ,
return boolean False .
if file path of src and dst files are the same , return boolean True , otherwise return boolean False .
define the function file _ move _ safe with 4 arguments : old _ file _ name , new _ file _ name , chunk _ size set to multiple of integers 1024 and 64 ,
if call to the function _ samefile with old _ file _ name and new _ file _ name evaluates to boolean True ,
return nothing .
try ,
if allow _ overwrite is boolean False and call to the os.access function with arguments new _ file _ name and os.F _ OK evaluates to boolean True ,
raise an IOError exception with string &quot; Destination file % s exists and allow _ overwrite is False &quot; as argument , where &apos; % s &apos; is replaced by new _ file _ name .
call the os.rename function with arguments old _ file _ name and new _ file _ name .
return nothing .
if OSError exception is caught ,
do nothing .
open file old _ file _ name in read bytes mode , with file descriptor as f ,
evaluate the binary expression with 4 operands : os.O _ WRONLY , binary or os.O _ CREATE , binary or &apos; O _ BINARY &apos; attribute of object os ,
binary or os.O _ EXCL if allow _ overwrite is boolean False , use the previous as the mode to open new _ file _ name file , assign the file descriptor to fd. try ,
call the function locks.lock with arguments fd and locks.LOCK _ EX .
current _ chunk is None .
as long as current _ chunk is not an empty string ,
read chunk _ size bytes from the old _ file file , substitute the result for current _ chunk .
write current _ chunk to file fd .
finally perform ,
call the function locks.unlock with fd as argument .
close the file fd .
call the function copystat with old _ file _ name and new _ file _ name as arguments .
tr ,
remove the old _ file _ name file .
if OSError , renamed to e , is caught ,
if attribute &apos; winerror &apos; of object e is not equal to integer 32 and if &apos; errno &apos; attribute is not equal to integer 13 ,
raise an exception .
import module os .
import module errno .
import module itertools .
from datetime import datetime into default name space .
from django.conf import settings into default name space .
from django.core.exceptions import SuspiciousFileOperation into default name space .
from django.core.files import locks and File into default name space .
from django.core.files.move import file _ move _ safe into default name space .
from django.utils.encoding import force _ text and filepath _ to _ uri into default name space .
from django.utils.functional import LazyObject into default name space .
from django.utils.module _ loading import import _ string into default name space .
from django.utils.six.moves.urllib.parse import urljoin into default name space .
from django.utils.text import get _ valid _ filename into default name space .
from django.utils. _ os import safe _ join and abspathu into default name space .
from django.utils.deconstruct import deconstructible into default name space .
_ _ all _ _ is a tuple containing strings : &apos; Storage &apos; , &apos; FileSystemStorage &apos; , &apos; DefaultStorage &apos; and &apos; default _ storage &apos; .
derive the class Storage from the object base class .
define the method open with arguments self , name and mode defaulting to string &apos; rb &apos; .
call the self . _ open method with name and mode arguments , return the result .
define the method save with arguments self , name and content .
if name is None ,
substitute content.name for name .
if content has an &apos; chunks &apos; attribute ,
content is a File object instance created with content argument .
call the method self.get _ available _ name with argument name , substitute it for name .
call the method self . _ save with arguments name and content , substitute it for name .
replace all the strings &apos; \ \ &apos; with &apos; / &apos; in the string name , use it as an argument for the call to the force _ text function , return the result .
define the method det _ valid _ name with arguments self and name .
call the get _ valid _ filename with argument name , return the result .
define the method get _ available _ name with arguments self and name .
call the os.path.split with argument name , assign the result to the dir _ name and file _ name respectively .
call the os.path.splitext with argument file _ name , assign the result to the file _ root and file _ ext respectively .
call the itertools.count function with argument integer 1 , substitute the result for count .
as long as self.exists function with argument name evaluates to boolean True ,
substitute &apos; % s &apos; in string &quot; % s _ % s % s &quot; with : file _ root , next ( count ) and file _ ext , join the dir _ name and previous string into a valid file path , substitute it for name .
return name .
define the method path with arguments self and name .
raise an NotImplementedError exception with argument string &quot; This backend doesn &apos;t support absolute paths . &quot; .
define the method delete with arguments self and name .
raise an NotImplementedError exception with argument string &apos; subclasses of Storage must provide a delete ( ) method &apos; .
define the method exists with arguments self and name .
raise an NotImplementedError exception with argument string &apos; subclasses of Storage must provide an exists ( ) method &apos; .
define the method listdir with arguments self and path .
raise an NotImplementedError exception with argument string &apos; subclasses of Storage must provide a listdir ( ) method &apos; .
define the method size with arguments self and name .
raise an NotImplementedError exception with argument string &apos; subclasses of Storage must provide a size ( ) method &apos; .
define the method url with arguments self and name .
raise an NotImplementedError exception with argument string &apos; subclasses of Storage must provide a url ( ) method &apos; .
define the method accessed _ time with arguments self and name .
raise an NotImplementedError exception with argument string &apos; subclasses of Storage must provide an accessed _ time ( ) method &apos; .
define the method created _ time with arguments self and name .
raise an NotImplementedError exception with argument string &apos; subclasses of Storage must provide a created _ time ( ) method &apos; .
define the method modified _ time with arguments self and name .
raise an NotImplementedError exception with argument string &apos; subclasses of Storage must provide a modified _ time ( ) method &apos; .
decorator deconstructible ,
derive the class FileSystemStorage from the Storage base class .
define the method _ _ init _ _ with 5 arguments : self , location set to None , base _ url set to None , file _ permissions _ mode set to None ,
and directory _ permissions _ mode set to None. if location is None ,
substitute the settings.MEDIA _ ROOT for location .
substitute the location for self.base _ location .
substitute the return value of the function abspathu with self.base _ location as argument for self.location.
if base _ url is None ,
substitute settings.MEDIA _ URL for base _ url .
otherwise if base _ url does not ends with &apos; / &apos; character ,
append character &apos; / &apos; to the base _ url .
substitute base _ url for self.base _ url .
self.file _ permissions _ mode is a tuple containing : file _ permissions _ mode if file _ permissions _ mode is not None ,
or settings.FILE _ UPLOAD _ PERMISSIONS if it is. self.directory _ permissions _ mode is a tuple containing : directory _ permissions _ mode if directory _ permissions _ mode is not None ,
or settings.FILE _ UPLOAD _ DIRECTORY _ PERMISSIONS if it is. define the method _ open with arguments self , name and mode defaulting to string &apos; rb &apos; .
call the function self.path with argument name , use it and mode as arguments for the call to the function open , use it as an argument for creatinon of a File object instance , return it .
define the method _ save with arguments self , name and content .
substitute result of the self.path function with argument name for full _ path .
call the function os.path.dirname with argument full _ path , substitute the result for directory .
if call to the function os.path.exists with argument directory evaluates to boolean False ,
try ,
if self.directory _ permissions _ mode is not None ,
call the os.umask function with argument integer 0 , substitute the result for old _ umask .
try ,
call the os.makedirs function with directory and self.directory _ permissions _ mode as arguments .
finally perform ,
call the os.umask function with argument old _ umask .
if not ,
call the function os.makedirs with argument directory .
if exception OSError , renamed to e , occurred ,
if e.errno is not equal to errno.EEXIST ,
raise an exception .
if directory is not an directory ,
raise an IOError exception with argument string &quot; % s exists and is not a directory . &quot; , where &apos; % s &apos; is replaced by directory .
endless loop ,
try ,
if content has an attribute &apos; temporary _ file _ path &apos; ,
call the function file _ move _ safe with content.temporary _ file _ path function result and full _ path .
if not ,
evaluate binary expression with 4 operands : os.O _ WRONLY , binary or os.O _ CREAT , binary or os.O _ EXCL ,
binary or &apos; O _ BINARY &apos; attribute of the os object , or integer 0 if it doesnt exists. call the os.open function with full _ path , flags and octal number 0o666 as arguments , substitute the result for fd .
_ file is None .
try ,
call the function locks.lock with fd and locks.LOCK _ EX as arguments .
for every chunk in content.chunks function return value ,
if _ file is None ,
mode is a string &apos; wb &apos; is chunk is instance of the type bytes , otherwise mode is a string &apos; wt &apos; .
call the function os.fdopen with arguments fd and mode , substitute it for _ file .
write the chunk to the file _ file .
finally perform ,
call the function locks.unlock with argument fd .
if _ file is not None ,
close the _ file file .
if not ,
close fd file .
if OSError , renamed to e , is caught ,
if e.errno equals to errno.EEXIST ,
call the method self.get _ available _ name with argument name , substitute the result for name .
call the method self.path with argument name , substitute the result for full _ path .
if not ,
raise an exception .
if not ,
break from the smallest enclosing loop .
if self.file _ permissions _ mode is not None ,
call the function os.chmod with arguments full _ path and self.file _ permissions _ mode .
return name .
define the method delete with arguments self and name .
if name is boolean False raise an assert error with message string &quot; The name argument is not allowed to be empty . &quot; .
call the self.path with argument name , substitute it for name .
if os.path.exists function with argument name , evaluates to boolean True ,
try ,
call the os.remove function with argument name .
if OSError , renamed to e , is caught ,
if e.errno equals to errno.EEXIST ,
raise an exception .
define the method exists with arguments self and name .
call the self.path function with argument name , use the result as the argument for the call to the os.path.exists function , return the result .
define the method listdir with arguments self and path .
call the self.path function with argument path , substitute it for path .
directories , files are empty lists .
for every entry in os.listdir function return value called with the argument path ,
join path and entry into a file path , if it exists ,
append entry to the directories list .
if not ,
append entry to files list .
return directories and files .
define the method path with arguments self and name .
try ,
call the safe _ join function with arguments self.location and name , substitute it for path .
if ValueError exception is caught ,
raise an SuspiciousFileOperation exception with string &quot; Attempted access to &apos; % s &apos; denied . &quot; as argument , replace &apos; % s &apos; with name .
call the os.path.normpath with argument path , return the result .
define the method size with arguments self and name .
call the self.path with argument name , use the result as an argument for the call to the os.path.getsize function , return the result .
define the method url with arguments self and name .
if self.base _ url is None ,
raise an ValueError with string &quot; This file is not accessible via a URL . &quot; as argument .
call the urljoin function with arguments : self.base _ url and result of the call to the function filepath _ to _ uri with argument name , return the result .
define the method accessed _ time with arguments self and name .
call the function self.path with argument name , use the result as an argument for the call to the function os.path.getatime ,
use the result as an argument for the call to the function datetime.fromtimestamp , return the result. define the method created _ time with arguments self and name .
call the function self.path with argument name , use the result as an argument for the call to the function os.path.getctime ,
use the result as an argument for the call to the function datetime.fromtimestamp , return the result. define the method modified _ time with arguments self and name .
call the function self.path with argument name , use the result as an argument for the call to the function os.path.getmtime ,
use the result as an argument for the call to the function datetime.fromtimestamp , return the result. define the function get _ storage _ class with argument import _ path = None defaulting to None .
call the import _ string with argument : import _ path if exists or settings.DEFAULT _ FILE _ STORAGE , if not , return the result .
derive the class DefaultStorage from the LazyObject base class .
define the _ setup method with argument self .
call the function that is the return value of get _ storage _ class method , substitute the result for self . _ wrapped .
call the DefaultStorage method , substitute the result for default _ storage .
import module os .
import module tempfile .
from django.core.files.utils import FileProxyMixin into default name space .
_ _ all _ _ is a tuple , containing strings &apos; NamedTemporaryFile &apos; and &apos; gettempdir &apos; .
if module os field name equals to string &apos; nt &apos; ,
derive class TemporaryFile from the base class FileProxyMixin .
define method _ _ init _ _ with self class instance , mode string &apos; w + b &apos; , bufsize set to integer -1 , suffix and prefix set to empty strig ,
dir set to None as the arguments. call the method tmpfile.mkstemp with suffix set to suffix , prefix set to prefix and dir set to dir , store the result in the fd and name , respective .
substitute name for self.name.
call the os.fdopen function with fd , mode and bufsize as the arguments , assign the file handle object to self.file.
substitute False for self.close _ called .
substitute os.unlink for unlink .
define the method close with self class instance as the argument .
if self.close _ called is False ,
substitute True for self.close _ called .
try ,
close the file object .
if OSError or IOError exceptions were raised ,
do nothing .
try ,
call the method unlink on self with self.name as the argument .
if OSError exception was raised ,
do nothing .
property decorator , to be called by property built-in function .
define the method closed with self as the argument .
return self.file.closed.
define _ _ del _ _ method with self as the argument .
call the method close on self .
define _ _ enter _ _ method with self as the argument .
call the file . _ _ enter _ _ method on self .
return self .
define method _ _ exit _ _ with self , exc , value and tb as the arguments .
call the file . _ _ exit _ _ method on self with exc , value and tb as the arguments .
substitute TemporaryFile for NamedTemporaryFile .
if not ,
substitute tempfile.NamedTemporaryFile for NamedTemporaryFile .
substitute tempfile.gettempdir for gettempdir .
import module errno .
import module os .
from io import BytesIO into default name space .
from django.conf import settings into default name space .
from django.core.files.base import File into default name space .
from django.core.files import temp as tempfile into default name space .
from django.utils.encoding import force _ str into default name space .
_ _ all _ _ is a tuple containing strings : &apos; UploadedFile &apos; , &apos; TemporaryUploadedFile &apos; , &apos; InMemoryUploadedFile &apos; and &apos; SimpleUploadedFile &apos; .
derive the UploadedFile class from the File base class .
bring integer 2 to the power of 10 , multiply it by integer 64 , substitute the result for DEFAULT _ CHUNK _ SIZE .
define the method _ _ init _ _ with 7 arguments : self , file set to None , name set to None , content _ type set to None , size set to None , charset set to None and content _ type _ extra set to None .
call the _ _ init _ _ method with arguments file and name , from the base class of the UploadedFile class .
substitute size for self.size.
substitute content _ type for self.content _ type .
substitute charset for self.charset.
substitute content _ type _ extra for self.content _ type _ extra .
define the method _ _ repr _ _ with argument self .
substitute &apos; % s &apos; from string &quot; &lt; % s : % s ( % s ) &gt; &quot; with self . _ _ class _ _ . _ _ name _ _ , self.name and self.content _ type , respectively , use it as an argument for the call to the function force _ str , return the result .
define the method _ get _ name with argument self .
return self . _ name .
define the method _ set _ name with arguments self and name .
if name is not None ,
call the function os.path.basename with argument name , substitute the result for name .
if length of name is greater than integer 255 ,
call the os.path.splitex with argument name , assign the result to name and ext , respectively .
substitute the first 255 elements of ext for ext .
subtract length of the ext from the integer 255 , take first elements of the name list up to the previous result index ,
append ext to the end of it , substitute the resulting list for name. substitute name for self . _ name .
name is a property object with _ get _ name as a getter method and _ set _ name as a setter method .
derive the TemporaryUploadedFile class from the UploadedFile base class .
define the _ _ init _ _ method with 6 arguments : self , name , content _ type , size , charset and content _ type _ extra set to None .
if settings.FILE _ UPLOAD _ TEMP _ DIR is true ,
call the method tempfile.NamedTemporaryFile with arguments : suffix set to string &apos; .upload &apos; and dir set to settings.FILE _ UPLOAD _ TEMP _ DIR .
if not ,
call the method tempfile.NamedTemporaryFile with argument suffix set to string &apos; .upload &apos; .
call the method _ _ init _ _ from the base class of the TemporaryUploadedFile class with arguments : file , name , content _ type , size , charset and content _ type _ extra .
define the method temporary _ file _ path with argument self .
return self.file.name.
define the method close with argument self .
try ,
call the self.file.close method , return the result .
if OSError , renamed to e , exception is caught ,
if e.errno is not equal to errno.ENOENT ,
raise an exception .
derive the InMemoryUploadedFile class from the UploadedFile base class .
define the method _ _ init _ _ with 8 arguments : self , file , field _ name , name , content _ type , size , charset and content _ type _ extra set to None .
call the method _ _ init _ _ from the base class of the InMemoryUploadedFile base class , with 6 arguments : file , name , content _ type ,
size , charset , content _ type _ extra. substitute field _ name for self.field _ name .
define the method open with arguments self and mode set to None .
set the file pointer at the beginning of the self.file file .
define the method chunks with arguments self ad chunk _ size set to None .
set the file pointer at the beginning of the self.file file .
read the whole self file and yield it as a generator return value .
define the method multiple _ chunks with arguments self and hunk _ size set to None .
return boolean False .
derive the SimpleUploadedFile class from the InMemoryUploadedFile base class .
define the method _ _ init _ _ with 4 arguments : self , name , content and content _ type defaulting to a string &apos; text / plain &apos; .
if content is empty , substitute it for an empty string .
call the _ _ init _ _ method from the base class of the SimpleUploadedFile class with 7 arguments : BytesIO ( content ) , None , name ,
content _ type , length of content , None and None. decorator classmethod .
define the method from _ dict with argument cls and file _ dict .
call the method cls with 3 arguments : value under the &apos; filename &apos; key of file _ dict , value under the &apos; content &apos; key of file _ dict ,
from _ _ future _ _ import unicode _ literals into default name space .
from io import BytesIO into default name space .
from django.conf import settings into default name space .
from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space .
from django.utils.encoding import python _ 2 _ unicode _ compatible into default name space .
from django.utils.module _ loading import import _ string into default name space .
_ _ all _ _ is a string containing strings : &apos; UploadFileException &apos; , &apos; StopUpload &apos; , &apos; SkipFile &apos; , &apos; FileUploadHandler &apos; ,
&apos;TemporaryFileUploadHandler &apos; , &apos; MemoryFileUploadHandler &apos; , &apos; load _ handler &apos; and &apos; StopFutureHandlers &apos; . derive the class UploadFileException from the Exception base class .
do nothing .
decorator python _ 2 _ unicode _ compatible ,
derive the class StopUpload from the UploadFileException base class .
define the method _ _ init _ _ with arguments self and connection _ reset defaulting to boolean False .
substitute connection _ reset for self.connection _ reset .
define the method _ _ str _ _ with argument self .
if self.connection _ reset is true ,
return string &apos; StopUpload : Halt current upload . &apos; .
if not ,
return string &apos; StopUpload : Consume request data , then halt . &apos; .
derive the class SkipFile from the UploadFileException base class .
do nothing .
derive the class StopFutureHandlers from the UploadFileException base class .
do nothing .
derive the class FileUploadHandler from the object base class .
bring integer 2 to the power of 10 , multiply it by integer 64 , substitute the result for chunk _ size .
define the method _ _ init _ _ with arguments self and request defaulting to None .
self.file _ name is None .
self.content _ type is None .
self.content _ length is None .
self.charset is None .
self.content _ type _ extra is None .
self.request is None .
define the method handle _ raw _ input with arguments : self , input _ data , META , content _ length , boundary and encoding set to None .
do nothing .
define the method new _ file with arguments : self , field _ name , file _ name , content _ type , content _ length , charset set to None ,
substitute field _ name for self.field _ name .
substitute file _ name for self.file _ name .
substitute content _ type for self.content _ type .
substitute content _ length for self.content _ length .
substitute charset for self.charset.
substitute content _ type _ extra for self.content _ type _ extra .
define the method receive _ data _ chunk with arguments : self , raw _ data and start .
raise an NotImplementedError with argument string &apos; subclasses of FileUploadHandler must provide a receive _ data _ chunk ( ) method &apos; .
define the method file _ complete with arguments : self and file _ size .
raise an NotImplementedError with argument string &apos; subclasses of FileUploadHandler must provide a file _ complete ( ) method &apos; .
define the method upload _ complete with argument self .
do nothing .
derive the class TemporaryFileUploadHandler from the FileUploadHandler base class .
define the method _ _ init _ _ with arguments self , argument list args and dictionary of arguments kwargs .
call the _ _ init _ _ method from the base class of the TemporaryFileUploadHandler class with arguments : unpacked list args ,
and unpacked dictionary kwargs. define the method new _ file with arguments : self , file _ name , unpacked list args and unpacked dictionary kwargs .
call the method new _ file from the base class of the TemporaryFileUploadHandler class with arguments : file _ name , unpacked list args and unpacked dictionary kwargs .
self.file is a instance of a class TemporaryUploadedFile initialized with arguments : self.file _ name , self.content _ type , integer 0 ,
self.charset and self.content _ type _ extra. define the method receive _ data _ chunk with arguments : self , raw _ data and start .
call the method self.file.write with argument raw _ data .
define the method file _ complete with arguments self and file _ size .
position the file pointer at the start of the self.file file .
substitute file _ size for self.file.size.
return self.file.
derive the class MemoryFileUploadHandler from the FileUploadHandler base class .
define the method handle _ raw _ input with arguments : self , input _ data , META , content _ length , boundary and encoding set to None .
if content _ length is greater than settings.FILE _ UPLOAD _ MAX _ MEMORY _ SIZE ,
self.activated is boolean False .
if not ,
self.activated is boolean True .
define the method new _ file with arguments : self , unpacked list args and unpacked dictionary kwargs .
call the new _ file method form the base class from the MemoryFileUploadHandler class with arguments : unpacked list args and unpacked list kwargs .
if self.activated is boolean True ,
call the function BytesIO , substitute the result for self.file.
raise an exception StopFutureHandlers .
define the function receive _ data _ chunk with arguments self , raw _ data and start .
if self.activated is boolean True ,
write raw _ data to self.file file .
if not ,
return raw _ data .
define the function file _ complete with arguments self and file _ size .
if self.activated is boolean False ,
return nothing .
set file pointer at the beginning of the self.file file .
initialize the object of a InMemoryUploadedFile class with arguments : file set to self.file , field _ name set to self.field _ name ,
name set to self.file _ name , content _ type set to self.content _ type , size set to file _ size , charset set to self.charset , and content _ type _ extra set to self.content _ type _ extra , return it. define the function load _ handler with arguments : path , unpacked list args and unpacked dictionary kwargs .
call the import _ string with arguments path , call the return function with arguments : unpacked list args and unpacked dictionary kwargs , return the result .
derive class FileProxyMixin from the base class object , making it a new-style class .
define lambda function that returns self.file.encoding field , use it as an argument for property function , put the result in encoding .
define lambda function that returns self.file.fileno field , use it as an argument for property function , put the result in fileno .
define lambda function that returns self.file.flush field , use it as an argument for property function , put the result in flush .
define lambda function that returns self.file.isatty field , use it as an argument for property function , put the result in isatty .
define lambda function that returns self.file.newlines field , use it as an argument for property function , put the result in newlines .
define lambda function that returns self.file.read field , use it as an argument for property function , put the result in read .
define lambda function that returns self.file.readinto field , use it as an argument for property function , put the result in readinto .
define lambda function that returns self.file.readline field , use it as an argument for property function , put the result in readline .
define lambda function that returns self.file.readlines field , use it as an argument for property function , put the result in readlines .
define lambda function that returns self.file.seek field , use it as an argument for property function , put the result in seek .
define lambda function that returns self.file.softspace field , use it as an argument for property function , put the result in softspace .
define lambda function that returns self.file.tell field , use it as an argument for property function , put the result in tell .
define lambda function that returns self.file.truncate field , use it as an argument for property function , put the result in truncate .
define lambda function that returns self.file.write field , use it as an argument for property function , put the result in write .
define lambda function that returns self.file.writelines field , use it as an argument for property function , put the result in writelines .
define lambda function that returns self.file.xreadlines field , use it as an argument for property function , put the result in xreadlines .
define iterator method _ _ iter _ _ with self as the argument .
return iterator object based on the self.file collection object .
from _ _ future _ _ import unicode _ literals into default name space .
import module logging .
import module sys .
import module types .
from django import http into default name space .
from django.conf import settings into default name space .
from django.core import urlresolvers into default name space .
from django.core import signals into default name space .
from django.core.exceptions import MiddlewareNotUsed , PermissionDenied and SuspiciousOperation into default name space .
from django.db import connections and transaction into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils.module _ loading import import _ string into default name space .
from django.utils import six into default name space .
from django.views import debug into default name space .
call the function logging.getLogger with string &apos; django.request &apos; as the argument , assign the return object handle to logger .
derive class BaseHandler , derive from the base class object , making this a new style class .
response _ fixes is a list with http.fix _ location _ header and http.conditional _ content _ removal as elements .
define initialization method _ _ init _ _ , with self class instance as the argument .
set class fields _ request _ middleware , _ view _ middleware , _ template _ response _ middleware , _ response _ middleware and _ exception _ middleware to None .
define method load _ middleware with class instance self as the argument .
self . _ view _ middleware is an empty list .
self . _ template _ response _ middleware is an empty list .
_ response _ middleware is an empty list .
exception _ middleware is an empty list .
request _ middleware is an empty list .
for every middleware _ path in settings.MIDDLEWARE _ CLASSES :
evaluate the function import _ string with middleware _ path as argument , substitute the result for my _ class .
try ,
call the mw _ class function , store the result in the mw _ instance .
if MiddlewareNotUsed exception is raised ,
skip this iteration of he smallest enclosing loop .
if mw _ instance has an attribute named &apos; process _ request &apos; .
append mw _ instance.process _ request at the end of request _ middleware .
if mw _ instance has an attribute named &apos; process _ view &apos; .
append mw _ instance.process _ view at the end of self . _ view _ middleware .
if mw _ instance has an attribute named &apos; process _ template _ response &apos; .
insert mw _ instance.process _ template _ response at the beginning of self . _ template _ response _ middleware .
if mw _ instance has an attribute named &apos; process _ response &apos; .
insert mw _ instance.process _ response at the beginning of self . _ response _ middleware .
if mw _ instance has an attribute named &apos; process _ exception &apos; .
insert mw _ instance.process _ exception at the beginning of self . _ exception _ middleware .
substitute self . _ request _ middleware for request _ middleware .
define the method make _ view _ atomic , with self class instance and view as the arguments .
get attribute &apos; _ non _ atomic _ requests &apos; from the view object , if the attribute doesnt exist return the empty set , substitute the result for non _ atomic _ requests .
call the method connections.all ( ) , perform the following for every db in the result ,
if value under the key &apos; ATOMIC _ REQUESTS of db.settings _ dic dictionary is True and db.alias is not present in the non _ atomic _ requests ,
call the function transaction.atomic , with using set to db.alias as the argument , return value is a function which is called ,
with the argument view , store the result in the view. return view
define method get _ exception _ response , with self class instance , request , resolver and status _ code as the arguments .
try ,
call the function resolver.resolve _ error _ handler with status _ code as an argument , assign the result to the callback and param _ dict , respectively .
call the callback function with request and dictionary argument param _ dict as the arguments , substitute it for response .
if an exception occurred ,
call the method signals.got _ request _ exception.send with the sender set to the type of this class , and request set to request as the arguments .
call the method self.handle _ uncaught _ exception with request , resolver and return value of the function sys.exec _ info as the arguments .
return response
define the method get _ response , with self class instance and request as the arguments .
substitute settings.ROOT _ URLCONF for urlconf .
call the method urlresolvers.set _ urlconf with urlconf as the argument .
call the method urlresolvers.RegexURLResolver with raw literal string &apos; ^ / &apos; and urlconf as the arguments , substitute the result for resolver .
try ,
set response to None .
for every middleware _ method in self . _ request _ middleware ,
call the middleware _ method with the request as an argument , substitute the result for response .
if response is True ,
breaks from the smallest enclosing loop execution .
if response is None ,
if request has an attribute named &apos; urlconf &apos; ,
substitute request.urlconf for urlconf .
call the function urlresolvers.set _ urlconf with urlconf as the argument .
call the method urlresolvers.RegexURLResolver with raw literal string &apos; ^ / &apos; and urlconf as the arguments , substitute the result for resolver .
call to the resolver.resolve method with request.path _ info as an argument .
assign the values to the callback , callback _ args , callback _ kwargs , respectively , from the resolver _ match tuple .
substitute resolver _ match for request.resolver _ match .
for every middleware _ method in self . _ view _ middleware ,
call the middleware _ method with request , callback , callback _ args and callback _ kwargs as the arguments , substitute the result for response .
if response is True ,
break from the smallest enclosing loop execution .
if response is None ,
call the method self.make _ view _ atomic with callback as the argument , substitute the result for the wrapped _ callback .
try ,
call the function wrapped _ callback with request , list or arguments callback _ args and dictionary arguments callback _ kwargs ,
as the arguments , substitute the result for response. if Exception , renamed to e , exception is caught ,
for every middleware _ method in self . _ exception _ middleware ,
call the middleware _ method with request and e as the arguments , substitute the result for response .
if response is True ,
break from the smallest enclosing loop execution .
if response is None ,
raise the exception .
if response is None ,
if callback is of instance types.FunctionType ,
get the name of the callback , substitute it for view _ name .
if not ,
get the name of the type of the callback , append the string &apos; . _ _ call _ _ &apos; to it , substitute it for view _ name .
substitute the &apos; % s &apos; in the string &quot; The view % s . % s didn &apos;t return an HttpResponse object . It returned None instead . &quot; ,
with the name of the module callback is in and the view _ name , respectively , use it as the argument for the ValueError exception raise. if response has an attribute named &apos; render &apos; and response.render is a callable function ,
for every middleware _ method in self . _ template _ response _ middleware ,
call the function middleware _ method with the request and response as the arguments , assign the result to response .
if response is None ,
replace &apos; % s &apos; in the string &quot; % s.process _ template _ response didn &apos;t return an HttpResponse object . It returned None instead . &quot; ,
with name of the class type of the middleware _ method instance , use it as the argument for call to the ValueError exception raise. call the response.render ( ) method and assign the return to the response .
if exception http.Http404 as e is caught ,
substitute &apos; % s &apos; in &apos; Not Found : % s &apos; with request.path , extra is an dictionary with two pairs of elements &apos; status _ code &apos; with value 404 ,
and &apos; request with value request , respectively use the previous as the arguments for the call to the logger.warning function. if settings.DEBUG is True ,
call the function debug.technical _ 404 _ response with request and e as arguments , assign the result to response .
if not ,
call the method self.get _ exception _ response with request , resolver and integer 404 as the arguments , assign the result to response .
if exception PermissionDenied is caught ,
substitute &apos; % s &apos; in &apos; Forbidden ( Permission denied ) : % s &apos; with request.path , extra is an dictionary with two pairs of elements ,
&apos;status _ code &apos; with value 403 , and &apos; request with value request , respectively use the previous as the arguments for the call to the logger.warning function. call the method self.get _ exception _ response with request , resolver and integer 403 as the arguments , assign the result to response .
if exception SuspiciousOperation as e is caught ,
substitute &apos; % s &apos; in &apos; django.security. % s &apos; with the name of the type of the class object e , use it as the argument for the call to the ,
function logging.getLogger , assign the result to the security _ logger. evaluate the function force _ text with e as an argument , extra is an dictionary with two pair of elements ,
&apos;status code &apos; with integer value of 400 and &apos; request &apos; with value request , respectively use the previous to call the function security _ logger.error. if settings.DEBUG is True ,
evaluate the function debug.technical _ 500 _ response with request , evaluated value of function sys.exc _ info as a list ,
status code set to integer 400 , return the result. call the method self.get _ exception _ response with the request , resolver and integer 400 as the arguments , substitute the result for response .
if SystemExit exception is caught ,
raise an exception .
otherwise if any other exception is caught ,
call the method signals.got _ request _ exception.send with sender set to type of the self class instance and request set to request .
call to the self.handle _ uncaught _ exception method with request , resolver and value of the evaluated function sys.exec _ info ,
as the arguments , substitute the result for response. try ,
for every middleware _ method in self . _ response _ middleware ,
call the function middleware _ method with request and response as the arguments , substitute the result for response .
if response is None ,
substitute &apos; % s &apos; is &quot; % s.process _ response didn &apos;t return an HttpResponse object . It returned None instead . &quot; ,
with the name of the type of the self class instance of the middleware _ method , raise the ValueError with the previous as the argument. call the method self.apply _ response _ fixes with the request and response as the arguments , substitute the result for response .
if any exception is caught ,
call the signals.got _ request _ exception.send method with sender set to type of the self class instance and request set to request .
call to the self.handle _ uncaught _ exception method with request , resolver and value of the evaluated function sys.exec _ info ,
as the arguments , substitute the result for response. append the request to the end of the protected class member response . _ closable _ objects .
return response .
define the method handle _ uncaught _ exception with self class instance , request , resolver and exec _ info as arguments .
if settings.DEBUG _ PROPAGATE _ EXCEPTIONS is True ,
raise an exception .
substitute &apos; % s &apos; in &apos; Internal Server Error : % s &apos; with request.path , exc _ info set to exc _ info ,
extra is an dictionary with two pairs of elements &apos; status _ code &apos; with value 500 , and &apos; request with value request , respectively use the previous as the arguments for the call to the logger.error function. if settings.DEBUG is True ,
evaluate debug.technical _ 500 _ response with request and list of arguments exec _ info , return the result .
if resolver.urlconf _ module is None :
call the function reraise from the module six , with list of arguments exec _ info .
call the resolver.resolve _ error _ handler with integer 500 as the argument , assign the resulting tuple elements to the callback ,
and param _ dict , respectively. evaluate the function callback with request and dictionary of parameters param _ dict as the arguments , return the result .
define the method apply _ response _ fixes with self class instance , request and response as the arguments .
for every func in self.response _ fixes ,
call the function func with request and response as arguments , assign the result to response .
return response .
from _ _ future _ _ import unicode _ literals into default name space .
import module cgi .
import module codecs .
import module logging .
import module sys .
from io import BytesIO into default name space .
from threading import Lock into default name space .
import module warnings .
from django import http into default name space .
from django.conf import settings into default name space .
from django.core import signals into default name space .
from django.core.handlers import base into default name space .
from django.core.urlresolvers import set _ script _ prefix into default name space .
from django.utils import datastructures into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
from django.utils.encoding import force _ str and force _ text into default name space .
from django.utils.functional import cached _ property into default name space .
from django.utils import six into default name space .
from django.http.response import REASON _ PHRASES as STATUS _ CODE _ TEXT # NOQA into default name space .
call logging.getLogger method with string &apos; django.request &apos; as argument , store the result in logger .
ISO _ 8859 _ 1 is a string &apos; iso-8859-1 &apos; , UTF _ 8 is a string &apos; utf-8 &apos; .
derive class LimitedStream from the object base class , making it a new-style class .
def initialization method _ _ init _ _ with self class instance , stream , limit and buf _ size set to integer value of the product 64 * 1024 * 1024 .
substitute stream for self.stream.
substitute limit for self.remaining.
substitute empty bytes string for self.buffer.
substitute buf _ size for self.buf _ size .
define the method _ read _ limited with self class instance and size set to None as arguments .
if size is None or size is greater than self.remaining ,
substitute self.remaining for size .
if size equals to integer zero .
return empty bytes string .
read size number of bytes from self.stream stream , store the result in the result .
decrement self.remaining by length of result .
return result .
define the method read with self class instance and size set to None as arguments .
if size is None ,
add self.buffer and self . _ read _ limited method return value together , store it in result .
substitute empty bytes string for self.buffer.
otherwise if size is less than length of self.buffer ,
substitute first size elements of self.buffer for result .
truncate first size number of elements of self.buffer.
if not ,
call the method self.read _ limited with length of self.buffer subtracted from size as argument , add result to self.buffer , store it in result .
substitute empty bytes string for self.buffer.
return result .
define method readline with self class instance and size set to None .
while newline character is not contained in self.buffer and , size is None or length of self.buffer is less than size ,
if size is not zero ,
call the self . _ read _ limiter with length of self.buffer subtracted from size as argument , store the result into chunk .
if not ,
call the method self . _ read _ limited , store the return value into chunk .
if chunk is empty ,
break the execution of the smallest enclosing loop .
increment self.buffer by chunk .
call the function BytesIO with self.buffer as argument , store the result is sio .
if size is not empty ,
call the sio.readline method with size as an argument , substitute the result for line .
if not ,
call the sio.readline method , substitute the result for line .
call the sio.read method , substitute the result for self.buffer.
return line .
derive the class WSGIRequest from base class http.HttpRequest.
define the initialization method _ _ init _ _ with self class instance and environ as arguments .
call the get _ script _ name function with environ as argument , substitute the result for script _ name .
call the get _ path _ info function with environ as argument , substitute the result for path _ info .
if path _ info is empty ,
path _ info is a character &apos; / &apos; .
substitute environ for self.environ.
substitute path _ info for self.path _ info .
strip trailing &apos; / &apos; from the script _ name string , remove first occurrence of &apos; / &apos; in path _ info string , append second result to the first , separated with &apos; / &apos; , assign the result to self.path.
substitute environ for self.META.
assign path _ info to the value under the &apos; PATH _ INFO &apos; key of the self.META dictionary .
assign script _ name to the value under the &apos; SCRIP _ NAME &apos; key of the self.META dictionary .
convert value under the &apos; REQUEST _ METHOD &apos; key of the environ dictionary to uppercase , substitute it for self.method.
get the value under the &apos; CONTENT _ TYPE &apos; key of environ dictionary , if the key doesnt exist get the empty string ,
use it to call the cgi.parse _ header method , assign the result to the _ and content _ params respectively. if string &apos; charset &apos; is contained in content _ params ,
try ,
get the value under the &apos; charset &apos; key of content _ params dictionary , use it to call the codec.lookup method .
if exception LookupError is caught ,
do nothing .
if not ,
get the value under the &apos; charset &apos; key of content _ params dictionary , substitute it for self.encoding.
self . _ post _ parse _ error is boolean False .
try ,
convert value under the &apos; CONTENT _ LENGTH &apos; key of the environ dictionary to an integer , substitute it for content _ length .
if exception ValueError or TypeError is caught ,
content _ length is integer 0 .
self . _ stream is a class instance of a LimitedStream class , initialized with self.environ dictionary value under the &apos; wsgi.input &apos; key ,
and content _ length. self . _ read _ started is boolean False .
self.resolver _ match is None .
define the method _ get _ scheme with self class instance as argument .
return value under the &apos; wsgi.url _ scheme &apos; key of self.environ dictionary .
define the method _ get _ request with self class instance as argument .
call the warnings.warn method with string &apos; `request.REQUEST` is deprecated , use `request.GET` or `request.POST` instead . &apos; ,
RemovedInDjango19Warning and integer 2 as arguments. if self does not have an &apos; _ request &apos; attribute ,
call the datastructures.MergeDict with self.POST and self.GET as arguments , assign the result to self . _ request .
return self . _ request .
decorator cached _ property .
define method GET with self class instance as an argument .
call the get _ bytes _ from _ wsgi function with self.environ , string &apos; QUERY _ STRING &apos; and empty string as arguments , substitute the return value for raw _ query _ string .
evaluate the http.QueryDict method with raw _ query _ string and encoding set to self . _ encoding as arguments , return the result .
def _ get _ post method with self class instance as the argument .
if self does not has an &apos; _ post &apos; attribute .
call the self . _ load _ post _ and _ files method .
return self . _ post .
define the _ set _ post method with self class instance and post as the arguments .
substitute post for self . _ post .
decorator cached _ property .
define COOKIES method with self as the argument .
call get _ str _ from _ wsgi function with self.environ , string &apos; HTTP _ COOKIE &apos; and empty string as arguments , substitute it for raw _ cookie .
evaluate the function http.parse _ cookie with raw _ cookie as an argument , return the result .
define _ get _ files method with self class instance as the argument .
if self does not have &apos; _ files &apos; attribute ,
call the method self . _ load _ post _ and _ files .
return self . _ files .
_ get _ post is a getter function and _ set _ post is a setter function for POST attribute of this class .
_ get _ files is getter function for FILES attribute of this class .
_ get _ request is getter function for REQUEST attribute of this class .
derive the WSGIHandler class from the base class base.BaseHandler.
evaluate function Lock ( ) assign the result to initLock .
substitute WSGIRequest for request _ class .
define private method _ _ call _ _ with self class instance , environ and start _ response as the arguments .
if self . _ request _ middleware is None ,
with self.initLock ,
try ,
if self . _ request _ middleware is None ,
call the self.load _ middleware method .
if exception is caught ,
self . _ request _ middleware is None .
re raise an exception .
call the get _ script _ name function with environ as argument , use the result as an argument for call to the set _ script _ prefix function .
call the signals.request _ started.send method with sender set to self . _ _ class _ _ as argument .
try ,
call the self.request _ class method with environ as an argument , substitute the result for request .
if UnicodeDecodeError exception is caught ,
call the logger.warning method with string &apos; Bad Request ( UnicodeDecodeError ) &apos; , exec _ info set to sys.exec _ info ( ) and dictionary extra
with one entry &apos; status _ code &apos; is integer 400 , as arguments. call the http.HttpResponseBadRequest function , assign the result to the response .
if not ,
call the self.get _ response with request as the argument , substitute the result for response .
substitute self . _ _ class _ _ for response . _ handler _ class .
replace &apos; % s &apos; in the string &apos; % s % s &apos; with response.status _ code and response.reason _ phrase , respectively , substitute it for status .
convert to k and v to strings for every k and v in return value of the response.item method , response _ headers is a list containing all the above iteration elements .
for every c in return value of the method response.cookies.values ,
convert &apos; Set-Cookie &apos; to a string and convert the return value of method c.output ( header = &apos; &apos; ) call to a string ,
format the previous in a tuple , append the tuple to the response _ headers. call the start _ response function with force _ str ( status ) method return value and response _ headers as arguments .
return response .
define the get _ path _ info function with environ as the argument .
call the function get _ bytes _ from _ wsgi with environ , string &apos; PATH _ INFO &apos; and character &apos; / &apos; as arguments , substitute the result for path _ info .
return path _ info.decode method return value called with UTF _ 8 as the argument .
define get _ script _ name function with environ as an argument .
if settings.FORCE _ SCRIPT _ NAME is not None ,
evaluate the force _ text function with settings.FORCE _ SCRIPT _ NAME as argument , return the result .
call the get _ bytes _ from _ wsgi function with environ , string &apos; SCRIPT _ URL &apos; and empty strings as arguments , substitute the result for script _ url .
if script _ url is false ,
call the get _ bytes _ from _ wsgi function with environ , string &apos; REDIRECT _ URL &apos; and empty strings as arguments , substitute the result for script _ url .
if script _ url is true ,
call the get _ bytes _ from _ wsgi function with environ , string &apos; PATH _ INFO &apos; and empty strings as arguments , substitute the result for path _ info .
take all but the length of path _ info last elements of script _ url , substitute it for script _ name .
if not ,
call the get _ bytes _ from _ wsgi function with environ , string &apos; SCRIPT _ NAME &apos; and empty strings as arguments , substitute the result for script _ name .
return scrip _ name.decode method result called with UTF _ 8 as argument .
define the function get _ bytes _ from _ wsgi with environ , key and default as arguments .
convert key and default to strings , get the value under the key string key of the environ dictionary , if it does not exists use the ,
default string value , substitute it for value. return value if six.PY2 is true , if not return value.encode ( ISO _ 8859 _ 1 ) .
define the get _ str _ from _ wsgi function with environ , key and default as arguments .
convert key and default to strings , get the value under the key string key of the environ dictionary , if it does not exists use the ,
default string value , substitute it for value. return value if six.PY2 is true , if not return value.encode ( ISO _ 8859 _ 1 ) .decode ( UTF _ 8 ) .
from _ _ future _ _ import unicode _ literals into default name space .
from django.conf import settings into default name space .
from django.utils.module _ loading import import _ string into default name space .
from django.core.mail.utils import CachedDnsName and DNS _ NAME into default name space .
from django.core.mail.message import EmailMessage , EmailMultiAlternatives , SafeMIMEText , SafeMIMEMultipart ,
DEFAULT _ ATTACHMENT _ MIME _ TYPE , make _ msgid , BadHeaderError and forbid _ multi _ line _ headers into default name space . _ _ all _ _ is a list of strings , &apos; CachedDnsName &apos; , &apos; DNS _ NAME &apos; , &apos; EmailMessage &apos; , &apos; EmailMultiAlternatives &apos; , &apos; SafeMIMEText &apos; ,
&apos;SafeMIMEMultipart &apos; , &apos; DEFAULT _ ATTACHMENT _ MIME _ TYPE &apos; , &apos; make _ msgid &apos; , &apos; BadHeaderError &apos; , &apos; forbid _ multi _ line _ headers &apos; , &apos; get _ connection &apos; , &apos; send _ mail &apos; , &apos; send _ mass _ mail &apos; , &apos; mail _ admins &apos; and &apos; mail _ managers &apos; . define function get _ connection with backend set to None , fail _ silently set to boolean False and dictionary kwds as arguments .
call the function import _ string with backend if exists or settings.EMAIL _ BACKEND if not , store the result into klass .
call the klass method with fail _ silently set to fail _ silently and dictionary arguments kwds as arguments , return the result .
define send _ mail funtion with subject , message , from _ email , recipient _ list , fail _ silently set to boolean False ,
if connection exists dont modify it , if not call get _ connection function with username set to auth _ user , password set to auth _ password , fail _ silently set to fail _ silently as arguments , assign it to connection .
call the EmailMultiAlternatives function with , subject , message , from _ email , recipient _ list and connection set to connection , as arguments , assign the result to mail .
if html _ message is True ,
call the mail.attach _ alternative method with html _ message and string &apos; text / html &apos; as arguments .
return the evaluated result of the mail.send method .
define the function send _ mass _ mail with , datatuple , fail _ silently set to False , auth _ user set to None , auth _ password set to None ,
if connection exists dont change it , if not call the get _ connection function with username set to auth _ user ,
password set to auth _ password , fail _ silently set to fail _ silently as arguments , assign the result to connection. call the EmailMessage function wit subject , message , sender , recipient and connection set to connection ,
for every subject , message , sender and recipient in datatuple , store the results in the messages list. return evaluated result of the method connection.send _ messages with messages as argument .
define the function mail _ admins with subject , message , fails _ silently set to boolean False , connection set to None ,
if settings.ADMINS is false ,
return nothing .
call the function EmailMultiAlternatives with settings.EMAIL _ SUBJECT _ PREFIX and subject converted to strings and concatenated ,
message , settings.SERVER _ EMAIL , list of second elements of a for every a in settings.Managers and connection set to connection , as arguments , assign the result to mail. if html _ message is true ,
call method mail.attach _ alternative as html _ message and string &apos; text / hmtl &apos; as arguments .
call the mail.send method with fail _ silently = fail _ silently as argument .
define the function mail _ managers with subject , message , fails _ silently set to boolean False , connection set to None ,
if settings.MANAGERS does not exist ,
return nothing .
call the function EmailMultiAlternatives with settings.EMAIL _ SUBJECT _ PREFIX and subject converted to strings and concatenated ,
message , settings.SERVER _ EMAIL , list of second elements of a for every a in settings.Managers and connection set to connection , as arguments , assign the result to mail. if html _ message is true ,
call the mail.attach _ alternative method with html _ message and string &apos; text / html &apos; as arguments .
call the mail.send method with fail _ silently set to fail _ silently as argument .
derive the class BaseEmailBackend from the object base class .
define the method _ _ init _ _ with arguments : self , fail _ silently set to boolean False and unpacked dictionary kwargs .
substitute fail _ silently for self.fail _ silently .
define the method open with argument self .
do nothing .
define the method close with argument self .
do nothing
define the method _ _ enter _ _ with argument self .
call the method self.open.
return self .
define the method _ _ exit _ _ with arguments : self , exc _ type , exc _ value and traceback .
call the method self.close.
define the method send _ messages with arguments self and email _ messages .
raise an NotImplementedError exception with argument string &apos; subclasses of BaseEmailBackend must override send _ messages ( ) method &apos; .
import module sys .
import module threading .
from django.core.mail.backends.base import BaseEmailBackend into default name space .
from django.utils import six into default name space .
derive the class EmailBackend from the BaseEmailBackend base class .
define the _ _ init _ _ method with arguments : self , unpacked list args and unpacked dictionary kwargs .
pop the value under the &apos; stream &apos; key of the kwargs dictionary , if it exists replace it for self.stream , if not replace sys.stdout for self.stream.
call the method threading.RLock , substitute the result for self . _ lock .
call the _ _ init _ _ method from the base class of the EmailBackend class , with arguments : unpacked list args and unpacked dictionary kwargs .
define the method write _ message with arguments self and message .
call the method message.message , substitute the result for msg .
call the method msg.as _ bytes , substitute the result for msg _ data .
if six.PY3 is boolean True ,
if method msg.get _ charset evaluates to true , call the get _ output _ charset method on the return value of the msg.get _ charset method , substitute the result for charset , otherwise if it is false , substitute the string &apos; utf-8 &apos; for charset .
call the method msg _ data.decode with argument charset , substitute the result for msg _ data .
call the method self.stream.write with argument string &apos; % s \ n &apos; , with &apos; % s &apos; replaced with msg _ data .
write 79 &apos; -&apos; characters into self.stream file stream .
write a newline into a self.stream file stream .
define the method send _ messages with arguments self and email _ messages .
if email _ messages is false ,
return .
msg _ count is an integer 0 .
call the method self . _ lock , with the result ,
try ,
call the method self.open , substitute the result for stream _ created .
for every message in email _ messages ,
call the method self.write _ message with argument message .
call the method self.stream.flush.
increment msg _ count by one .
if stream _ created is true ,
call the method self.close.
if Exception exception is caught ,
if self.fail _ silently is boolean False ,
raise an exception .
return msg _ count .
from django.core.mail.backends.base import BaseEmailBackend into default name space .
derive the class EmailBackend from the BaseEmailBackend base class .
define the method send _ messages with arguments self and email _ messages .
create list out of email _ messages , return the length of the list .
import module datetime .
import module os .
from django.conf import settings into default name space .
from django.core.exceptions import ImproperlyConfigured into default name space .
from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space .
from django.utils import six into default name space .
derive the class EmailBackend from the ConsoleEmailBackend base class .
define the _ _ init _ _ method with arguments : self , unpacked list args and unpacked dictionary kwargs .
self . _ fname is None .
if &apos; file _ path &apos; is contained in kwargs ,
pop the value under the &apos; file _ path &apos; key of kwargs dictionary , substitute it for self.file _ path .
if not ,
get &apos; EMAIL _ FILE _ PATH &apos; from the settings , if it exists , substitute it for self.file _ path , if not substitute None for self.file _ path .
if self.file _ path is not an instance of six.string _ types ,
raise an ImproperlyConfigured exception with argument string &apos; Path for saving emails is invalid : % r &apos; , replace &apos; % r &apos; with self.file _ path .
call the os.path.abspath with argument self.file _ path , substitute the result for self.file _ path .
if self.file _ path file path exists and it is not a directory ,
raise an ImproperlyConfigured exception with argument string &apos; Path for saving email messages exists , but is not a directory : % s &apos; , replace &apos; % s &apos; with self.file _ path .
otherwise if self.file _ path file path doesnt exists ,
try ,
call the os.makedirs with argument self.file _ path .
if OSError , renamed to err , is caught ,
raise an ImproperlyConfigured exception with argument string &apos; Could not create directory for saving email messages : % s ( % s ) &apos; ,
replace &apos; % s &apos; with self.file _ path and err , respectively. if self.file _ path file is not writable ,
raise an ImproperlyConfigured exception with argument string &apos; Could not write to directory : % s &apos; , replace &apos; % s &apos; with self.file _ path .
set value under the &apos; stream &apos; key of kwargs dictionary to None .
call the _ _ init _ _ method of the base class of the EmailBackend class with arguments : unpacked list args and unpacked dictionary kwargs .
define the method write _ message with arguments self and message .
call the as _ bytes method on the return value of the message.message method append to it &apos; \ n &apos; character , use it as the argument for the call to the self.stream.write method .
write 79 &apos; -&apos; characters into self.stream file stream .
write a newline character into self.stream file stream .
define the method _ get _ filename with argument self .
if self . _ fname is None :
call the strftime function with argument string &quot; % Y % m % d- % H % M % S &quot; on the return value of the function datetime.datetime.now , substitute the result for timestamp .
fname is a string &quot; % s- % s.log &quot; , with &apos; % s &apos; replaced by timestamp and absolute value of the return value of the function id with argument self , respectively .
join self.file _ path and fname into a valid file path , substitute it for self . _ fname .
return self . _ fname .
define the method open with argument self .
if self.stream is None :
open the file in mode &apos; ab &apos; and with file name obtained by calling the self . _ get _ filename method .
return boolean True .
return boolean True .
define the method close with argument self .
try ,
if self.stream is not None ,
call the self.stream.close function .
finally perform ,
self.stream is None .
from django.core import mail into default name space .
from django.core.mail.backends.base import BaseEmailBackend into default name space .
derive the class EmailBackend from the BaseEmailBackend base class .
define the method _ _ init _ _ with arguments : self , unpacked list args and unpacked dictionary kwargs .
call the method _ _ init _ _ from the base class of EmailBackend class , with arguments : unpacked list args and unpacked dictionary kwargs .
if mail doesnt have an &apos; outbox &apos; attribute ,
mail.outbox is an empty list .
define the method send _ messages with arguments self and messages .
msg _ count is integer 0 .
for every message in messages ,
call the method message.message.
increment mes _ count by one .
call the method mail.outbox.extend with messages .
return msg _ count .
import module smtplib .
import module ssl .
import module threading .
from django.conf import settings into default name space .
from django.core.mail.backends.base import BaseEmailBackend into default name space .
from django.core.mail.utils import DNS _ NAME into default name space .
from django.core.mail.message import sanitize _ address into default name space .
derive the class EmailBackend from the BaseEmailBackend base class .
define the method _ _ init _ _ with arguments : self , host set to None , port set to None , username set to None , password set to None ,
use _ tls set to None , fail _ silently set to False , use _ ssl set to None , timeout set to None and unpacked dictionary kwargs. call the _ _ init _ _ method from the base class of the EmailBackend class with argument fail _ silently set to fail _ silently .
if host exists substitute it for self.host , if not substitute settings.EMAIL _ HOST for self.host.
if port exists substitute it for self.host , if not substitute settings.EMAIL _ PORT for self.port.
if username is None substitute settings.EMAIL _ HOST _ USER for self.username , if not substitute username for self.username.
if password is None substitute settings.EMAIL _ HOST _ PASSWORD for self.username , if not substitute password for self.password.
if use _ tls is None substitute settings.EMAIL _ USE _ TLS for self.username , if not substitute use _ tls for self.use _ tls .
if use _ ssl is None substitute settings.EMAIL _ USE _ SSL for self.username , if not substitute use _ ssl for self.use _ ssl .
substitute timeout for self.timeout.
if self.use _ ssl and self.use _ tls are boolean True ,
raise an ValueError exception with argument string &quot; EMAIL _ USE _ TLS / EMAIL _ USE _ SSL are mutually exclusive , so only set one of those settings to True . &quot; .
self.connection is None .
call the method threading.RLock , substitute the result for self . _ lock .
define the method open with argument self .
if self.connection is true ,
return boolean False ,
substitute smtplib.SMTP _ SSL for connection _ class if self.use _ ssl is true , if not substitute smtplib.SMTP for connection _ class .
connection _ params is a dictionary with 1 initial entry : return value of the function DNS _ NAME.get _ fqdn for &apos; local _ hostname &apos; .
if self.timeout is not None ,
set value under the &apos; timeout &apos; key of the connection _ params to self.timeout.
try ,
self.connection is a instance of a class contained in connection _ class , instantiated with arguments : self.host , self.port ,
and unpacked dictionary connection _ params. if self.use _ ssl and self.use _ tls are false ,
call the method self.connection.ehlo.
call the method self.connection.starttls.
call the method self.connection.ehlo.
if self.username and self.password are true ,
call the method self.connection.login with arguments self.username and self.password.
return boolean True .
if smtplib.SMTPException exception is caught ,
if self.fail _ silently is boolean False ,
raise an exception .
define the method close with argument self .
if self.connection is None ,
return nothing .
try ,
try ,
call the method self.connection.quit.
if ssl.SSLError or smtplib.SMTPServerDisconnected exception occurred ,
call the method self.connection.close.
if smtplib.SMTPException exception is caught ,
if self.fail _ silently is boolean True ,
return nothing .
raise an exception .
finally perform ,
self.connection is None .
define the method send _ messages with arguments self and email _ message .
if email _ messages is false ,
return nothing .
call the method self . _ lock , with the return value ,
call the method self.open , substitute the result for the new _ conn _ created .
if self.connection is false ,
return nothing .
num _ sent is an integer 0 .
for every message in email _ messages :
call the method self . _ send with argument message , substitute the result for sent .
if sent is true ,
increment num _ sent by one .
if new _ conn _ created is true ,
call the self.close method .
return num _ sent .
define the method _ send with arguments self and email _ message .
call the email _ message.recipients method , if it evaluates to false ,
return boolean False .
call the function sanitize _ address with arguments email _ message.from _ email and email _ message.encoding , substitute the result for from _ email .
call the function sanitize _ address with arguments addr and email _ message.encoding , for every addr in return value of the function email _ message.recipients , store the results in a recipients list .
call the function email _ message.message , substitute the result for message .
try ,
call the method self.connection.sendmail with arguments : from _ email , recipients and return value of the function message.as _ bytes .
if smtplib.SMTPException exception is caught ,
if self.fail _ silently is false ,
raise an exception .
return boolean False .
return boolean True .
from _ _ future _ _ import unicode _ literals into default name space .
import module mimetypes .
import module os .
import module random .
import module sys .
import module time .
from email import charset as Charset , encoders as Encoders , message _ from _ string and generator .
from email.message import Message into default name space .
from email.mime.text import MIMEText into default name space .
from email.mime.multipart import MIMEMultipart into default name space .
from email.mime.base import MIMEBase into default name space .
from email.mime.message import MIMEMessage into default name space .
from email.header import Header into default name space .
from email.utils import formatdate , getaddresses , formataddr and parseaddr into default name space .
from django.conf import settings into default name space .
from django.core.mail.utils import DNS _ NAME into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils import six into default name space .
call the function Charset.Charset with argument string &apos; utf-8 &apos; , substitute the result for utf8 _ charset .
utf8 _ charset.body _ encoding is None .
DEFAULT _ ATTACHMENT _ MIME _ TYPE is a string &apos; application / octet-stream &apos; .
derive the class BadHeaderError from the ValueError base class .
do nothing .
define the function make _ msgid with argument idstring set to None .
call the function time.time , substitute the result for timeval .
call the function time.gmtime with argument timeval , use string &apos; % Y % m % d % H % M % S &apos; and the previous result as an argument for the call to the time.strftime function , substitute the result for utcdate .
try ,
call the function os.getpid , substitute it for pid .
if AttributeError exception is caught ,
pid is integer 1 .
call the function random.randrange with argument integer 100000 , substitute the result for randint .
if idstring is None ,
idstring is an empty string .
if not ,
append idstring to the &apos; .&apos; character , substitute it for idstring .
substitute DNS _ NAME for idhost .
msgid is a string &apos; &lt; % s . % s . % s % s @ % s &gt; &apos; , replace &apos; % s &apos; with utcdate , pid , randint , idstring and idhost , respectively .
return msgid .
ADDRESS _ HEADERS is a set containing strings : &apos; from &apos; , &apos; sender &apos; , &apos; reply-to &apos; , &apos; to &apos; , &apos; cc &apos; , &apos; bcc &apos; , &apos; resent-from &apos; , &apos; resent-sender &apos; ,
&apos;resent-to &apos; , &apos; resent-cc &apos; and &apos; resent-bcc &apos; . define the function forbid _ multi _ line _ headers with arguments : name , val and encoding .
if encoding does not exists substitute it for settings.DEFAULT _ CHARSET .
call the function force _ text with argument val , substitute it for val .
if characters &apos; \ n &apos; or &apos; \ r &apos; are contained in val ,
raise an BadHeaderError exception with argument string &quot; Header values can &apos;t contain newlines ( got % r for header % r ) &quot; ,
where &apos; % r &apos; are replaced by val and name , respectively. try ,
call the method val.encode with argument string &apos; ascii &apos; .
if UnicodeEncodeError exception is caught ,
convert name to lower case , if it is contained in ADDRESS _ HEADERS , s
call the function sanitize _ address with arguments addr and encoding , for every addr in return value of the getadresses function with tuple containing val as argument , join all the results into a string separated by &apos; , &apos; , substitute the result for val .
if not ,
call the encode function on the Header class instance , created with arguments val and encoding , substitute the result for val .
if not ,
if name converted to lower case equals to string &apos; subject &apos; ,
call the encode function on the Header class instance , created with argument val , substitute the result for val .
return name converted to a string and val .
define the function sanitize _ address with arguments addr and encoding .
if addr is a instance of six.string _ types ,
call the parseaddr function with return value of the force _ text with argument addr , as argument , substitute the result for addr .
nm and addr are addr .
try ,
call the encode function on the Header class instance , created with arguments nm and encoding , substitute the result for nm .
if UnicodeEncodeError exception is caught ,
call the encode function on the Header class instance , created with arguments nm and string &apos; utf-8 &apos; , substitute the result for nm .
try ,
call the addr.encode method with string &apos; ascii &apos; as an argument .
if UnicodeEncodeError exception is caught ,
if character &apos; @ &apos; is contained in addr ,
call the addr.split method with character &apos; @ &apos; and integer 1 as arguments , substitute the result for localpart and domain , respectively .
instantiate Header class with localpart and encoding , convert it to a string , substitute the result for localpart .
call the decode function with argument string &apos; ascii &apos; on the return value of the method domain.encode with argument string &apos; idna &apos; substitute the result for domain .
join localpart and domain in a string separated by &apos; @ &apos; character , substitute it for addr .
if not ,
call the encode function on the Header class instance , created with arguments addr and encoding , substitute the result for addr .
call the formataddr function with argument tuple containing 2 elements nm and addr .
derive the class MIMEMixin .
define the method as _ string with arguments self and unixfrom set to boolean False .
fp is a instance of a class six.StringIO.
g is an instance of a class generator.Generator called with fp and mangle _ from _ set to False .
call the method g.flatten with arguments self and unixfrom set to unixfrom .
call the method fp.getvalue , return the result .
if six.PY2 is boolean True ,
substitute as _ string for as _ bytes .
if not ,
define the method as _ bytes with arguments self and unixfrom set to boolean False .
fp is a instance of a class six.BytesIO.
g is an instance of a class generator.BytesGenerator called with fp and mangle _ from _ set to False .
call the method g.flatten with arguments self and unixfrom set to unixfrom .
call the method fp.getvalue , return the result .
derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class .
define the method _ _ setitem _ _ with arguments self , name and val .
call the function forbid _ multi _ line _ headers with 3 arguments : name , val and string &apos; ascii &apos; , substitute the result for name and val , respectively .
call the method MIMEMessage . _ _ setitem _ _ with arguments self , name and val .
derive the class SafeMIMEText from the MIMEMixin and MIMEText base class .
define the _ _ init _ _ method with arguments : self , text , subtype and charset .
substitute charset for self.encoding.
if charset equals to string &apos; utf-8 &apos; ,
call the method MIMEText . _ _ init _ _ with 4 arguments : self , text , subtype and None .
delete the value under the &apos; Content-Transfer-Encoding &apos; key of self dictionary .
if integers 3 and 2 in a tuple are smaller than the sys.version _ info and sys.version _ info is smaller than integers 3,4 and 4 in a tuple , respectively ,
call the method text.encode with argument utf8 _ charset.output _ charset , substitute the result for payload .
call the method payload.decode with 2 arguments : string &apos; ascii &apos; and string &apos; surrogateescape &apos; , substitute the result for self . _ payload .
call the method self.set _ charset with utf8 _ charset as an argument .
if not ,
call the method payload.decode with 2 arguments : text and utf8 _ charset , substitute the result for self . _ payload .
call the method self.replace _ header with argument string &apos; Content-Type &apos; , &apos; text / % s ; charset = &quot; % s &quot; &apos; , where &apos; % s &apos; symbols are replaced by :
subtype and charset , respectively. if not ,
call the method MIMEText . _ _ init _ _ with 4 arguments : self , text , subtype and charset .
define the method _ _ setitem _ _ with arguments self , name and val .
call the function forbid _ multi _ line _ headers with 3 arguments : name , val and self.encoding , substitute the result for name and val , respectively .
call the method MIMEText . _ _ setitem _ _ with arguments self , name and val .
derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class .
define the method _ _ init _ _ with 6 arguments : self , _ subtype set to string &apos; mixed &apos; , boundary set to None , _ subparts set to None ,
encoding set to None and unpacked dictionary _ params. substitute encoding for self.encoding.
call the method MIMEMultipart . _ _ init _ _ with 5 arguments : self , _ subtype , boundary , _ subparts and unpacked dictionary _ params .
define the method _ _ setitem _ _ with arguments self , name and val .
call the function forbid _ multi _ line _ headers with 3 arguments : name , val and self.encoding , substitute the result for name and val , respectively .
call the method MIMEMultipart . _ _ setitem _ _ with arguments self , name and val .
derive the class EmailMessage from the object base class .
content _ subtype is a string &apos; plain &apos; .
mixed _ subtype is a string &apos; mixed &apos; .
encoding is None .
define the method _ _ init _ _ with 10 arguments : self , subject set to an empty string , body set to an empty string ,
if to is true ,
if to is not an six.string _ types instance raise an error with message string &apos; &quot; to &quot; argument must be a list or tuple &apos; .
put to into a list , assign it to self.to.
if not ,
self.to is an empty list .
if cc is true ,
if cc is not an six.string _ types instance raise an error with message string &apos; &quot; cc &quot; argument must be a list or tuple &apos; .
put cc into a list , assign it to self.cc.
if not ,
self.cc is an empty list .
if bcc is true ,
if bcc is not an six.string _ types instance raise an error with message string &apos; &quot; bcc &quot; argument must be a list or tuple &apos; .
put bcc into a list , assign it to self.bcc.
if not ,
self.bcc is an empty list .
if from _ email exists substitute from _ email for self.from _ email , if not substitute settings.DEFAULT _ FROM _ EMAIL for self.from _ email .
substitute subject for self.subject.
substitute body for self.body.
if attachments exists substitute it for self.attachments , if not attachments is an empty list .
if headers exists substitute it for self.extra _ headers , if not extra _ headers is an empty dictionary .
substitute connection for self.connection.
define the method get _ connection with arguments self and fail _ silently set to boolean False .
from django.core.mail import get _ connection into default name space .
if self.connection is false ,
call the function get _ connection with argument fail _ silently set to fail _ silently , substitute it for self.connection.
return self.connection.
define the method message with argument self .
if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT _ CHARSET for encoding .
msg is a instance of a SafeMIMEText class created with arguments : self.body , self.content _ subtype and encoding .
call the self . _ create _ message method with argument msg , substitute it for msg .
substitute self.subject for value under the &apos; Subject &apos; key of msg dictionary .
call the method self.extra _ headers.get with string &apos; From &apos; and self.from _ email as arguments , substitute the result for value under the &apos; From &apos; key of msg dictionary .
call the method self.extra _ headers.get with arguments : string &apos; To &apos; and joined string from self.to elements separated by &apos; , &apos; ,
substitute the result for value under the &apos; To &apos; key of msg dictionary. if self.cc is true ,
join elements of self.cc into a string separated by &apos; , &apos; , substitute the result for value under the &apos; Cc &apos; key of msg dictionary .
call the key.lower method for every key in self.extra _ headers , join the results into a header _ names .
if &apos; date &apos; is not in header _ names ,
call the formatdate function , substitute it for value under the &apos; Date &apos; key of msg dictionary .
if message-id &apos; is not in header _ names ,
call the make _ msgid function , substitute it for value under the &apos; Message-ID &apos; key of msg dictionary .
for every name and value in return value of the method self.extra _ headers.items ,
convert name to lower case if it equals to string &apos; from &apos; or &apos; to ,
skip this loop execution ,
substitute value for value under name key of msg dictionary .
return msg .
define the method recipients with argument self .
add together self.to , self.cc and self.bcc , return the result .
define the method send with arguments self and fail _ silently set to boolean False .
call the method self.recipients , if it evaluates to false ,
return an integer 0 .
call the method self.get _ connection with argument fail _ silently , on the result call the method send _ messages with one argument : list containing self , return the result .
define the method attach with 4 arguments : self , filename set to None , content set to None and mimetype set to None .
if filename is an instance of MIMEBase ,
if content is not None raise an error .
if mimetype is not None raise an error .
append filename to the self.attachments list .
if not ,
if content is not None raise an error .
append a tuple containing 3 elements : filename , content , mimetype to self.attachments list .
define the method attach _ file with arguments self , path and mimetype set to None .
call the os.path.basename with path as argument , substitute the result for filename .
open file named path in &apos; rb &apos; mode , with file descriptor as f ,
read the whole file f , substitute the result for content .
call the method self.attach with arguments filename , content and mimetype .
define the method _ create _ message with arguments self and msg .
call the method self . _ create _ attachments with argument msg , return the result .
define the method _ create _ attachments with arguments self and msg .
if self.attachments is true ,
if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT _ CHARSET for encoding .
substitute msg for body _ msg .
msg is an instance of a class SafeMIMEMultipart , created with arguments : _ subtype set to self.mixed _ subtype and encoding set to encoding .
if self.body is true ,
call the method msg.attach with an argument body _ msg .
for every attachment in self.attachments ,
if attachment is an instance of MIMEBase ,
call the method msg.attach with an argument attachment .
if not ,
call the method self . _ create _ attachment with an unpacked list attachment as an argument , use the result as an argument for the call to the msg.attach method .
return msg .
define the method _ create _ mime _ attachment with arguments self , content and mimetype .
call the method mimetype.split with arguments : character &apos; / &apos; and integer 1 , substitute the result for basetype and subtype , respectively .
if basetype equals a string &apos; text &apos; ,
if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT _ CHARSET for encoding .
attachment is an instance of a class SafeMIMEText , created with arguments : content , subtype and encoding .
otherwise if basetype equals a string &apos; message &apos; and subtype equals a string &apos; rfc822 &apos; ,
if content is an instance of a EmailMessage class ,
call the method content.message , substitute the result for content .
otherwise if content is not an instance of Message class ,
call the message _ from _ string function with an argument content , substitute the result for content .
attachment is an instance of a class SafeMIMEMessage , created with the arguments content and subtype .
if not ,
attachment is an instance of a class MIMEBase , created with the arguments basetype and subtype .
call the method attachment.set _ payload with an argument content .
call the method Encoders.encode _ base64 with an argument attachment .
return attachment .
define the method _ create _ attachment with 4 arguments : self , filename , content and mimetype set to None .
if mimetype is None ,
call the mimetypes.guess _ type with an argument filename , assign the result to the mimetype and _ , respectively .
if mimetype is None ,
substitute DEFAULT _ ATTACHMENT _ MIME _ TYPE for mimetype .
call the method self . _ create _ mime _ attachment with the arguments content and mimetype , substitute the result for attachment .
if filename is true ,
try ,
call the method filename.encode with an argument string &apos; ascii&apos;
if UnicodeEncodeError exception is caught ,
if six.PY2 is true ,
call the method filename.encode with an argument string &apos; utf-8 &apos; , substitute the result for filename .
filename is a tuple containing 3 initial elements : string &apos; utf-8 &apos; , and empty string and filename .
call the method attachment.add _ header with 3 arguments : string &apos; Content-Disposition &apos; , string &apos; attachment &apos; and filename set to filename .
return attachment .
derive the class EmailMultiAlternatives from the EmailMessage base class .
alternative _ subtype is a string &apos; alternative &apos; .
define the method _ _ init _ _ with 11 arguments : self , subject set to an empty string , body set to an empty string ,
call the method _ _ init _ _ from the base class of the EmailMultiAlternatives class , with 9 arguments : subject , body , from _ email , to ,
bcc , connection , attachments , headers and cc. if alternatives exists substitute it for self.alternatives , if not self.alternatives is an empty list .
define the method attach _ alternative with arguments self , content and mimetype .
if content is None , raise an error .
if mimetype is None , raise an error .
append a tuple containing 2 elements : content and mimetype , to the self.alternatives list .
define the method _ create _ message with arguments self and msg .
call the method self . _ create _ alternatives with an argument msg , use it as an argument for the call to the self . _ create _ attachments method , return the result .
define the method _ create _ alternatives with arguments self and msg .
if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT _ CHARSET for encoding .
if self.alternatives is true ,
substitute msg for body _ msg .
msg is an instance of a class SafeMIMEMultipart , created with the arguments : _ subtype set to self.alternative _ subtype and encoding set to encoding .
if self.body is true ,
call the msg.attach with an argument body _ msg .
for every alternative in self.alternatives ,
call the method self . _ create _ mime _ attachment with unpacked list alternative as an argument , use the result as an argument for the call to the msg.attach method .
return msg .
import module socket .
derive class CachedDnsName from the object base class .
define the method _ _ str _ _ with argument self .
evaluate the self.get _ fqdn method , return the result .
define the method get _ fqdn with argument self .
if self doesnt have an attribute &apos; _ fqdn &apos; ,
call the function socket.getfqdn , substitute the result for self . _ fqdn .
return self . _ fqdn .
DNS _ NAME is a instance of CachedDnsName class .
from _ _ future _ _ import unicode _ literals into default name space .
import module collections .
from importlib import import _ module into default name space .
import module os .
import module sys .
import module django .
from django.apps import apps into default name space .
from django.conf import settings into default name space .
from django.core.exceptions import ImproperlyConfigured into default name space .
from django.core.management.base import BaseCommand , CommandError , CommandParser and handle _ default _ options into default name space .
from django.core.management.color import color _ style into default name space .
from django.utils import lru _ cache into default name space .
from django.utils import six into default name space .
define the function find _ commands with an argument management _ dir .
join management _ dir and string &apos; commands &apos; into a file path name , substitute it for command _ dir .
try ,
for every f in return value of the os.listdir function called with an argument command _ dir , append f without 3 last elements to a list , only if f doesnt start with character &apos; _ &apos; and doesnt ends with string &apos; .py &apos; , return the resulting list .
if OSError exception is caught ,
return an empty list .
define the function load _ command _ class with arguments : app _ name and name .
replace &apos; % s &apos; in string &apos; % s.management.commands. % s &apos; with app _ name and name , respectively , use it as an result for the call to the
import _ module function , substitute the result for module. return an instance of the module.Command class .
decorator lru _ cache.lru _ cache with an argument maxsize set to None .
define the function get _ commands .
commands is an dictionary containing elements : string &apos; django.core &apos; for every name in the function find _ commands return value , called with first element of _ _ path _ _ as an argument .
if settings.configured is false ,
return commands .
for every app _ config in reversed list created out of the return value of the function apps.get _ app _ configs ,
join app _ config.path and string &apos; management &apos; into a file path , substitute it for path .
call the method commands.update , with an argument dictionary containing entries : app _ config _ name for name , for every name in return value of the function find _ commands , called with an argument path .
return commands .
define the function call _ command with 3 arguments : name , unpacked list args and unpacked dictionary options .
try ,
call the function get _ commands , substitute the value under the name key of the return value , for app _ name .
if KeyError exception is caught ,
raise an CommandError exception with an argument string &quot; Unknown command : % r &quot; , with &apos; % r &apos; replaced by name .
if app _ name is an instance of BaseCommand ,
substitute app _ namefor command .
if not ,
call the function load _ command _ class with arguments : app _ name and name , substitute the result for command .
all the method command.create _ parser with arguments : empty and name , substitute the result for parser .
if command.use _ argparse is true ,
call the method parser.parse _ args with an argument args set to args , substitute the result for defaults .
create dictionary out of the unpacked dictionary options , using defaults . _ get _ kwargs as a mapping function , substitute the result for defaults .
if not ,
call the method parser.parse _ args with an arguments args set to an empty list , assign the result for defaults and _ , respectively .
create dictionary out of the unpacked dictionary options , using defaults . _ _ dict _ _ as a mapping function , substitute the result for defaults .
call the command.execute method with arguments : unpacked list args and unpacked dictionary defaults , return the result .
derive the class ManagementUtility from object base class .
define the method _ _ init _ _ with arguments : self class instance and argv set to None .
if argv is true , substitue it for self.argv , if not substitute sys.argv for self.argv.
call the function os.path.basename with first element of self.argv as an argument , substitute the result for self.prog _ name .
self.settings _ exception is None .
define the method main _ help _ text with arguments : self class instance and commands _ only set to boolean False .
if commands _ only is true ,
call the function get _ commands , call the method keys on the result , substitute sorted result for usage .
if not ,
usage is a list containing 4 entries : an empty string , string &quot; Type &apos; % s help &lt; subcommand &gt; &apos; for help on a specific subcommand . &quot; ,
where &apos; % s &apos; is replaced with self.prog _ name , an empty string and string &quot; Available subcommands : &quot; . call the method collections.defaultdict with a argument : lambda function without arguments that returns an empty list ,
substitute the result for commands _ dict. for every name and app in return value of the function six.iteritems calle with return argument of function get _ commands as an arugment ,
if app equals a string &apos; django.core &apos; ,
app is a string &apos; django&apos;
if not ,
call the method app.rpartition with an argument &apos; .&apos; , substitute last element of the result for app .
append name to the value of under the app key of the commands _ dict .
call the color _ style function , substitute the result for style .
for every app in sorted return value of the commands _ dict.keys function ,
append an empty string to usage .
call the style.NOTICE method with an argument string &quot; &#91; % s &#93; &quot; , where &apos; % s &apos; is replaced with app , append the result to usage .
for every name in sorted value under the app key of the commands _ dict dictionary ,
append string &quot; % s &quot; , where &apos; % s &apos; is replaced by name to the usage .
if self.settings _ exception is not None ,
call the method style.NOTICE with an argument string &quot; Note that only Django core commands are listed as settings are not properly configured ( error : % s ) . &quot; , where &apos; % s &apos; is replaced by self.settings _ exception , append the result to usage .
join usage elements in a string separated by newline characters , return it .
define the method fetch _ command , with arguments self and subcommand .
call the function get _ commands , substitute it for commands .
try ,
substitute value under the subcommand key of the commands dictionary for app _ name .
if KeyError exception is caught ,
call settings.INSTALLED _ APPS .
call the method sys.stderr.write with an argument string &quot; Unknown command : % r \ nType &apos; % s help &apos; for usage . \ n &quot; ,
where &apos; % r &apos; is replaced with subcommand and &apos; % s &apos; is replaced with self.prog _ name. call the function sys.exit with an argument integer 1 .
if app _ name is an instance of BaseCommands .
substitute app _ name for klass .
if not ,
call the function load _ command _ class with arguments app _ name and subcommand , substitute the result for klass .
return klass .
define the method autocomplete with an argument self .
if string &apos; DJANGO _ AUTO _ COMPLETE &apos; is not contained in os.environ ,
return nothing .
slit by whitespace the value under the &apos; COMP _ WORDS &apos; key of the os.environ dictionary , substitute the result without the first element for cwords .
convert to an integer value under the &apos; COMP _ CWORD &apos; key of the os.environ dictionary , substitute it for cword .
try ,
substitute cwords element at the cword decremented by 1 index for curr .
if IndexError exception is caugh ,
curr is an empty string .
call the function get _ commands , convert the result to a list , append string &apos; help &apos; to it , substitute it for subcommands .
options is a list containing a tuple with 2 entries : string &apos; --help &apos; and None .
if cword equlals a integer 1 ,
filter all the subcommands element through the lambda function with an argument x , that evaluates the method x.startswith ,
with an argument curr , sort the result and join it in a list separated with blank spaces , print it to the standard output. otherwise if first element of cwords is contanied in subcommands and is not equal to string &apos; help &apos; ,
call the method self.fetch _ command with first element of cwords as an argument , substitute it for subcommand _ cls .
if first element of cwords equals a string &apos; runfcgi &apos; ,
from django.core.servers.fastcgi import FASTCGI _ OPTIONS into default namespace ,
append tuple containing two entries : k and integer 1 to options , for every k in FASTCGI _ OPTIONS .
otherwise if first element of cwords is contanied in tuple with 8 entries : &apos; dumpdata &apos; , &apos; sql &apos; , &apos; sqlall &apos; , &apos; sqlclear &apos; , &apos; sqlcustom &apos; ,
try ,
call the method apps.get _ app _ configs , substitute the result for app _ configs .
append tuple containing two entries : app _ config.label and integer 0 to options , for every app _ config in app _ configs .
if ImportError exception is caught ,
do nothing .
call the method subcommand _ cls.create _ parser with 2 argument an empty string an first element of cwords , substitute it for parser .
if subcommand _ cls.use _ argparse is true ,
append to options a tuple containing 2 entries : firs element of sorted list of the s _ opt.option _ strings ,
and evaluated boolean expression s _ opt.nargs doesnt equal to integer 0 , for every s _ opt in parser . _ actions , only if s _ opt.option _ strings is true , if not ,
append to options a tuple containing 2 entries : result of the method s _ opt.get _ opt _ string and s _ opt.nargs ,
for every s _ opt in parser.option _ list. for every x in slice of cwords from the second element to the element at the cword decremented by 1 index ,
split x by character &apos; = &apos; and append first element of the result to the prev _ opts list. for every opt in options , if first element of opt is not contained in prev _ opts , append opt to the list , substitute it for options .
append tuple containing 2 elements : k and v to a list , for every k and v in options , only if k starts with curr ,
sort the result and substitute it for options. for every option in options ,
substitute first element of options for opt _ label .
if second element of options is true ,
append &apos; = &apos; to opt _ label .
print opt _ label to the standard output .
call the function sys.exit with an integer 1 as an argument .
define the method execute with an argument self ,
try ,
substitute first element of self.argv for subcommand .
if IndexError exception is caught ,
subcommand is a string &apos; help &apos; .
parser is an instance of CommandParser class , created with 3 arguments , None , usage as a string &quot; % ( prog ) s subcommand &#91; options &#93; &#91; args &#93; &quot; and add _ help set to boolean False .
call the method parser.add _ argument with an argument string &apos; --settings &apos; .
call the method parser.add _ argument with an argument string &apos; --pythonpath &apos; .
call the method parser.add _ argument with arguments : string &apos; args &apos; and nargs set to &apos; * &apos; .
try ,
call the method parser.parse _ known _ args wiht an argument self.argv , without the first two elements , assign the result for options ,
and args , respectively. call the method handle _ default _ options with an argument options .
if CommandError exception is caught ,
do nothing .
no _ settings _ commands is a list containing entries : &apos; help &apos; , &apos; version &apos; , &apos; --help &apos; , &apos; --version &apos; , &apos; -h &apos; , &apos; compilemessages &apos; , &apos; makemessages &apos; ,
&apos;startapp &apos; and &apos; startproject &apos; . try ,
call the settings.INSTALLED _ APPS .
if ImproperlyConfigured renamed to exc , exception is caught ,
substitute exc for self.settings _ exception ,
if subcommand is contained in no _ settings _ commands ,
call the method settings.configure.
if settings.configured is true ,
call the method django.setup.
call the method self.autocomplete.
if subcommand equals to a string &apos; help &apos; .
if string &apos; --commands &apos; is contained in args ,
call the method self.main _ help _ text with an argument commands _ only set to boolean True , append new line to it , write it to sys.stdout.
otherwise , length of options.args is lesser than integer 1 ,
call the method self.main _ help _ text append new line to it , write it to sys.stdout.
if not ,
call the method self.fetch _ command with first element of options.args as argument , on the result call the method print _ help ,
with 2 arguments : self.prog _ name and first element of options.args. otherwise if subcommand equals a string &apos; version &apos; or self.argv , without the first element equals a list containing a string &apos; --version&apos;
call the method django.get _ version append new line to it , write it to sys.stdout.
if self.argv , without the first element is contained in a tuple with 2 entries : a list containing a string &apos; --help &apos; ,
and a list containing a string &apos; -h &apos; , call the method self.main _ help _ text , append new line to it , write it to sys.stdout.
if not ,
call the method self.fetch _ command with an argument command , call the method run _ from _ argv on the result with an argument self.argv.
define the function execute _ from _ command _ line with an argument argv set to None .
utility is a instance of ManagementUtility class , created with an argument argv .
call the method utility.execute.
from _ _ future _ _ import unicode _ literals into default name space .
import module os .
import module sys .
import module warnings .
from argparse import ArgumentParser into default name space .
from optparse import OptionParser into default name space .
import module django .
from django.core import checks into default name space .
from django.core.exceptions import ImproperlyConfigured into default name space .
from django.core.management.color import color _ style and no _ style into default name space .
from django.utils.deprecation import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space .
from django.utils.encoding import force _ st into default name space .
derive the class CommandError from the base class Exception .
do nothing .
derive the CommandParser class from the ArgumentParser base class .
define the method _ _ init _ _ with arguments : self , cmd and unpacked dictionary kwargs .
substitute cmd for self.cmd.
call the method _ _ init _ _ from the base class of the CommandParser class , with unpacked dictionary kwargs as argument .
define the method parse _ args with 3 arguments : self , args set to None and namespace set to None .
if self.cmd has an attribute &apos; missing _ args _ message &apos; and next statement is not true : args is true or any arg doesnt start with &apos; -&apos; for arg in args ,
call the method self.error with an argument self.cmd.missing _ args _ message .
call the parse _ args method with arguments args and namespace , from the base class of the CommandParser class .
define the method error with arguments self and message .
if self.cmd. _ called _ from _ command _ line is true ,
call the method error with an argument message , from the base class of the class CommandParser .
if not ,
raise an CommandError exception with an argument string &quot; Error : % s &quot; , with &apos; % s &apos; replaced by message .
define the function handle _ default _ options with an argument options .
if options.settings is true ,
substitute options.settings for value under the &apos; DJANGO _ SETTINGS _ MODULE &apos; key of the os.environ dictionary .
if options.pythonpath is true ,
insert options.pythonpath at the beginning of sys.path.
derive the OutputWrapper class from the object base class .
define the method _ _ init _ _ with 4 arguments : self , out , style , func set to None and endings set to newline character .
substitute out for self . _ out .
substitute None for self.style _ func .
if out has an &apos; isatty &apos; argument and return value of the function out.isatty is true ,
substitute style _ func for self.style _ func .
substitute ending for self.ending.
define the method _ _ getattr _ _ with arguments self and name .
get name attribute of the self . _ out object , return it .
define the method write with 4 arguments : self , msg , style _ func with None and ending set None .
if ending is None substitute self.ending for ending .
if ending is true and msg doesnt end with ending ,
append ending to msg .
if f is not None append it to a list for every f in tuple containing 3 elements : style _ func , self.style _ func ,
and lambda function returning x for x , substitute the firs element of resulting list for style _ func. call the function style _ func with an argument msg , use the result as an argument for the call to the function force _ str ,
use the result as an argument for the call to the function self . _ out.write. derive the BaseCommand class from the object base class .
options _ list is an empty tuple .
help is an empty string .
args is an empty string .
_ called _ from _ command _ line is boolean False .
can _ import _ settings is boolean True .
output _ transaction is boolean False .
leave _ locale _ alone is boolean False .
define the method _ _ init _ _ with an argument self .
call the function color _ style , substitute the result for self.style.
if self has an &apos; requires _ model _ validation &apos; attribute , has _ old _ option is boolean True , otherwise it is boolean False .
if self has an &apos; requires _ system _ checks &apos; attribute , has _ new _ option is boolean True , otherwise it is boolean False .
if has _ old _ option is true ,
call the function warnings.warn with 2 arguments : string &apos; &quot; requires _ model _ validation &quot; is deprecated &apos;
&apos;in favor of &quot; requires _ system _ checks &quot; . &apos; and RemovedInDjango19Warning. if has _ old _ option and has _ new _ option are both true ,
raise an ImproperlyConfigured exception wiht an argument string &apos; Command % s defines both &quot; requires _ model _ validation &quot; &apos;
&apos;and &quot; requires _ system _ checks &quot; , which is illegal . Use only &quot; requires _ system _ checks &quot; . &apos; , replace &apos; % s &apos; for self . _ _ class _ _ . _ _ name _ _ . call the method self.requires _ system _ checks with an argument : self.requires _ system _ checks if has _ new _ option is true ,
or if it is false , but has _ old _ option is true use self.requires _ model _ validation , if they are both false use boolean True as an argument. property decorator ,
define the method use _ argparse with an argument self ,
convert self.option _ list into a boolean , return the inverted value .
define the method get _ version with an arguments self .
call the function django.get _ version , return the result .
define the method usage with arguments self and subcommand .
substitute &apos; % s &apos; in the string &apos; % % prog % s &#91; options &#93; % s &apos; with subcommand and self.args , respectively , substitute it for usage .
if self.help is true ,
join usage and self.help into a string , separated by 2 new line characters , return it .
if not ,
return usage .
define the method create _ parser with 3 arguments : self , prog _ name and subcommand .
if self.use _ argparse is false ,
call the function warnings.warn with 2 arguments : string &quot; OptionParser usage for Django management commands &quot;
&quot; is deprecated , use ArgumentParser instead &quot; and RemovedInDjango20Warning. parser is an instance of the object OptionParser , created with arguments : prog set to prog _ name ,
usage set to return value of the method self.usage called with an argument subcommand , version set to return value of the method self.get _ version. call the method parser.add _ option with 8 arguments : string &apos; -v &apos; , string &apos; --verbosity &apos; , action set to string &apos; store &apos; ,
dest set to string &apos; verbosity &apos; , default set to string &apos; 1&apos; , type set to string &apos; choice &apos; , choices is a list containing elements : &apos; 0&apos; , &apos; 1&apos; , &apos; 2&apos; , &apos; 3&apos; , and help as a string &apos; Verbosity level ; 0 = minimal output , 1 = normal output , 2 = verbose output , 3 = very verbose output &apos; . call the method parser.add _ option with 2 arguments : string &apos; --settings &apos; and help as a string &apos; The Python path to a settings module , e.g. &quot; myproject.settings.main &quot; . If this isn \ &apos; t provided , the DJANGO _ SETTINGS _ MODULE environment variable will be used . &apos; .
call the method parser.add _ option with 2 arguments : string &apos; --pythonpath &apos; and help set to string &apos; A directory to add to the Python path , e.g. &quot; / home / djangoprojects / myproject &quot; . &apos; .
call the method parser.add _ option with 3 arguments : string &apos; --traceback &apos; , action set to a string &apos; store _ true &apos; ,
and help = &apos; Raise on exception &apos; . call the method parser.add _ option with 5 arguments : string &apos; --no-color &apos; , action set to a string &apos; store _ true &apos; ,
dest set to string &apos; no _ color &apos; default set to boolean False and help set to a string &quot; Don &apos;t colorize the command output . &quot; . for every opt in self.option _ list ,
call the method parser.add _ option with an argument opt .
if not ,
parser is an instance of CommandParser class , created with 3 arguments : self , prog as a string created by joining :
os.path.basename ( prog _ name ) and subcommand , separated by whitespace and description set to self.help , if exists , or None , otherwise. call the method parser.add _ option with 3 arguments : string &apos; --version &apos; , action set to string &apos; version &apos; ,
and version set to result of the method self.get _ version. call the method parser.add _ option with 8 arguments : string &apos; -v &apos; , string &apos; --verbosity &apos; , action set to string &apos; store &apos; ,
dest set to string &apos; verbosity &apos; , default set to string &apos; 1&apos; , type set to int , choices is a list , containing integers : 0 , 1 , 2 and 3 , call the method parser.add _ option with 2 arguments : string &apos; --settings &apos; and help as a string &apos; The Python path to a settings module , e.g. &quot; myproject.settings.main &quot; . If this isn \ &apos; t provided , the DJANGO _ SETTINGS _ MODULE environment variable will be used . &apos; 
call the method parser.add _ option with 2 arguments : string &apos; --pythonpath &apos; and help set to a string &apos; A directory to add to the Python path , e.g. &quot; / home / djangoprojects / myproject &quot;  . &apos; 
call the method parser.add _ option with 3 arguments : string &apos; --traceback &apos; , action set to a string &apos; store _ true &apos; ,
and help set to string &apos; Raise on exception &apos; . call the method parser.add _ option with 5 arguments : string &apos; --no-color &apos; , action is string &apos; store _ true &apos; , dest is string &apos; no _ color &apos; ,
default is boolean False , and help is a string &quot; Don &apos;t colorize the command output . &quot; . if self.args is true ,
call the method parser.add _ argument with 2 arguments : string &apos; args &apos; and nargs set to &apos; * &apos; .
call the method self.add _ arguments with an argument parser .
return parser
define the method add _ arguments with an argument self and parser .
do nothing
define the method print _ help with 3 arguments : self , prog _ name and subcommand .
call the method self.create _ parser with arguments prog _ name and subcommand .
call the method parser.print _ help .
define the method run _ from _ argv with arguments self and argv .
self . _ called _ from _ command _ line is boolean True .
call the method self.create _ parser with first and second element of argv , substitute the result for parser .
if self.use _ argparse is true ,
call the method parser.parse _ args with argv , without the first 2 elements , substitute the result for options .
call the function vars with an argument options , substitute the result for cmd _ options .
if &apos; args &apos; is contained in options ,
substitute options.args for args .
delete value under the &apos; args &apos; key of the cmd _ options dictionary .
if not ,
args is an empty tuple .
if not ,
call the method parser.parse _ args with argv , without the first 2 elements , substitute the result for options and args .
call the function vars with an argument options , substitute the result for cmd _ options .
call the function handle _ default _ options with an argument options .
try ,
call the method self.execute , with 2 arguments : unpacked list args and unpacked dictionary cmd _ options .
if Exception , renamed to e , exception is caught ,
if options.traceback is true or e is not CommandError instance ,
raise an exception .
if it exists , get &apos; stderr &apos; attribute of self , substitute it for stderr , if not , stderr is an instance of OutputWrapper class ,
created with arguments sys.stderr and self.style.ERROR. replace &apos; % s &apos; in string &apos; % s : % s &apos; with e . _ _ class _ _ . _ _ name _ _ and e , respectively , write it to the stderr stream .
call the function sys.exit with an argument integer 1 .
define the method execute with 3 arguments : self , unpacked list args and unpacked dictionary options .
self.stdout is an instance of OutputWrapper class created with an argument : value under the &apos; stdout &apos; key of the options dictionary ,
if the key doesnt exists use sys.stdout as an argument. if value under the &apos; no _ color &apos; key of the options dictionary .
call the function no _ style , substitute the result for self.style.
self.stderr is an OutputWrapper object instance , created with value under the &apos; stderr &apos; key of the options dictionary as an argument ,
if the key doesnt exists use sys.stderr as an argument. if not ,
self.stderr is an instance of an OutputWrapper object , created with 2 arguments : value under the &apos; stderr &apos; key of the options dictionary , if it doesnt exists use the sys.stderr instead , and self.style.ERROR.
if self.can _ import _ settings is true ,
from django.conf import settings into default namespace ,
saved _ locale is None .
if self.leave _ locale _ alone is false ,
if self.can _ import _ settings is false ,
raise an CommandError exception with an argument string , &quot; Incompatible values of &apos; leave _ locale _ alone &apos; &quot;
&quot; ( % s ) and &apos; can _ import _ settings &apos; ( % s ) command options . &quot; , replace &apos; % s &apos; with self.leave _ locale _ alone and self.can _ import _ settings. from django.utils import translation into default namespace .
call the method translation.get _ language , substitute th result for saved _ locale .
call the method translation.activate with an argument string &apos; en-us &apos; .
try ,
if self.requires _ system _ checks is true and values under the &apos; skip _ validation &apos; and &apos; skip _ checks &apos; keys of the options dictionary are false ,
call the method self.check ,
call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options , substitute the result for output .
if output is true ,
if self.output _ transaction is true ,
from django.db import connections and DEFAULT _ DB _ ALIAS into default namespace .
get the value under the &apos; database &apos; key of the options dictionary , if it doesnt exists use the DEFAULT _ DB _ ALIAS to address an element
from the connections list , substitute it for connection. call the method connection.ops.start _ transaction _ sql , if it evaluates to true ,
call the method connection.ops.start _ transaction _ sql , use the result as an argument for the call to the method self.style.SQL _ KEYWORD ,
write the result to the self.stdout stream. write output to self.stdout stream .
if self.output _ transaction is true ,
call the method connection.ops.end _ transaction _ sql , use the result as the argument for the call to the method self.style.SQL _ KEYWORD ,
append the result to the &apos; \ n &apos; string , write it to self.stdout. finally perform ,
if saved _ locale is not None ,
call the method translation.activate with an argument saved _ locale .
define the method with 3 arguments : self , app _ config set to None and display _ num _ errors set to boolean False .
if app _ config is None ,
app _ configs is not None .
if not ,
app _ configs is a list containing app _ config .
call the method self.check with 2 arguments app _ configs set to app _ configs , display _ num _ errors set to display _ num _ errors , return the result .
define the method check with 4 arguments : self , app _ configs set to None , tags set to None , display _ num _ errors set to boolean False .
call the method checks.run _ checks with 2 arguments : app _ configs set to app _ configs , tags set t tags , substitute the result for all _ issues .
msg is an empty string .
visible _ issue _ count is an integer 0 .
if all _ issues is true ,
append e to debugs list for every e in all _ issues , if e.level is lesser than checks.INFO and result of the method e.is _ silenced in false .
append e to infos list for every e in all _ issues , if checks.INFO is lesser or equal to e.level ,
and e.level is lesser than checks.WARNING and result of the method e.is _ silenced in false. append e to warnings list for every e in all _ issues , if checks.WARNING is lesser than or equal to e.level ,
and e.level is lesser than checks.WARNING and result of the method e.is _ silenced in false. append e to errors list for every e in all _ issues , if checks.ERROR is lesser than or equal to e.level ,
and e.level is lesser than checks.CRITICAL. append e to criticals list for every e in all _ issues , if checks.CRITICAL is lesser than or equal to e.level.
sorted _ issues is a list of tuples with 5 entries : criticals and &apos; CRITICALS &apos; , errors and &apos; ERRORS &apos; , warnings and &apos; WARNINGS &apos; ,
infos , &apos; INFOS &apos; for every issues and group _ name in sorted _ issues ,
if issues is true ,
increment visible _ issue _ count for length of issues .
if e.is _ serious method evaluates to true , call the function color _ style , on the result call the method ERROR with result of the force _ str called with an argument e , if not call the function color _ style on the result call the method ERROR with result of the force _ str called with an argument e , for every e in issues , formatted is a tuple containing the previous result .
sort elements formatted , join them in the list separated with newline character , substitute the result for formatted .
substitute &apos; % s &apos; in the string &apos; \ n % s : \ n % s \ n &apos; , with group _ name and formatted , substitute the result for msg .
if msg is true ,
replace &apos; % s &apos; in string &quot; System check identified some issues : \ n % s &quot; with msg , substitute it for msg .
if display _ num _ errors is true ,
if msg is true ,
append newline character to msg .
append string &quot; System check identified % s ( % s silenced ) . &quot; to msg , replace first &apos; % s &apos; for : string &quot; no issues &quot; ,
if visible _ issue _ count equals to integer 0 , or for string &quot; 1 issue &quot; if visible _ issue _ count equals integer 1 , or for string &quot; % s issues &quot; , with &apos; % s &apos; replaced by visible _ issue _ count , subtract visible _ issue _ count from length of all _ issues , and substitute it for second &apos; % s &apos; in the stirting string. if any element in the return value of the e.is _ serious method is true , and if return value of the method e.is _ silenced is false ,
for every e in all _ issues , raise an CommandError with argument msg ,
otherwise if msg and visible _ issue _ count are true ,
write msg to self.stderr stream .
otherwise if msg is true ,
write msg to self.stderr stream .
define the method handle with 3 arguments : self , unpacked args and unpacked dictionary options .
raise an NotImplementedError exception with an argument string &apos; subclasses of BaseCommand must provide a handle ( ) method &apos; .
derive the AppCommand class from the BaseCommand base class .
missing _ args _ message is an string &quot; Enter at least one application label . &quot; .
define the method add _ arguments with self and parser as arguments .
call the method parser.add _ argument with 4 arguments : string &apos; args &apos; , metavar set to &apos; app _ label &apos; , nargs set to &apos; + &apos; ,
and help set to string &apos; One or more application label . &apos; . define the method handle with 3 arguments : self , unpacked list app _ labels and unpacked dictionary options .
from django.apps import apps into default name space .
try ,
call the method apps.get _ app _ config with an argument app _ lable , for every app _ label in app _ labels , append the results to app _ configs list .
if LookupError or ImportError , renamed to e , exceptions are caught ,
raise an CommandError with an argument string &quot; % s . Are you sure your INSTALLED _ APPS setting is correct ? &quot; , with &apos; % s &apos; replaced by e .
output is an empty list .
for eery app _ config in app _ configs ,
call the self.handle _ app _ config method with app _ config and options as arguments , substitute the result for app _ output .
if app _ output is true ,
append app _ output to output .
join elements of output into a string , separated by newline characters , return it .
define the method handle _ app _ config with 3 arguments : self , app _ config and unpacked dictionary options .
try ,
substitute self.handle _ app for handle _ app .
if AttributeError exception is caught ,
raise an NotImplementedError with an argument string &quot; Subclasses of AppCommand must provide a handle _ app _ config ( ) method . &quot; .
if not ,
call the function warnings.warn with 3 argument : string &quot; AppCommand.handle _ app ( ) is superseded by AppCommand.handle _ app _ config ( ) . &quot; ,
RemovedInDjango19Warning and stacklevel set to integer 2. if app _ config.models _ module is None ,
raise an CommandError with an argument string &quot; AppCommand cannot handle app &apos; % s &apos; in legacy mode because it doesn &apos;t have a models module . &quot; , where &apos; % s &apos; is replaced by app _ config.label.
call the function handle _ app with 2 arguments : app _ config.models _ module and unpacked dictionary options .
derive the LabelCommand class from the BaseCommand base class .
label is a string &apos; label&apos;
substitute string &quot; Enter at least one % s . &quot; , with &apos; % s &apos; replaced by label , for missing _ args _ message .
define the method add _ arguments with arguments self and parser .
call the method parser.add _ argument with 3 arguments : string &apos; args &apos; , metavar set to self.label and nargs set to &apos; + &apos; .
define the method handle with 3 arguments : self , unpacked list labels and unpacked dictionary options .
output is an empty list .
for every label in labels ,
call the method self.handle _ label with 2 arguments : label and unpacked dictionary options , substitute the result for label _ output .
if label _ output is true ,
append label _ output to output .
join output into a string , separated by newline characters , return it .
define the method handle _ label with 3 arguments : self , label and unpacked dictionary options .
raise an NotImplementedError exception with an argument string &apos; subclasses of LabelCommand must provide a handle _ label ( ) method &apos; .
derive the NoArgsCommand class from the BaseCommand base class .
args is an empty string .
define the method _ _ init _ _ with an argument self .
call the function warnings.warn with 2 arguments : string &quot; NoArgsCommand class is deprecated and will be removed in Django 2.0 . &quot;
&quot; Use BaseCommand instead , which takes no arguments by default . &quot; and RemovedInDjango20Warning. call the _ _ init _ _ method from the base class of the NoArgsCommand class .
define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
if args is true ,
raise an CommandError exception with an argument string &quot; Command doesn &apos;t accept any arguments &quot; .
call the self.handle _ noargs method with with unpacked dictionary options as argument , return the result .
define the method handle _ noargs with 2 arguments : self and unpacked dictionary options .
raise an NotImplementedError with an argument string &apos; subclasses of NoArgsCommand must provide a handle _ noargs ( ) method &apos; .
import module os .
import module sys .
from django.utils import termcolors into default name space .
define the function supports _ color , without arguments .
substitute sys.platform for plat .
evaluate the logic expression , plat does not equals to string &apos; Pocket PC &apos; , and plat does not equals to string &apos; win32&apos;
or string &apos; ANICON &apos; is in os.environ , substitute the evaluated boolean for supported _ platform. if sys.stdout has an attribute named &apos; isatty &apos; and call to the sys.stdout.isatty returns boolean True , substitute True for is _ a _ tty .
if supported _ platform is False or is _ a _ tty is False ,
return boolean False .
return boolean True .
define function color _ style , without input arguments .
call the function supports _ color , if evaluates to False ,
substitute return value of function no _ style for style .
if not ,
get the value under the key &apos; DJANGO _ COLORS &apos; of os.environ dictionary , if key doesnt exists return empty string , assign the result to DJANGO _ COLORS .
call the function termcolors.parse _ color _ setting with DJANGO _ COLORS as an argument , assign the result to color _ settings .
if color _ setting is True ,
define class dummy .
do nothing .
style is an instance of the dummy class .
for every role in termcolors.PALETTES list at the index termcolors.NOCOLOR _ PALETTE ,
assign the value of the dictionary color _ settings under the key role to format , if key doesnt exist assign the empty dictionary .
sets the role attribute of the style object to the value of the call to the termcolors.make _ style function with dictionary format as an argument .
substitute style.ERROR for style.ERROR _ OUTPUT .
if not ,
substitute return value of function no _ style for style .
return style .
define function no _ style , without input arguments .
define class dummy .
define private method _ _ getattr _ _ with self class instance and attr as the arguments .
create lambda identity function which returns x for input parameter x , return the function .
return an instance of a dummy class .
from _ _ future _ _ import unicode _ literals into default name space .
from django.apps import apps into default name space .
from django.core import checks into default name space .
from django.core.checks.registry import registry into default name space .
from django.core.management.base import BaseCommand and CommandError into default name space .
derive the class Command from the BaseCommand base class .
help is a string &quot; Checks the entire Django project for potential problems . &quot; .
requires _ system _ checks is boolean False .
define the method add _ arguments with arguments self and parser .
call the method parser.add _ argument with 3 arguments : string &apos; args &apos; , metavar set to string &apos; app _ label &apos; and nargs set to &apos; * &apos; .
call the method parser.add _ argument with 5 arguments : string &apos; --tag &apos; , string &apos; -t &apos; , action set to string &apos; append &apos; ,
dest set to string &apos; tags &apos; and help set to string &apos; Run only checks labeled with given tag . &apos; . call the method parser.add _ argument with 4 arguments : string &apos; --list-tags &apos; , action set to string &apos; store _ true &apos; ,
dest set to string &apos; list _ tags &apos; and help set to string &apos; List available tags . &apos; . define method handle with arguments self , unapcked list app _ labels and unpacked dictionary options .
if value under the &apos; list _ tags &apos; key of options dictionay is true ,
call the method registry.tags _ available , sort the result and join it into a string , separate by newlines , write it to self.stdout.
return nothing .
if app _ labels is true ,
call the method apps.get _ app _ config with an argument app _ label , for every app _ label in app _ labels , append the results to a list ,
substitute the resulting list for app _ config. if not ,
app _ configs is None .
get the value under the &apos; tags &apos; key of the options dictionary , if it exists substitute it for tags , if not , tags is None .
if tags exists and if all elements in the return value of the method checks.tag _ exists called with an argument tag ,
for every tag in tags , are false , for every tag in tags , if return value of the method checks.tag _ exists called with an argument tag , evaluates to false ,
use tag as an argument to call the iterator method next , substitute the result for invalid _ tag. raise an CommandError exception with an argument string &apos; There is no system check with the &quot; % s &quot; tag . &apos; , where &apos; % s &apos; is replaced with invalid _ tag .
call the method self.check with arguments : app _ configs set to app _ configs , tags set to tags , display _ num _ errors set to boolean True .
from _ _ future _ _ import unicode _ literals into default name space .
import module codecs .
import module glob .
import module os .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.core.management.utils import find _ command and popen _ wrapper into default name space .
from django.utils. _ os import npath and upath into default name space .
define the function has _ bom with fn as argument .
open the file fn in read mode , with file descriptor as f ,
read 4 bytes from file f and store it in sample .
evaluate the boolean expression , if first three characters of sample equals to string of bytes &apos; \ xef \ xbb \ xbf \ &apos; ,
of if sample starts with codecs.BOM _ UTF16 _ LE or sample starts with codecs.BOM _ UTF16 _ BE , return the evaluated boolean expression. define the function is _ writable with path as argument ,
try ,
with open file path in append mode ,
call the os.utime unction , with path and None as arguments .
if IOError or OSError exceptions occurred ,
return boolean False .
return boolean True .
derive class Command from base class BaseCommand .
help is string &apos; Compiles .po files to .mo files for use with builtin gettext support . &apos; .
requires _ system _ checks is boolean False .
leave _ locale _ alone is boolean True .
program is string &apos; msgfmt&apos;
program _ options is list containing string &apos; --check-format &apos; .
define method add _ arguments with self class instance and parser as arguments .
call the method parser.add _ argument with string &apos; --locale &apos; , string &apos; -l &apos; , dest set to string &apos; locale &apos; , action set to string &apos; append &apos; ,
default as an empty list and help as an string &apos; Locale ( s ) to process ( e.g. de _ AT ) . Default is to process all . Can be used multiple times . &apos; . call the method parser.add _ argument with string &apos; --exclude &apos; , string &apos; -x &apos; , dest set to string &apos; exclude &apos; , action set to string &apos; append &apos; ,
default as an empty list and help as an string &apos; Locales to exclude . Default is none . Can be used multiple times . &apos; . define the handle method with self class instance and dictionary * * options as arguments .
get the value under the key &apos; locale &apos; of the options dictionary , substitute it for locale .
get the value under the key &apos; exclude &apos; of the options dictionary , substitute it for exclude .
get the value under the key &apos; exclude &apos; of the options dictionary , convert it to an integer , substitute it for exclude .
if evaluation of the function find _ command with self.program as argument equals to None ,
raise CommandError exception , with sring &quot; Can &apos;t find % s . Make sure you have GNU gettext tools 0.15 or newer installed . &quot; as argument , substitute &apos; % s &apos; with self.program.
basedirs is a list containing tuple with strings , &apos; conf / locale &apos; and &apos; locale &apos; .
if value under the &apos; DJANGO _ SETTINGS _ MODULE &apos; key of os.environ dictionary exists .
from django.conf import settings into default name space .
call function update with path as the argument , for every path in settings.LOCALE _ PATHS , extend basedirs list with previous items .
create a list out of basedir elements for which function os.path.isdir returns true , apply the os.path.abspath function on every element , and put the results in a list , basedir is set of previous list elements .
if basedirs is empty ,
raise CommandError exception with string &quot; This script should be run from the Django Git checkout or your project or app tree , or with the settings module specified . &quot; , as argument .
all _ locales is an empty string .
for every basedir in basedirs ,
locale _ dirs is a list of elements from the list of path names that maths the basedir path with &apos; / * &apos; wild card characters for which call to the os.path.isdir returned true , assign it to locale _ dirs .
extend all _ locales list with the elements of locale _ dirs list on which os.path.basename function was applied .
take locale or all _ locales , whichever is not empty , respectively , and substitute it for locales .
locales is relative complement of set exclude in set locales .
for every basedir in basedirs ,
if locales in not empty ,
join basedir , l and string &apos; LC _ MESSAGES &apos; into a path separated by &apos; / &apos; for every l in locales , assign the list to dirs .
if not ,
dirs is a list containing basedir .
locations is an empty list .
for every ldir in dirs ,
for dirpath , dirnames and filenames , respectively , in directory tree tuple starting from the ldir ,
extend locations with tuple containing dirpath and f , for every f in filenames , only if it ends with string &apos; .po &apos; .
if locations is not empty ,
call the self.compile _ messages with locations as argument ,
define compile _ messages method with self class instance and locations as a arguments .
for every i and tuple containing dirpath and f , in enumerated list of locations ,
if self.verbosity is greater than integer 0 ,
call the self.stdout.write method with string &apos; processing file % s in % s \ n &apos; as argument , replacing all the occurrences of &apos; % s &apos; with f and dirpath , respectively .
po _ path is a string containing joined directory path from dirpath and f .
evaluate function has _ bom with po _ path as argument .
raise CommandError exception with string &quot; The % s file has a BOM ( Byte Order Mark ) . Django only supports .po files encoded in UTF-8 and without any BOM . &quot; , with &apos; % s &apos; replaced with po _ path , as argument .
call os.path.splitext function with po _ path as argument , substitute the first element of the result for base _ path .
if i equals to integer 0 and
call the self.stderr.write , with string &quot; The po files under % s are in a seemingly not writable location. mo files will not be updated / created . &quot; as argument , with &apos; % s &apos; replaced by dirpath .
return nothing .
extend self.program list with self.program _ options , string &apos; -o &apos; ,
return value of the npath function with string &apos; .mo &apos; appended to the base _ path as argument , and return value of the npath function with string &apos; .po &apos; appended to the base _ path as argument , substitute it for args. call the popen _ wrapper with args as the argument , assign the result to the output , errors and status , respectively .
if status is True ,
if errors is True ,
msg is a string &quot; Execution of % s failed : % s &quot; , with &apos; % s &apos; replaced by self.program and errors .
if not ,
msg is a string &quot; Execution of % s failed &quot; , with &apos; % s &apos; replaced by self.program.
raise CommandError exception with msg as argument .
from django.conf import settings into default name space .
from django.core.cache import caches into default name space .
from django.core.cache.backends.db import BaseDatabaseCache into default name space .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.db import connections , router , transaction , models and DEFAULT _ DB _ ALIAS into default name space .
from django.db.utils import DatabaseError into default name space .
from django.utils.encoding import force _ text into default name space .
derive the class Command from the BaseCommand base class .
help is an string &quot; Creates the tables needed to use the SQL cache backend . &quot; .
requires _ system _ checks is boolean False .
define the method add _ arguments with arguments self and parser .
call the method parser.add _ argument with 4 arguments : string &apos; args &apos; , metavar set to string &apos; table _ name &apos; , nargs set to &apos; * &apos; character ,
and help set to a string &apos; Optional table names . Otherwise , settings.CACHES is used to find cache tables . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --database &apos; , action set to string &apos; store &apos; , dest as a string &apos; database &apos; ,
default set to DEFAULT _ DB _ ALIAS and help set to a string : &apos; Nominates a database onto which the cache tables will be installed . Defaults to the &quot; default &quot; database . &apos; define the method handle with arguments self , unpacked list tablenames and unpacked dictionary options .
get value under the &apos; database &apos; key of the options dictionary , substitute it for db .
get the value under the &apos; verbosity &apos; key of the options dictionary , convet it to an integer and substitute for self.verbosity.
if length of tablenames is greater than zero ,
for every tablename in tablenames ,
call the method self.create _ table with arguments : db and tablename .
if not ,
for every cache _ alias in settings.CACHES ,
substitute value under the cache _ alias key of the caches dictionary for cache .
if cache is an instance of BaseDatabaseCache ,
all the method self.create _ table with arguments : db and cache . _ table .
define the method create _ table with arguments self , database and tablename .
cache is an instance of BaseDatabaseCache class , created with arguments : tablename and an empty dictionary .
call the method router.allow _ migrate with 2 arguments : database and cache.cache _ model _ class , if it evaluates to false ,
return nothing .
substitute value under the database key of the connections dictionary for connection .
if tablename is contained in return value of the method connection.introspection.table _ names ,
if self.verbosity is greater than integer 0 ,
replace &apos; % s &apos; in string &quot; Cache table &apos; % s &apos; already exists . &quot; with tablename , write it to the self.stdout stream .
return nothing .
fields is an tuple containing 3 entries : return value of the method models.CharField called with 4 arguments :
name set to a string &apos; cache _ key &apos; , max _ length set to integer 255 , unique set to boolean True and primary _ key set to boolean True , return value of the method models.TextField called with argument name set to a string &apos; value &apos; , and return value of the method models.DateTimeField called with 2 arguments : name set to string &apos; expires &apos; and db _ index set to True. table _ output is an empty list .
index _ output is an empty list .
substitute connection.ops.quote _ name for qn .
for every f in fields ,
field _ output is an list containing 2 elements : return value of the function qn called with an argument f.name ,
and return value of the function f.db _ type called with an argument connection set to connection. if f.null is false , append string append &quot; NOT NULL &quot; to field _ output , otherwise append &quot; NULL &quot; to field _ output .
if f.primary _ key is true ,
append string &quot; PRIMARY KEY &quot; to field _ output .
otherwise if f.unique is true ,
append string &quot; UNIQUE &quot; to field _ output .
if f.db _ index is true ,
if f.unique is true , substitute &quot; UNIQUE &quot; for unique , otherwise unique is an empty string .
replace &apos; % s &apos; in string &quot; CREATE % sINDEX % s ON % s ( % s ) ; &quot; with : unique , return value of the function qn called with an argument :
a string &apos; % s _ % s &apos; , where &apos; % s &apos; is replaced with tablename and f.name , respectively , return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name. join field _ output elements into a string , separated by whitespaces , append it to table _ output .
full _ statement is a list containing : string &quot; CREATE TABLE % s ( &quot; , where % s is replaced by result of the function qn called with an argument tablename .
for every i and line in enumerated iterable table _ output ,
replace % s in string &apos; % s % s &apos; with : line and character &apos; , &apos; if i is lesser than length of table _ output decremented by one ,
or with an empty string if its not , append the resulting string to full _ statement. append string &apos; ) ; &apos; to full _ statement .
evaluate method transaction.atomic with arguments : using set to database and savepoint set to connection.features.can _ rollback _ ddl ,
with the result , evaluate method connection.cursor , with return value as curs ,
try ,
join full _ statement into a string , separated by newlines , use it as an argument for the call to the method curs.execute.
if DatabaseError , renamed to e , exception is caught ,
raise an CommandError with an argument string &quot; Cache table &apos; % s &apos; could not be created . \ nThe error was : % s . &quot; , replace &apos; % s &apos; with :
tablename and return value of the function force _ text called with an argument e , respectively. for every statement in index _ output ,
execute statement on the database that curs points to .
if self.verbosity is greater than integer 1 ,
replace &apos; % s &apos; in string &quot; Cache table &apos; % s &apos; created . &quot; with tablename , write it to self.stdout.
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
derive the class Command from the BaseCommand base class .
help is a tuple containing a string &quot; Runs the command-line client for specified database , or the default database if none is provided . &quot; .
requires _ system _ checks is boolean False .
define the method add _ arguments with self and parser .
call the method parser.add _ argument with arguments : string &apos; --database &apos; , action set to string &apos; store &apos; , dest set to string &apos; database &apos; ,
default set to DEFAULT _ DB _ ALIAS and help set to string &apos; Nominates a database onto which to open a shell . Defaults to the &quot; default &quot; database . &apos; . define the method handle with arguments self and unpacked dictionary options .
get the value under the &apos; database &apos; key of the options dictionary , use it as a key to access the element under the connections dictionary , substitute it for connection .
try ,
call the method connection.client.runshell.
if OSError exception is caught ,
raise an CommandError exception with an argument string &apos; You appear not to have the % r program installed or on your path . &apos; ,
from django.core.management.base import BaseCommand into default name space .
define the function module _ to _ dict with 2 arguments : module and omittable as a lambda function with an argument k ,
return dictionary created out of tuple elements k and printable representation of v ,
for every k and v in return value of the method module . _ _ dict _ _ .items , only if result of the method omittable called with an argument k is false. derive the class Command from the BaseCommand base class .
requires _ system _ checks is boolean False .
define the method add _ arguments with 2 arguments self and parser .
call the method parser.add _ argument with 5 arguments : string &apos; --all &apos; , action set to string &apos; store _ true &apos; , dest set to string &apos; all &apos; ,
default set to boolean False and help set to a string &apos; Display all settings , regardless of their value . Default values are prefixed by &quot; # # # &quot; . &apos; define the method handle with arguments self and unpacked dictionary options .
from django.conf import settings , global _ settings into default name space .
call the method settings . _ setup .
call the function module _ to _ dict with an argument settings . _ wrapped , substitute it for user _ settings .
call the function module _ to _ dict with an argument global _ settings , substitute it for default _ settings .
output is an empty string .
for every key in sorted list of user _ settings ,
if key is not contained in default _ settings ,
replace &apos; % s &apos; in string &quot; % s = % s # # # &quot; with key and value under the key key of the user _ setting dictionary , append it to the output .
otherwise if value under the key key of the user _ settings dictionary is not equal to the value under the key key of the default _ settings dictionary ,
replace &apos; % s &apos; in string &quot; % s = % s &quot; with key and value under the key key of the user _ setting dictionary , append it to the output .
otherwise if value under the key &apos; all &apos; of the options dictionary is true ,
replace &apos; % s &apos; in string &quot; # # # % s = % s &quot; with key and value under the key key of the user _ setting dictionary , append it to the output .
join elements of the output into a string , separated by newlies , return the string .
import module warnings .
from collections import OrderedDict into default name space .
from django.apps import apps into default name space .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.core import serializers into default name space .
from django.db import router and DEFAULT _ DB _ ALIAS into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
derive the class Command from the BaseCommand base class .
help is a tuple containing a string &quot; Output the contents of the database as a fixture of the given &quot;
&quot; format ( using each model &apos;s default manager unless --all is specified ) . &quot; . define the method add _ arguments with arguments self and parser .
call the method parser.add _ argument with 4 arguments : string &apos; args &apos; , metavar set to string &apos; app _ label &#91; .ModelName &#93; &apos; ,
nargs set to &apos; * &apos; and help is a string &apos; Restricts dumped data to the specified app _ label or app _ label.ModelName. &apos; . call the method parser.add _ argument with 4 arguments : string &apos; --format &apos; , default set to string &apos; json &apos; ,
dest set to &apos; format &apos; and help is a string &apos; Specifies the output serialization format for fixtures . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --indent &apos; , default set to None , dest set to &apos; indent &apos; ,
type set to int and help is a string &apos; Specifies the indent level to use when pretty-printing output . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --database &apos; , default set to string &apos; store &apos; , dest set to &apos; database &apos; ,
add set to DEFAULT _ DB _ ALIAS and help is &apos; Nominates a specific database to dump fixtures from . Defaults to the &quot; default &quot; database . &apos; . call the method parser.add _ argument with 6 arguments : string &apos; -e &apos; , string &apos; --exclude &apos; , dest set to &apos; exclude &apos; , action set to &apos; append &apos; ,
default is a an empty list and help is a string &apos; ( use multiple --exclude to exclude multiple apps / models ) . &apos; . call the method parser.add _ argument with 6 arguments : string &apos; -n &apos; , string &apos; --natural &apos; , action is string &apos; store _ true &apos; , dest is string &apos; use _ natural _ keys &apos; ,
default is boolean False and help is a string &apos; Use natural keys if they are available ( deprecated : use --natural-foreign instead ) . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --natural-foreign &apos; , action set to string &apos; store _ true &apos; ,
dest is string &apos; use _ natural _ foreign _ keys &apos; , default is boolean False and help is a string &apos; Use natural foreign keys if they are available . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --natural-primary &apos; , action set to &apos; store _ true &apos; ,
dest is &apos; use _ natural _ primary _ keys &apos; , default is boolean False and help is a string &apos; Use natural primary keys if they are available . &apos; . call the method parser.add _ argument with 6 arguments : string &apos; -a &apos; , string &apos; --all &apos; , action set to &apos; store _ true &apos; ,
dest is &apos; use _ base _ manager &apos; , default is boolean False and help is a string &apos; ( use multiple --exclude to exclude multiple apps / models ) . &apos; . call the method parser.add _ argument with 3 arguments : string &apos; --pks &apos; , dest set to string &apos; primary _ keys &apos; ,
and help is a string &quot; Only dump objects with given primary keys . Accepts a comma separated list of keys . &quot; &quot; This option will only work when you specify one model . &quot; . call the method parser.add _ argument with 5 arguments : string &apos; -o &apos; , string &apos; --output &apos; , default is None , dest set to string &apos; output &apos; ,
and help is a string &apos; Specifies file to which the output is written . &apos; . define the method handle with arguments self , unpacked list app _ labels and unpacked dictionary options .
get the value under the &apos; format &apos; key of the options dictionary , substitute the result for format .
get the value under the &apos; indent &apos; key of the options dictionary , substitute the result for indent .
get the value under the &apos; database &apos; key of the options dictionary , substitute the result for database .
get the value under the &apos; exclude &apos; key of the options dictionary , substitute the result for exclude .
get the value under the &apos; output &apos; key of the options dictionary , substitute the result for output .
get the value under the &apos; traceback &apos; key of the options dictionary , substitute the result for traceback .
get the value under the &apos; use _ natural _ keys &apos; key of the options dictionary , substitute the result for use _ natural _ keys .
if use _ natural _ keys is true ,
call the function warnings.warn with an argument string &quot; ``--natural`` is deprecated ; use ``--natural-foreign`` instead . &quot; ,
and RemovedInDjango19Warning. get the value under the &apos; use _ natural _ foreign _ keys &apos; key of the options dictionary , substitute the result for use _ natural _ foreign _ keys .
get the value under the &apos; use _ natural _ primary _ keys &apos; key of the options dictionary , substitute the result for use _ natural _ primary _ keys .
get the value under the &apos; use _ base _ manager &apos; key of the options dictionary , substitute the result for use _ base _ manager .
get the value under the &apos; primary _ keys &apos; key of the options dictionary , substitute the result for pks .
if pks is true ,
split string pks by &apos; , &apos; , substitute the result for primary _ keys .
if not ,
primary _ keys is an empty list .
excluded _ apps is an empty set .
excluded _ models is an empty set .
for every exclude in excludes ,
if &apos; .&apos; is contained in exclude ,
try ,
call the method apps.get _ model with exclude as an argument , substitute it for model .
if LookupError exception is caught ,
raise an CommandError exception with an argument string &apos; Unknown model in excludes : % s &apos; , where &apos; % s &apos; is replaced with exclude .
add model to excluded _ models set .
if not ,
try ,
call the method apps.get _ app _ config with an argument exclude , substitute the result for app _ config .
if LookupError exception is caught ,
raise CommandError with an argument string &apos; Unknown app in excludes : % s &apos; , where &apos; % s &apos; is replaced with exclude .
add app _ config to excluded _ apps set .
if length of app _ labels equals integer 0 ,
if primary _ keys is true ,
raise an CommandError exception with an argument string &quot; You can only use --pks option with one model &quot; .
app _ list is an instance of OrderedDict class , created with an argument a tuple containing elements : app _ config and None ,
for every app _ config in return value of the method apps.get _ app _ configs , only if app _ config.models _ module is not None , and app _ config is not contained in excluded _ apps. if not ,
if length of app _ labels is greater than integer 1 and primary _ keys is true ,
raise an CommandError exception with an argument string &quot; You can only use --pks option with one model &quot; .
app _ list is an instance of a class OrderedDict .
for every label in app _ labels ,
try ,
split label by &apos; .&apos; , assign the result to app _ label and model _ label , respectively .
try ,
call the method apps.get _ app _ config with an argument app _ label , substitute the result for app _ config .
if LookupError exception is caught ,
raise CommandError with an argument string &apos; Unknown app in excludes : % s &apos; , where &apos; % s &apos; is replaced with exclude .
if app _ config.models _ module is None or app _ config is contained in excluded _ apps ,
skip this loop iteration .
try ,
call the method app _ config.get _ model with an argument model _ label , substitute the result for model .
if LookupError exception is caught ,
raise CommandError with an argument string &apos; Unknown model : % s &apos; , where &apos; % s &apos; is replaced with app _ label and model _ label , respectively .
call the method app _ list.setdefault with 2 arguments app _ config and an empty list , substitute the result for app _ list _ value .
if app _ list _ value is not None ,
if mode is not contained in app _ list _ value ,
append model to app _ list _ value .
if ValueError exception is caught ,
if primary _ keys is true ,
raise an CommandError exception with an argument string &quot; You can only use --pks option with one model &quot; .
substitute label for app _ label .
try ,
call the method apps.get _ app _ config with an argument app _ label , substitute the result for app _ config .
if LookupError exception is caught ,
raise CommandError with an argument string &apos; Unknown application : % s &apos; , where &apos; % s &apos; is replaced with app _ label .
if app _ config.models _ module is None or app _ config is contained in excluded _ apps
skip this loop iteration .
value under the app _ config key of the app _ list is None .
if format is not contained in return value of the method serializers.get _ public _ serializer _ formats ,
try ,
call the method serializers.get _ serializer with an argument format .
if serializers.SerializerDoesNotExist exception is caught ,
do nothing .
raise CommandError with an argument string &apos; Unknown serialization format : % s &apos; , where &apos; % s &apos; is replaced with format .
define the function get _ objects .
call the method app _ list.items , use the result as an argument for the call to the function sort _ dependencies , for every model in result ,
if model is contained in excluded _ models ,
skip this loop iteration .
if model . _ meta.proxy is false and return value of the function router.allow _ migrate called with arguments using and model is true ,
if use _ base _ manager is true ,
substitute model . _ base _ manager for objects .
if not ,
substitute model . _ default _ manager for objects .
call the method objects.using with an argument using , call the method order _ by on the result with an argument model . _ meta.pk.name ,
substitute the result for queryset. if primary _ keys is true ,
call the method queryset.filter with an argument pk _ _ in set to primary _ keys , substitute the result for queryset .
for every obj in result of the method queryset.iterator ,
yield obj , as an return value of the generator .
try ,
self.stdout.ending is None .
open the output file in writing mode if output is true , assign the file descriptor to stream , otherwise stream is None .
try ,
call the method serializers.serialize with 6 arguments : format , result of the function get _ objects , indent set to indent ,
use _ natural _ foreign _ keys set to use _ natural _ foreign _ keys , use _ natural _ primary _ keys set to use _ natural _ primary _ keys , and stream set to stream , if the stream is true , otherwise stream set to self.stdout. finally perform ,
if stream is true ,
close the file stream .
if Exception , renamed to e , exception is caught ,
if show _ traceback is true ,
raise an exception .
raise CommandError with an argument string &quot; Unable to serialize database : % s &quot; , where &apos; % s &apos; is replaced with e .
define the function sort _ dependencies with an argument app _ list .
model _ dependencies is an empty list .
models is an empty set .
for every app _ config and model _ list in app _ list ,
if model _ list is None ,
call the method app _ config.get _ models , substitute the result fr model _ list .
for every model in model _ list ,
add model to models set .
if model has an &apos; natural _ key &apos; attribute ,
get &apos; dependencies &apos; attribute of the model.natural _ key , substitute it for deps , if the attribute doesnt exist , deps in an empty list .
if deps is true ,
for every dep in deps call the method apps.get _ model with an argument dep , and append the result to the list , substitute it for deps .
if not ,
deps is an empty list .
for every field in model . _ meta.fields ,
if field.rel has an &apos; to &apos; attribute ,
substitute field.rel.to with rel _ model .
if rel _ model has an attribute &apos; natural _ key &apos; and rel _ model is not equal to model ,
append rel _ model to deps .
for every field in model . _ meta.many _ to _ many ,
if field.rel.through. _ meta.auto _ created is true ,
substitute field.rel.to for rel _ model .
if rel _ model has an &apos; natural _ key &apos; attribute and rel _ model is not equal to model ,
append rel _ model to deps .
append a tuple containing 2 elements : model and deps to model _ dependencies .
call the methof model _ dependencies.reverse.
model _ list is an empty list .
while model _ dependencies is true ,
skipped is an empty list .
changed is boolean False .
while model _ dependencies is true ,
remove first element from model _ dependencies , assign it to model and deps , respectively .
found is boolean True .
for every d in deps , if d is not contained in models and d is contained in model _ list add boolean True to a tuple ,
otherwise add boolean False , for every candidate in the result perform following , if candidate is false ,
found is boolean False .
if found is true ,
append model to model _ list .
changed is boolean True .
if not ,
append a tuple containing 2 elemetns : model and deps , to skipped .
if changed is false ,
raise an CommandError with argument : string &quot; Can &apos;t resolve dependencies for % s in serialized app list . &quot; , where &apos; % s &apos; is replaced with :
model . _ meta.app _ label and model . _ meta.object _ name joined into a string , with separator &apos; .&apos; , result joined into a string , separated by string &apos; , &apos; for every model and deps in sorted list of elements skipped sorted by key : return value of the lambda function with an argument obj , and result the _ _ name _ _ field of the first element of obj. substitute skipped for model _ dependencies .
return model _ list .
import module sys .
from importlib import import _ module into default name space .
from django.apps import apps into default name space .
from django.db import connections , router , transaction and DEFAULT _ DB _ ALIAS into default name space .
from django.core.management import call _ command into default name space .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.core.management.color import no _ style into default name space .
from django.core.management.sql import sql _ flush and emit _ post _ migrate _ signal into default name space .
from django.utils.six.moves import input into default name space .
from django.utils import six into default name space .
derive the class Command from the BaseCommand base class .
help is a tuple containing a string : &apos; Removes ALL DATA from the database , including data added during &apos;
&apos;migrations . Unmigrated apps will also have their initial _ data fixture reloaded . Does not achieve a &quot; fresh install &quot; state . &apos; define the add _ arguments with arguments self and parser .
call the method parser.add _ argument with 5 arguments : string &apos; --noinput &apos; , action set to string &apos; store _ false &apos; ,
dest set to string &apos; interactive &apos; , default set to boolean True , help as a string &apos; Tells Django to NOT prompt the user for input of any kind . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --database &apos; , action set to string &apos; store &apos; , dest as a string &apos; database &apos; ,
default set to DEFAULT _ DB _ ALIAS and help as a string &apos; Nominates a database to flush . Defaults to the &quot; default &quot; database . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --no-initial-data &apos; , action set to string &apos; store _ false &apos; ,
dest set to string &apos; load _ initial _ data &apos; , default = True and help as a string &apos; Tells Django not to load any initial data after database synchronization . &apos; . define the method handle with arguments self and unpacked dictionary options .
substitute value under the &apos; database &apos; key of the options dictionary for database .
substitute value under the database key of the connections dictionary for connection .
substitute value under the &apos; verbosity &apos; key of the options dictionary for verbosity .
substitute value under the &apos; interactive &apos; key of the options dictionary for interactive .
get the value &apos; reset _ sequences &apos; key of the options dictionary , if it exists substitute it for reset _ sequences , otherwise reset _ sequences is boolean True .
get the value &apos; allow _ cascade &apos; key of the options dictionary , if it exists substitute it for allow _ cascade , otherwise allow _ cascade is boolean False .
get the value &apos; inhibit _ post _ migrate &apos; key of the options dictionary , if it exists substitute it for inhibit _ post _ migrate , otherwise inhibit _ post _ migrate is boolean False .
call the function no _ style , substitute it for self.style.
for every app _ config in return value of the method apps.get _ app _ configs ,
try ,
call the function import _ module with 2 arguments : string .management and app _ config.name.
if ImportError exception is caught ,
do nothing .
call the method sql _ flush with 5 arguments : self.style , connection , only _ django set to boolean True ,
reset _ sequences set to reset _ sequences , allow _ cascade set to allow _ cascade , substitute the result for sql _ list. if interactive is true ,
request user input from the standard input , assign it o confirm , with the query string : &quot; You have requested a flush of the database . &quot;
&quot; This will IRREVERSIBLY DESTROY all data currently in the % r database , and return each table to an empty state . &quot; &quot; Are you sure you want to do this ? &quot; Type &apos; yes &apos; to continue , or &apos; no &apos; to cancel : &quot; , where &apos; % s &apos; is replaced with value under the &apos; NAME &apos; key of the connection.settings _ dict dictionary. if not ,
confirm is a string &apos; yes &apos; .
if confirm equals a string &apos; yes &apos; ,
try ,
call the method transaction.atomic with 2 arguments : using set to database , savepoint set to connection.features.can _ rollback _ ddl ,
with the result , call the method connection.cursor , with the result as cursor ,
for every sql in sql _ list ,
call the method cursor.execute with an argument sql .
if Exception , renamed to e , exception is caught ,
new _ msg is a tuple containing a string : &quot; Database % s couldn &apos;t be flushed . Possible reasons : \ n &quot;
&quot; * The database isn &apos;t running or isn &apos;t configured correctly . \ n * At least one of the expected database tables doesn &apos;t exist . \ n &quot; &quot; * The SQL was invalid . \ nHint : Look at the output of &apos; django-admin.py sqlflush &apos; . That &apos;s the SQL this command wasn &apos;t able to run . \ n &quot; &quot; The full error : % s &quot; , where &apos; % s &apos; is replaced by value under the &apos; NAME &apos; key of the connection.settings _ dict dictionary and e. call the function six.reraise with 3 arguments : CommandError , CommandError created with argument new _ msg ,
and third element of the return value of the function sys.exc _ info. if inhibit _ post _ migrate is false ,
call the method self.emit _ post _ migrate with arguments verbosity , interactive and database .
if value under the &apos; load _ initial _ data &apos; key of the options dictionary is true ,
call the function call _ command with 3 arguments : string &apos; loaddata &apos; , string &apos; initial _ data &apos; and unpacked dictionary options .
if not ,
write string &quot; Flush cancelled . \ n &quot; to self.stdout stream .
class static method ,
define the method emit _ post _ migrate with arguments verbosity , interactive and database .
all _ models is an empty list .
for every app _ config in return value of the method apps.get _ app _ configs ,
call the method router.get _ migratable _ models with arguments app _ config , database and include _ auto _ created set to boolean True ,
extend all _ models list with the result. call the function emit _ post _ migrate _ signal with 4 arguments : all _ models converted into a set , verbosity , interactive and database .
from _ _ future _ _ import unicode _ literals into default name space .
from collections import OrderedDict into default name space .
import module keyword .
import module re .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
derive the class Command from the BaseCommand base class .
help is an string &quot; Introspects the database tables in the given database and outputs a Django model module . &quot; .
requires _ system _ checks is boolean False .
db _ module is a string &apos; django.db &apos; .
define the method add _ arguments with arguments self and parser .
call the method parser.add _ argument with 5 arguments : string &apos; --database &apos; , action set to string &apos; store &apos; , dest as a string &apos; database &apos; ,
default set to DEFAULT _ DB _ ALIAS and help as a string &apos; Nominates a database to introspect . Defaults to using the &quot; default &quot; database . &apos; . define the method handle with 2 arguments : self and unpacked dictionary options .
try ,
for every line in return value of the method self.handle _ inspection called with an argument options ,
append new line to line , write it to self.stdout stream .
if NotImplementedError exception is caught ,
raise an CommandError exception with an argument &quot; Database inspection isn &apos;t supported for the currently selected database backend . &quot; .
define the method handle _ inspection with 2 argument : self and options .
get value under the &apos; database &apos; key of the options dictionary , use it as a key to get the value from the connections dictionary ,
substitute the result for connection. get the value under the &apos; table _ name _ filter &apos; key of the options dictionary , substitute it for table _ name _ filter .
table2model is a lambda function with an argument table _ name , return value is the return value of the re.sub method ,
called with 3 arguments : raw string &apos; &#91; ^ a-zA-Z0-9 &#93; &apos; , empty string and result of the method table _ name.title. strip _ prefix is a lambda function with an argument s , return value is s without the first element if s starts with string &apos; u &apos; &apos; ,
otherwise returns s. call the method connection.cursor , with the result as cursor ,
yield string &quot; # This is an auto-generated Django model module . &quot; as the result .
yield string &quot; # You &apos;ll have to do the following manually to clean this up : &quot; as the result .
yield string &quot; # * Rearrange models &apos; order &quot; as the result .
yield string &quot; # * Make sure each model has one field with primary _ key = True &quot; as the result .
yield string &quot; # * Remove `managed = False` lines if you wish to allow Django to create , modify , and delete the table &quot; as the result .
yield string &quot; # Feel free to rename the models , but don &apos;t rename db _ table values or field names . &quot; as the result .
yield string &quot; # &quot; as the result .
yield string &quot; # Also note : You &apos;ll have to insert the output of &apos; django-admin.py sqlcustom &#91; app _ label &#93; &apos; &quot; as the result .
yield string &quot; # into your database . &quot; as the result .
yield string &quot; from _ _ future _ _ import unicode _ literals &quot; as the result .
yield and empty string as the result .
yield string &apos; from % s import models &apos; % self.db _ module as the result , where &quot; % s &quot; is replaced with self.db _ module .
known _ models is an empty list .
for every table _ name in return value of the method connection.introspection.table _ names called with an argument cursor ,
if table _ name _ filter is not None and table _ name _ filter is callable object ,
call the function table _ name _ filter with an argument table _ name , if it evaluates to true ,
skip this loop iteration ,
yield and empty string as the result .
yield and empty string as the result .
yield string &apos; from % s import models &apos; % self.db _ module as the result , where &quot; % s &quot; is replaced with result of the call to the function ,
table2model with an argument table _ name. call the function table2model with an argument table _ name , append the result to known _ models .
try ,
call the method connection.introspection.get _ relations with 2 arguments cursor , table _ name and substitute the result for relations .
if NotImplementedError exception is caught ,
relations is an empty dictionary .
try ,
call the method connection.introspection.get _ relations with 2 arguments cursor , table _ name and substitute the result for indexes .
if NotImplementedError exception is caught ,
indexes is an empty dictionary .
used _ column _ names is an empty list .
for every i and row in enumerated result of the method connection.introspection.get _ table _ description called with arguments : cursor and table _ name ,
comment _ notes is an empty list .
extra _ params is an instance of the class OrderedDict .
substitute first element of row for column _ name .
if i is contained in relations , is _ relation is boolean True , otherwise is _ relation is boolean False .
call the method self.normalize _ col _ name with 3 arguments column _ name , used _ column _ names , is _ relation , assign the result to att _ name , params and notes , respectively .
add params to extra _ params dictionary .
extend comment _ notes list with notes .
append att _ name to used _ column _ names list .
if column _ name is contained in indexes ,
if value under the &apos; primary _ key &apos; key of the dictionary contained under the column _ name key of the dictionary indexes is true ,
value under the &apos; primary _ key &apos; key of the extra _ params dictionary is boolean True ,
otherwise if , if value under the &apos; unique &apos; key of the dictionary contained under the column _ name key of the dictionary indexes is true ,
value under the &apos; unique &apos; key of the extra _ params dictionary is boolean True ,
if is _ relation is true ,
if second element of the i-th row of relations equals table _ name , rel _ to is string &apos; self &apos; ,
otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel _ to. if rel _ to is contained in known _ models ,
append rel _ to to string &apos; ForeignKey ( , substitute the result for field _ type .
if not ,
append rel _ to to string &apos; ForeignKey ( , append character &quot; &apos; &quot; to it , substitute the result for field _ type .
if not ,
call the method self.get _ field _ type with 3 arguments connection , table _ name and row , assign the result to field _ type , field _ params ,
field _ notes , respectively. add field _ params to extra _ params dictionary .
extend comment _ notes list with field _ notes .
append &apos; ( &apos; to field _ type .
if att _ name equals string &apos; id &apos; and extra _ params equals a dictionary with 1 entry : boolean True for &apos; primary _ key &apos; ,
if field _ type equals a string &apos; AutoField ( &apos; ,
skip this loop iteration .
otherwise if field _ type equals a string &apos; IntegerField ( &apos; and connection.features.can _ introspect _ autofield is false ,
append string &apos; AutoField ? &apos; to comment _ notes .
if seventh element of row is true ,
if field _ type equals a string &apos; BooleanField ( &apos; ,
field _ type is a string &apos; NullBooleanField ( &apos;
if not ,
value under the &apos; blank &apos; key of the extra _ params dictionary is boolean True .
if field _ type is not equal to string &apos; TextField ( &apos; or string &apos; CharField ( &apos; ,
value under the &apos; null &apos; key of the extra _ params dictionary is boolean True .
field _ desc is a string &apos; % s = % s % s &apos; , where &apos; % s &apos; is replaced with : att _ name , an empty string if &apos; .&apos; is contained in field _ type ,
or with string &apos; models . &apos; if it is not and field _ type. if extra _ params is true ,
if field _ desc doesnt end with &apos; ( &apos; ,
append string &apos; , &apos; to field _ desc .
in string &apos; % s = % s &apos; replace &apos; % s &apos; with k and return value of the function strip _ prefix with an argument printable representation of v ,
for every k and v in return value of the extra _ params.items method , join all results into a string separated by a string &apos; , &apos; , substitute it for field _ desc. append string &apos; ) &apos; to field _ desc .
if comment _ notes is true ,
join elements of comment _ notes into a string , separated by whitespaces , append it to the string &apos; # &apos; , append the result to field _ desc .
yield string &apos; % s &apos; , where &apos; % s &apos; is replaced with field _ desc .
for meta _ line in return value of the method self.get _ meta called with an argument table _ name .
yield meta _ line as the result .
define the method normalize _ col _ name with 4 arguments : self , col _ name , used _ column _ names and is _ relation .
field _ params is an empty dictionary .
field _ notes is an empty list .
convert col _ name to lowercase , substitute the result for new _ name .
if new _ name is not equal to col _ name ,
append string &apos; Field name made lowercase . &apos; to field _ notes .
if is _ relation ,
if new _ name ends with string &apos; _ id &apos; ,
substitute new _ name , without the last 3 elements for new _ name .
if not ,
substitute col _ name for value under the &apos; db _ column &apos; key of the field _ params dictionary .
cal the method re.subn with 3 arguments : raw string &apos; \ W &apos; , string &apos; _ &apos; and new _ name .
if num _ repl is greater than integer 0 ,
append string &apos; Field renamed to remove unsuitable characters . &apos; to field _ notes .
call the method new _ name.find , with an argument string &apos; _ _ &apos; , if it evaluates to greater or equal than integer 0 ,
while the result of the method new _ name.find , called with an argument string &apos; _ _ &apos; is greater or equals integer 0 ,
replace all the occurrences of &apos; _ _ &apos; with &apos; _ &apos; in new _ name .
convert col _ name to lowercase , on the result call the method find with an argument string &apos; _ _ &apos; , if the result is greater of equal to integer 0 ,
append string &quot; Field renamed because it contained more than one &apos; _ &apos; in a row . &quot; to field _ notes .
if new _ name starts with a string &apos; _ &apos; ,
convert new _ name to a string and append it to string &apos; field &apos; , substitute the result for new _ name .
append string &quot; Field renamed because it started with &apos; _ &apos; . &quot; to field _ notes .
if new _ name ends with a string &apos; _ &apos; ,
convert new _ name to a string and append string &apos; field &apos; to it , substitute the result for new _ name .
append string &quot; Field renamed because it ended with &apos; _ &apos; . &quot; to field _ notes .
call the method keyword.iskeyword with an argument new _ name , if it evaluates to true ,
append string &apos; _ field &apos; to new _ name .
append string &quot; Field renamed because it was a Python reserved word . &quot; to field _ notes .
if first element of new _ name is digit ,
convert new _ name to a string and append it to string &apos; number _ &apos; , substitute the result for new _ name .
append string &quot; Field renamed because it wasn &apos;t a valid Python identifier . &quot; to field _ notes .
if new _ name is contained in used _ column _ names ,
num is an integer 0 .
in string &apos; % s _ % d &apos; , replace &apos; % s &apos; with new _ name and &apos; % d &apos; with num , while the result is contained in used _ column _ names ,
increment num by one .
in string &apos; % s _ % d &apos; , replace &apos; % s &apos; with new _ name and &apos; % d &apos; with num , substitute the result for new _ name .
append string &quot; Field renamed because of name conflict . &quot; to field _ notes .
if col _ name is not equal to new _ name and field _ notes is true ,
substitute col _ name for value under the &apos; db _ column &apos; key of the field _ params dictionary .
return new _ name , field _ params and field _ notes .
define the method get _ field _ type with 4 arguments : self , connection , table _ name and row .
field _ params is an instance of a class OrderedDict .
field _ notes is an empty list .
try ,
call the method connection.introspection.get _ field _ type with 2 arguments : second element of row and row , substitute the result for field _ type .
if KeyError exception is caught ,
field _ type is a string &apos; TextField &apos; .
append a string &apos; This field type is a guess . &apos; to field _ notes .
if field _ type is a tuple ,
substitute field _ type for field _ type and new _ params , respectively .
call the method field _ params.update with an argument new _ params.1
if field _ type equals a string CharField &apos; and fourth element of row is true ,
convert fourth element of row to an integer , substitute it for value under the &apos; max _ digits &apos; key of the field _ params .
if field _ type equals a string &apos; DecimalField &apos; ,
if fifth and sixth elements of row are None ,
append string &apos; max _ digits and decimal _ places have been guessed , as this database handles decimal fields as float &apos; to field _ notes .
if fifth element of row is not None , substitute it for value under the &apos; max _ digits &apos; key of the field _ params ,
otherwise , value under the &apos; max _ digits &apos; key of the field _ params is integer 10. if sixth element of row is not None , substitute it for value under the &apos; decimal _ places &apos; key of the field _ params ,
otherwise , value under the &apos; decimal _ places &apos; key of the field _ params is integer 5. if not
substitute fifth element of row for value under the &apos; max _ digits &apos; key of the field _ params .
substitute sixth element of row for value under the &apos; decimal _ places &apos; key of the field _ params .
return field _ type , field _ params and field _ notes .
define the method get _ meta with arguments self and table _ name .
return the list , containing 4 elements : an empty string , string &quot; class Meta : &quot; , string &quot; managed = False &quot; ,
from _ _ future _ _ import unicode _ literals into default name space .
import module glob .
import module gzip .
import module os .
import module warnings .
import module zipfile .
from django.apps import apps into default name space .
from django.conf import settings into default name space .
from django.core import serializers into default name space .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.core.management.color import no _ style into default name space .
from django.db import connections , router , transaction , DEFAULT _ DB _ ALIAS , IntegrityError and DatabaseError into default name space .
from django.utils import lru _ cache into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils.functional import cached _ property into default name space .
from django.utils. _ os import upath into default name space .
from itertools import product into default name space .
try ,
import bz2 .
has _ bz2 is boolean True .
if ImportError exception is caught ,
has _ bz2 is boolean False .
derive the class Command from the BaseCommand base class .
help is an string &apos; Installs the named fixture ( s ) in the database . &apos; .
missing _ args _ message is a tuple containing a string &quot; No database fixture specified . Please provide the &quot;
&quot; path of at least one fixture in the command line . &quot; define the method add _ arguments with 2 arguments : self and parser .
call the method parser.add _ argument with 4 arguments : string &apos; args &apos; , metavar set to string &apos; fixture &apos; , nargs set to &apos; + &apos; ,
and help set to &apos; Fixture labels . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --database &apos; , action set to string &apos; store &apos; , dest as a string &apos; database &apos; ,
default set to DEFAULT _ DB _ ALIAS and help as a string &apos; Nominates a specific database to load fixtures into . Defaults to the &quot; default &quot; database . &apos; call the method parser.add _ argument with 5 arguments : string &apos; --app &apos; , action as a string &apos; store &apos; , dest as a string &apos; app _ label &apos; ,
default set to None , help is a string &apos; Only look for fixtures in the specified app . &apos; . call the method parser.add _ argument with 6 arguments : string &apos; --ignorenonexistent &apos; , string &apos; -i &apos; , action as a string &apos; store _ true &apos; ,
dest as a string &apos; ignore &apos; , default set to boolean False and help set to string &apos; Ignores entries in the serialized data for fields that do not currently exist on the model . &apos; . define the method handle with 3 arguments : self , unpacked list fixture _ labels and unpacked dictionary options .
get the value under the &apos; ignore &apos; key of the options dictionary , substitute it for self.ignore.
get the value under the &apos; database &apos; key of the options dictionary , substitute it for self.database.
get the value under the &apos; app _ label &apos; key of the options dictionary , substitute it for self.app _ label .
get the value under the &apos; hide _ empty &apos; key of the options dictionary , if the key exists substitute it for self.hide _ empty ,
if not , self.hide _ empty is boolean False. get the value under the &apos; verbosity &apos; key of the options dictionary , substitute it for self.verbosity.
call the method transaction.atomic with an argument using set to self.using , with the result ,
call the method self.loaddata with an argument fixture _ labels .
call the method transaction.get _ autocommit with an argument self.using , if it evaluates to true ,
get the value under the self.using key of the connections dictionary , call the method close on it .
define the method loaddata with 2 arguments self and fixture _ labels .
get the value under the self.using key of the connections dictionary , substitute it for connection .
self.fixture _ count is integer 0 .
self.loaded _ object _ count is integer 0 .
self.fixture _ object _ count is integer 0 .
self.models is an empty set .
call the method serializers.get _ public _ serializer _ formats , substitute the result for self.serialization _ formats .
self.compression _ formats is an dictionary with 3 initial entries : tuple containing 2 elements : open and string &apos; rb &apos; for None ,
tuple with 2 arguments : gzip.GzipFile and string &apos; rb &apos; for &apos; gz &apos; , tuple with 2 arguments : SingleZipReader and string &apos; r &apos; for &apos; gzip &apos; . if has _ bz2 is true ,
substitute tuple with 2 elements : bz2.BZ2File and string &apos; r &apos; for value under the &apos; bz2 &apos; key of the self.compression _ formats dictionary .
call the method connection.constraint _ checks _ disabled , with the result perform ,
for every fixture _ label in fixture _ labels ,
call the method self.load _ label with an argument fixture _ label .
for model in self.models append model . _ meta.db _ table to a list , substitute the resulting list for table _ names .
try ,
call the method connection.check _ constraints with an arguments table _ names set to table _ names .
if Exception , renamed to e , exception is caught ,
e.args is a tuple , containing 1 element : string &quot; Problem installing fixtures : % s &quot; , where &apos; % s &apos; is replaced with e .
raise an exception .
if self.loaded _ object _ count is greater than zero ,
call the method connection.ops.sequence _ reset _ sql with 2 arguments : return value of the no _ style and self.models ,
substitute the result for sequence _ sql. if sequence _ sql is true ,
if self.verbosity is grater than , or equal to integer 2 ,
write a string &quot; Resetting sequences \ n &quot; to self.stdout stream .
call the method connection.cursor , with the result renamed to cursor , perform the following ,
for every line in sequence _ sql ,
call the method cursor.execute with an argument line .
if self.verbosity is greater of equal to integer 1 ,
if self.fixture _ count equals integer 0 and self.hide _ empty is true ,
do nothing .
otherwise if self.fixture _ object _ count equals self.loaded _ object _ count ,
call the method self.stdout.write with an argument string &quot; Installed % d object ( s ) from % d fixture ( s ) &quot; ,
where &apos; % d &apos; is replaced with self.loaded _ object _ count and self.fixture _ count , respectively. if not ,
call the method self.stdout.write with an argument string &quot; Installed % d object ( s ) ( of % d ) from % d fixture ( s ) &quot; ,
substitute &apos; % d &apos; with self.loaded _ object _ count , self.fixture _ object _ count and self.fixture _ count. define the method load _ label with self and fixture _ label as arguments .
for every fixture _ file , fixture _ dir and fixture _ name in return value of the method self.find _ fixtures called with an argument fixture _ label ,
call the function os.path.basename with an argument fixture _ file , use the result as an argument for the call to the method ,
self.parse _ name , assign the result to _ , ser _ fmt and cmp _ fmt , respectively. get the value under the cmp _ fmt key of the self.compression _ formats dictionary , assign it to open _ method and mode .
call the function open _ method with arguments : fixture _ file and mode , substitute the result for fixture .
try ,
increment self.fixture _ count by one .
objects _ in _ fixture is integer 0 .
loaded _ objects _ in _ fixture is integer 0 .
if self.verbosity is greater or equal to integer 2 ,
call the method self.stdout.write with an argument string &quot; Installing % s fixture &apos; % s &apos; from % s . &quot; ,
substitute &apos; % s &apos; with ser _ fmt , fixture _ name and return value of the function humanize called with an argument fixture _ dir. call the method serializers.deserialize with 4 arguments : ser _ fmt , fixture , using set to self.using ,
and ignorenonexistent set to self.ignore , substitute the result for objects. for every obj in objects ,
increment objects _ in _ fixture by one .
call the method router.allow _ migrate with 2 arguments : self.using and obj.object. _ _ class _ _ , if it evaluates to true ,
increment loaded _ objects _ in _ fixture by one .
add obj.object. _ _ class _ _ to self.models set .
try ,
call the method obj.save with an argument using set to self.using.
if DatabaseError or IntegrityError , renamed to e , exceptions are caught ,
e.args is a tuple containing string &quot; Could not load % ( app _ label ) s . % ( object _ name ) s ( pk = % ( pk ) s ) : % ( error _ msg ) s ,
where &apos; % ( app _ label ) s &apos; is replaced for obj.object. _ meta.app _ label , &apos; % ( object _ name ) s &apos; is replaced with obj.object. _ meta.object _ name , &apos; % ( pk ) s &apos; is replaced with obj.object.pk and &apos; % ( error _ msg ) s &apos; is replaced with result of the function force _ text with an argument e. raise an exceptions
increment self.loaded _ object _ count by loaded _ objects _ in _ fixture .
increment self.fixture _ object _ count by objects _ in _ fixture .
if Exception , renamed to e , exception is caught ,
if e is not an instance of CommandError class ,
e.args is a tuple containing string &quot; Problem installing fixture &apos; % s &apos; : % s &quot; , where &apos; % s &apos; is replaced with fixture _ file , e .
raise an exception .
finally perform ,
call the method fixture.close.
if objects _ in _ fixture equals integer 0 ,
call the method warnings.warn with 2 arguments : string &quot; No fixture data found for &apos; % s &apos; . ( File format may be invalid . ) &quot; ,
where &apos; % s &apos; is replaced with fixture _ name , and RuntimeWarning. decorator method lru _ cache.lru _ cache with an argument maxsize set to None .
define the method find _ fixtures with arguments : self and fixture _ label .
call the method self.parse _ name with an argument fixture _ label , substitute the result for fixture _ name , ser _ fmt , cmp _ fmt , respective .
databases is a list containing 2 elements : self.using and None .
call the method self.compression _ formats.keys , convert it to list , substitute it for cmp _ fmts if cmp _ fmt is None ,
otherwise cmp _ fmts is a list containing cmp _ fmt. call the method serializers.get _ public _ serializer _ formats , substitute the result for ser _ fmts if ser _ fmt is None ,
otherwise ser _ fmts is a list containing ser _ fmt. if self.verbosity is greater or equal to integer 2 ,
call the method self.stdout.write with an argument string &quot; Loading &apos; % s &apos; fixtures ... &quot; , where &apos; % s &apos; is replaced with fixture _ name .
if fixture _ name is an absolute file path ,
call the method os.path.dirname with an argument fixture _ name , append it to a list , substitute resulting list for fixture _ dirs .
call the method os.path.basename with an argument fixture _ name , substitute the result for fixture _ name .
if not ,
substitute self.fixture _ dirs for fixture _ dirs .
if os.path.sep is contained in fixture _ name ,
join dir _ and return value of the function os.path.dirname called with an argument fixture _ name into a valid file path ,
append it to a list , perform the previous for every dir _ in fixture _ dirs , substitute the resulting list for fixture _ dirs. call the method os.path.basename with an argument fixture _ name , substitute the result for fixture _ name .
for every ext in combo , if ext is true , join it to a string , separated by &apos; .&apos; , put the result in a tuple ,
perform the previous for every combo in result of the function product called with 3 arguments : databases , ser _ fmts and cmp _ fmts , substitute the result for suffixes. join fixture _ name and suffix into a string , separated by &apos; .&apos; for every suffix in suffixes , put the results in set , substitute it for targets .
fixture _ files is an empty list .
for every fixture _ dir in fixture _ dirs ,
if self.verbosity is greater or equals to integer 2 .
call the method self.stdout.write with an argument string &quot; Checking % s for fixtures ... &quot; ,
where &apos; % s &apos; is replaced with result of the function humanize , called with an argument fixture _ dir. fixture _ files _ in _ dir is an empty list .
join fixture _ dir , fixture _ name with appended character &apos; * &apos; into a valid file path ,
use it as an argument for the call to the glob.iglob , for every candidate in result , call the method os.path.basename with an argument candidate , is result is contained in targets ,
append tuple containing 3 elements : candidate , fixture _ dir and fixture _ name to list fixture _ files _ in _ dir .
if self.verbosity is greater or equals integer 2 and fixture _ files _ in _ dir is false ,
call the method self.stdout.write with an argument string &quot; No fixture &apos; % s &apos; in % s . &quot; , where &apos; % s &apos; is replaced with fixture _ name ,
and result of the function humanize called with an argument fixture _ dir. if length of fixture _ files _ in _ dir is greater than 1 ,
raise an CommandError exception with an argument string &quot; Multiple fixtures named &apos; % s &apos; in % s . Aborting . &quot; , where &apos; % s &apos; is replaced with :
fixture _ name and result of the function humanize called with an argument fixture _ dir. extend fixture _ files list with fixture _ files _ in _ dir .
if fixture _ name is not equal to string &apos; initial _ data &apos; and fixture _ files is false ,
call the method warnings.warn with an argument string &quot; No fixture named &apos; % s &apos; found . &quot; where &apos; % s &apos; is replaced with fixture _ name .
return fixture _ files .
decorator cached _ property ,
define the method fixture _ dirs with an argument self .
dirs is an empty dictionary .
for ever app _ config in return value of the method apps.get _ app _ configs ,
if self.app _ label is true and app _ config.label is not equal to self.app _ label ,
skip this loop iteration .
join app _ config.path and string &apos; fixtures &apos; into a valid file path , substitute it for app _ dir .
if app _ dir is a directory ,
append app _ dir to dirs list .
convert settings.FIXTURE _ DIRS to a list , extend dirs by it .
append an empty string to dirs list .
call the function os.path.realpath with an argument d , use the result as an argument for the call to the function os.path.abspath ,
use the result as an argument for the call to the upath function , for every d in dirs , append the results into a list , substitute the resulting list for dirs. return dirs .
define the method parse _ name with arguments self and fixture _ name .
call the method fixture _ name.rsplit with 2 arguments : character &apos; .&apos; and integer 2 , substitute the result for parts .
if length of parts is greater than integer 1 and last element of parts is contained in self.compression _ formats ,
substitute the last element of parts for cmp _ fmt .
substitute the last element of parts for parts .
if not ,
cmp _ fmt is None .
if length of parts is greater than integer 1 .
if last element of parts is contained in self.serialization _ formats ,
substitute the last element of parts for ser _ fmt .
substitute the last element of parts for parts .
if not ,
raise an CommandError with an argument string &quot; Problem installing fixture &apos; % s &apos; : % s is not a known serialization format . &quot; ,
replace &apos; % s &apos; with : elements of last element of parts joined into a string and last element of parts. if not ,
ser _ fmt is None .
join elements of parts into a string , separated with &apos; .&apos; , substitute it for name .
return name , ser _ fmt and cmp _ fmt .
derive class SingleZipReader for zipfile.ZipFile base class .
define the method _ _ init _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
call the method zipfile.ZipFile. _ _ init _ _ _ with the arguments self , unpacked list args and unpacked dictionary kwargs .
call the method self.namelist , if the length of the result is not integer 1 ,
raise an ValueError with an string &quot; Zip-compressed fixtures must contain one file . &quot; .
define the method read with an argument self .
call the method zipfile.ZipFile.read with 2 arguments : self and first element of the result of the self.namelist method .
define the function humanize with an argument dirname .
if dirname is true , return dirname converted to a string and surounded by single quotes , if not return string &apos; absolute path &apos; .
from _ _ future _ _ import unicode _ literals into default name space .
import module fnmatch .
import module glob .
import module io .
import module os .
import module re .
import module sys .
from itertools import dropwhile into default name space .
import module django .
from django.core.management.base import CommandError and BaseCommand into default name space .
from django.core.management.utils import handle _ extensions , find _ command and popen _ wrapper into default name space .
from django.utils.encoding import force _ st into default name space .
from django.utils.functional import total _ ordering into default name space .
from django.utils import six into default name space .
from django.utils.text import get _ text _ list into default name space .
from django.utils.jslex import prepare _ js _ for _ gettext into default name space .
call the method re.compile with 2 arguments : raw string &apos; ^ ( ? P &lt; value &gt; &quot; Plural-Forms . + ? \ \ n &quot; ) \ s * $ &apos; ,
and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands , substitute the result for plural _ forms _ re / STATUS _ OK is integer 0 .
define the method check _ programs with an argument unpacked list programs .
for every program in programs ,
call the function find _ command with an argument program , if it evaluates to None ,
raise an CommandError exception with an argument &quot; Can &apos;t find % s . Make sure you have GNU gettext tools 0.15 or newer installed . &quot; , where &apos; % s &apos; is replaced with program .
total _ ordering decorator ,
derive the class TranslatableFile from the object class .
define the method _ _ init _ _ with 4 arguments : self , dirpath , file _ name and locale _ dir .
substitute file _ name for self.file _ name .
substitute dirpath for self.dirpath.
substitute locale _ dir for self.locale _ dir .
define the method _ _ repr _ _ with an argument self .
join self.dirpath and self.file in a string , substitute with it &apos; % s &apos; in string &quot; &lt; TranslatableFile : % s &gt; &quot; , return the result .
define the method _ _ eq _ _ with self and other arguments :
if self.path equals other.path , return boolean True , if not return boolean False .
define the mehod _ _ lt _ _ with self and other .
if self.path is lesser than other.path , return boolean True , otherwise return boolean False .
property decorator .
define the method path with an argument self .
join self.dirpath and self.file into a file path , return it .
define the method process with 3 arguments : self , command and domain .
from django.conf import settings into default namespace .
from django.utils.translation import templatize into default namespace .
if command.verbosity is greater than integer 1 ,
substitute &apos; % s &apos; is string &apos; processing file % s in % s \ n &apos; with self.file and self.dirpath , write it to command.stdout.
call the method os.path.splitext with an argument self.file , assign the result to _ and file _ ext .
if domain equals a string &apos; djangojs &apos; and file _ ext is contained in command.extensions ,
is _ templatized is boolean True .
join self.dirpath and self.file into a file path , substitute it for orig _ file .
call the function io.open with orig _ file and encoding set to settings.FILE _ CHARSET , with the result renamed to fp ,
perform the following : call the method fp.read , substitute the result for src _ data .
call the function prepare _ js _ for _ gettext with an argument src _ data , substitute it for src _ data .
convert self.file to a string and append &apos; .c &apos; string to it , substitute the result for thefile .
join self.dirpath and thefile in a string , substitute the result for work _ file .
call the function io.open with 3 arguments : work _ file , string &apos; w &apos; and encoding set to string &apos; utf-8 &apos; as arguments ,
with the result renamed to fp , perform the following : call the method fp.write with an arguments src _ data .
append command.xgettext _ options to the list containing 10 elements : string &apos; xgettext &apos; , string &apos; -d &apos; , domain , string &apos; --language = C &apos; ,
string &apos; --keyword = gettext _ noop &apos; , string &apos; --keyword = gettext _ lazy &apos; , string &apos; --keyword = ngettext _ lazy : 1,2 &apos; , string &apos; --keyword = pgettext : 1c , 2 &apos; , string &apos; --keyword = npgettext : 1c , 2,3 &apos; and string &apos; --output = - &apos; , substitute it for args. append work _ file to args .
otherwise if domains equals a string django &apos; and , file _ ext equals &apos; .py &apos; or file _ ext is contained in command.extensions ,
substitute self.file for thefile .
join self.dirpath and self.file into a file path , substitute it for orig _ file .
if file _ ext is contained in command.extensions , is _ templatized is boolean True , otherwise it is boolean False .
if is _ templatized is true ,
call the function io.open with 3 arguments : work _ file , string &apos; w &apos; and encoding set to settings.FILE _ CHARSET as arguments ,
with the result renamed to fp , perform the following : call the method fp.read , substitute the result for src _ data .
convert self.file to string and append string &apos; .py &apos; to it , substitute the result for thefile .
call the function templatize with 2 arguments : src _ data and sliced orig _ file , without first 2 elements , substitute the result for content .
call the function io.open with 3 arguments : self.dirpath and thefile joined into a file path , string &apos; w &apos; ,
and encoding set to string &apos; utf-8 &apos; as arguments , with the result renamed to fp , perform the following : call the method fp.write with an argument content .
join self.dirpath , thefile into a file path , substitute it for work _ file .
append command.xgettext _ options to list containing 15 elements : string &apos; xgettext &apos; , string &apos; -d &apos; , domain , string &apos; --language = Python &apos; ,
string &apos; --keyword = gettext _ noop &apos; , string &apos; --keyword = gettext _ lazy &apos; , string &apos; --keyword = ngettext _ lazy : 1,2 &apos; , string &apos; --keyword = ugettext _ noop &apos; , string &apos; --keyword = ugettext _ lazy &apos; , string &apos; --keyword = ungettext _ lazy : 1,2 &apos; , string &apos; --keyword = pgettext : 1c , 2 &apos; , string &apos; --keyword = npgettext : 1c , 2,3 &apos; , string &apos; --keyword = pgettext _ lazy : 1c , 2 &apos; , string &apos; --keyword = npgettext _ lazy : 1c , 2,3 &apos; and string &apos; --output = - &apos; , substitute the result for args. append work _ file to args .
if not ,
return nothing .
call the function popen _ wrapper with argument args , assign the result to msgs , errors and status .
if errors is true ,
if status is not equal to STATUS _ OK ,
if is _ templatized is true ,
call the function os.unlink with an argument work _ file .
raise an CommandError exception with an argument string &quot; errors happened while running xgettext on % s \ n % s &quot; ,
where &apos; % s &apos; are replaced by sel.file and errors , respectively. if command.verbosity is greater than integer 0 ,
call the method command.stdout.write with an argument errors .
if msgs is true ,
if six.PY2 is true ,
call the method msgs.decode with an argument string &apos; utf-8 &apos; , substitute the result for msgs .
join into a file path : self.locale _ dir and string &apos; .pot &apos; appended to domain converted to string , substitute it for potfile .
if is _ templatized is true ,
if os.name equals string &apos; nt &apos; ,
append work _ file to string &apos; # : &apos; , substitute it for old .
append orig _ file to string &apos; # : &apos; , substitute it for new .
if not ,
append work _ file to string &apos; # : &apos; , substitute it for old .
append orig _ file to string &apos; # : &apos; , substitute it for new .
replace every occurrence of old for new in msgs , substitute the result for msgs .
call the function write _ pot _ file with 2 arguments : potfile and msgs .
if is _ templatized is true ,
call the function os.unlink with an argument work _ file .
define the function write _ pot _ file with 2 arguments potfile and msgs .
if potfile fie exists ,
call the function dropwhile with 2 arguments : function len and msgs spit into parts at newlines , join the result into a string ,
separated by newline , substitute it for msgs. if not ,
replace every occurrence of string &apos; charset = CHARSET &apos; for string &apos; charset = UTF-8 &apos; in msgs , substitute the result for msgs .
call the function io.open with 3 arguments : potfile , string &apos; a &apos; and encoding set to string &apos; utf-8 &apos; as arguments ,
with the result renamed to fp , perform the following : call the method fp.write with an argument msgs .
derive the class Command from the BaseCommands base class .
help is a string &quot; Runs over the entire source tree of the current directory and &quot;
&quot; pulls out all strings marked for translation . It creates ( or updates ) a message &quot; &quot; file in the conf / locale ( in the django tree ) or locale ( for projects and &quot; &quot; applications ) directory . \ n \ nYou must run this command with one of either the &quot; &quot; --locale , --exclude or --all options . &quot; . requires _ system _ checks is boolean False .
leave _ locale _ alone is boolean True
msgmerge _ options is an list with elements : strings &apos; -q &apos; and &apos; --previous &apos; .
msguniq _ options is an list with elements : string &apos; --to-code = utf-8 &apos; .
msgattrib _ options is an list with elements : string &apos; --no-obsolete &apos; .
xgettext _ options is an list with elements : strings &apos; --from-code = UTF-8 &apos; and &apos; --add-comments = Translators &apos; .
define the method add _ arguments with 2 arguments : self and parser .
call the method parser.add _ argument with 6 arguments : string &apos; --locale &apos; , string &apos; -l &apos; , default as an empty list ,
dest as a string &apos; locale &apos; , action as a string &apos; append &apos; and help as a string , &apos; Creates or updates the message files for the given locale ( s ) ( e.g. pt _ BR ) . Can be used multiple times . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --exclude &apos; , string &apos; -x &apos; , default as a empty list ,
dest as a string &apos; exclude &apos; , action as a string &apos; append &apos; and help as a string &apos; Locales to exclude . Default is none . Can be used multiple times . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --domain &apos; , string &apos; -d &apos; , default as a string &apos; django &apos; ,
dest set to string &apos; domain &apos; and help as a string &apos; The domain of the message files ( default : &quot; django &quot; ) . &apos; . call the method parser.add _ argument with 6 arguments : string &apos; --all &apos; , string &apos; -a &apos; , action as a string &apos;store _ true &apos; ,
dest as a string &apos; all &apos; default as boolean False and help as a string &apos; Updates the message files for all existing locales . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --extension &apos; , string &apos; -e &apos; , dest set to string &apos; extensions &apos; ,
help set to a string &apos; The file extension ( s ) to examine ( default : &quot; html , txt &quot; , or &quot; js &quot; &apos; &apos; if the domain is &quot; djangojs &quot; ) . Separate multiple extensions with commas , or use -e multiple times . &apos; and action as a string &apos; append &apos; . call the method parser.add _ argument with 6 arguments : string &apos; --symlinks &apos; , string &apos; -s &apos; , action as a string &apos; store _ true &apos; ,
dest as a string &apos; symlinks &apos; , default as boolean False and help as a string &apos; Follows symlinks to directories when examining &apos; &apos; source code and templates for translation strings . &apos; . call the method parser.add _ argument with 7 arguments : string &apos; --ignore &apos; , string &apos; -i &apos; , action as a string &apos; append &apos; ,
dest as a string &apos; ignore _ patterns &apos; , default as an empty list , metavar as a string &apos; PATTERN &apos; , and help as a string &apos; Ignore files or directories matching this glob-style pattern . Use multiple times to ignore more . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --no-default-ignore &apos; , action as a string &apos; store _ false &apos; ,
dest as a string &apos; use _ default _ ignore _ patterns &apos; , default set to boolean True , and help as a string &quot; Don &apos;t ignore the common glob-style patterns &apos; CVS &apos; , &apos; . * &apos; , &apos; * ~ &apos; and &apos; * .pyc &apos; . &quot; . call the method parser.add _ argument with 5 arguments : string &apos; --no-wrap &apos; , action as a string &apos; store _ true &apos; , dest as a string &apos; no _ wrap &apos; ,
default as boolean False and help as a string &quot; Don &apos;t break long message lines into several lines . &quot; . call the method parser.add _ argument with 5 arguments : string &apos; --no-location &apos; , action set to string &apos; store _ true &apos; ,
dest set to string &apos; no _ location &apos; , default as boolean False and help as a string &quot; Don &apos;t write &apos; # : filename : line &apos; lines . &quot; . call the method parser.add _ argument with 5 arguments : string &apos; --no-obsolete &apos; , action as a string &apos; store _ true &apos; ,
dest as a string &apos; no _ obsolete &apos; , default as boolean False and help as a string &quot; Remove obsolete message strings . &quot; . call the method parser.add _ argument with 5 arguments : string &apos; --keep-pot &apos; , action as a string &apos; store _ true &apos; ,
dest as a string &apos; keep _ pot &apos; , default as boolean False and help as a string &quot; Keep .pot file after making messages . Useful when debugging . &quot; define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
get the value under the &apos; locale &apos; key of the options dictionary , substitute it for locale .
get the value under the &apos; exclude &apos; key of the options dictionary , substitute it for exclude .
get the value under the &apos; domain &apos; key of the options dictionary , substitute it for self.domain.
get the value under the &apos; verbosity &apos; key of the options dictionary , substitute it for self.verbosity.
get the value under the &apos; all &apos; key of the options dictionary , substitute it for process _ all .
get the value under the &apos; extensions &apos; key of the options dictionary , substitute it for extensions .
get the value under the &apos; symlinks &apos; key of the options dictionary , substitute it for self.symlinks.
get the value under the &apos; ignore _ patterns &apos; key of the options dictionary , substitute it for ignore _ patterns .
get the value under the &apos; use _ default _ ignore _ patterns &apos; key of the options dictionary , if it is true ,
append list containing 4 elements : &apos; CVS &apos; , &apos; . * &apos; , &apos; * ~ &apos; and &apos; * .pyc &apos; , to ignore _ patterns .
put elements of ignore _ patterns into a set , substitute the length of it for self.ignore _ patterns .
get the value under the &apos; no _ wrap &apos; key of the options dictionary , if it is true ,
append list containing string &apos; --no-wrap &apos; to self.msgmerge _ options
append list containing string &apos; --no-wrap &apos; to self.msguniq _ options .
append list containing string &apos; --no-wrap &apos; to self.msgattrib _ options .
append list containing string &apos; --no-wrap &apos; to self.xgettext _ options .
get the value under the &apos; no _ location &apos; key of the options dictionary , if it is true ,
append list containing string &apos; --no-location &apos; to self.msgmerge _ options .
append list containing string &apos; --no-location &apos; to self.msguniq _ options .
append list containing string &apos; --no-location &apos; to self.msgattrib _ options .
append list containing string &apos; --no-location &apos; to self.xgettext _ options .
get the value under the &apos; no _ obsolete &apos; key of the options dictionary , substitute it for self.no _ obsolete .
get the value under the &apos; keep _ pot &apos; key of the options dictionary , substitute it for self.keep _ pot .
if self.domain is not equal to string &apos; django &apos; or string &apos; djangojs &apos; ,
raise an CommandError exception with an argument string &quot; currently makemessages only supports domains &apos; django &apos; and &apos; djangojs &apos; &quot; .
if self.domain equals to string &apos; djangojs &apos; ,
if extensions is false , substitute it for exts , otherwise exts is a list containing string &apos; js &apos; .
if not ,
if extensions is false , substitute it for exts , otherwise exts is a list containing 2 elements : string &apos; html &apos; and string &apos; txt &apos; .
call the function handle _ extensions exts , substitute self.extensions.
evaluate the boolean expression : locale is None and exclude is false and process _ all is false ,
if the result is true or self.domain is not None , raise an CommandError exception with an argument string &quot; Type &apos; % s help % s &apos; for usage information . &quot; , where &apos; % s &apos; are replaced by :
return value of the function os.path.basename called with first element of sys.argv as an argument , and second element of sys.argv. from django.conf import settings into default namespace .
if settings.configured ,
settings.USE _ I18N is boolean True .
if not ,
call the method settings.configure with an argument USE _ I18N set to boolean True .
if self.verbosity is integer 1 ,
call the method self.stdout.write with an argument string &apos; examining files with the extensions : % s \ n &apos; ,
substitute &apos; % s &apos; with return value of the function get _ text _ list called with 2 arguments : self.extensions converted into a list and string &apos; and &apos; . self.invoked _ for _ django is boolean False .
self.locale _ paths is an empty list .
self.default _ locale _ path is None .
join &apos; conf &apos; and &apos; locale &apos; into a file path , if it is a directory ,
join &apos; conf &apos; and &apos; locale &apos; into a file path , use it as an argument for the call the method os.path.abspath ,
put the results into a list , substitute self.locale _ paths for it. substitute first element of self.locale _ paths for self.default _ locale _ path .
self.invoked _ for _ django is boolean True .
if not ,
convert settings.LOCALE _ PATHS into a list and extend list self.locale _ paths with it .
if &apos; locale &apos; is a directory ,
call the function os.path.abspath with an argument &apos; locale &apos; , append the result to self.locale _ paths .
if self.locale _ paths is true ,
substitute first element of self.locale _ paths for self.default _ locale _ path .
if self.default _ locale _ path directory doesnt exists ,
create a directory self.default _ locale _ path .
call the function glob.glob with an argument : string &apos; / * &apos; appended to self.default _ locale _ path converted into a string ,
filter out the results for which function os.path.isdir returns false , substitute the result for locale _ dirs. map the locale _ dirs elements with mapping function os.path.basename , substitute the result for all _ locales .
if process _ all is true ,
substitute all _ locales for locales .
if not ,
if locale is not false or None , substitute it for locales , otherwise substitute all _ locales for locales .
locales is a difference between the locales and exclude sets .
if locales is true ,
call the function check _ programs with 3 arguments : strings &apos; msguniq &apos; , &apos; msgmerge &apos; and &apos; msgattrib &apos; .
call the function check _ programs with an argument string &apos; xgettext &apos; .
try ,
call the method self.build _ potfiles , substitute the result for potfiles .
for every locale in locales ,
if self.verbosity is greater than integer 0 ,
replace &apos; % s &apos; in string &quot; processing locale % s \ n &quot; with locale , write it to self.stdout.
for every potfile in potfiles ,
call the method self.write _ po _ file with 2 arguments : potfile and locale .
finally perform ,
if self.keep _ pot is false ,
call the method self.remove _ potfiles .
define the method build _ potfiles with an argument self .
call the method self.find _ files with an argument string &apos; .&apos; , substitute the result for file _ list .
call the method self.remove _ potfiles .
for f in file _ list ,
try ,
call the function f.process with 2 arguments : self and self.domain.
if except UnicodeDecodeError exception is caught ,
substitute &apos; % s &apos; in string &quot; UnicodeDecodeError : skipped file % s in % s &quot; with f.file and f.dirpath , write it to self.stdout.
potfiles is an empty list .
for every path in self.locale _ paths ,
join into a path : path and string &apos; % s.pot &apos; , where &apos; % s &apos; is replaced with self.domain converted into a string .
if potfile file path doesnt exist ,
skip this loop iteration .
append self.msguniq _ options to a list containing a string &apos; msguniq &apos; , append list containing potfile to the result , substitute it for args .
call the function popen _ wrapper with an argument args , assign the result to msgs , errors and status , respectively .
if six.PY2 is true ,
call the method msgs.decode with an argument string &apos; utf-8 &apos; , substitute it for msgs .
if errors is true ,
if status is not equal to STATUS _ OK ,
raise an CommandError exception with an argument string &quot; errors happened while running msguniq \ n % s &quot; , where &apos; % s &apos; is replaced with errors .
otherwise if self.verbosity is greater than integer 0 ,
write errors to self.stdout.
call the function io.open with 3 arguments : potfile , string &apos; w &apos; and encoding set to string &apos; utf-8 &apos; as arguments ,
with the result renamed to fp , perform the following : write msgs to fp .
append potfile to potfiles .
return potfiles .
define the method remove _ potfiles with an argument self .
for every path in self.locale _ paths ,
join into a file path : path and string &apos; % s.pot &apos; , where &apos; % s &apos; is replaced with self.domain converted into a string , substitute the result for pot _ path .
if pot _ path file path exists ,
call the method os.unlink with an argument pot _ path .
define the method find _ potfiles with an arguments self and root .
define the function is _ ignored with arguments path and ignore _ patterns .
call the function os.path.basename with an arguments path , substitute the result for filename .
ignore is a lambda function with pattern as an argument , return value is the return value of the function fnmatch.fnmatchcase ,
called with arguments : filename and pattern. call the function ignore with an argument pattern , for every pattern in ignore _ patterns ,
if any resulting element is true , return boolean True , otherwise return boolean False. convert os.sep into a string and append &apos; * &apos; to it , substitute the result for dir _ suffix .
for p in self.ignore _ patterns if p ends with dir _ suffix take sliced list p from the start ,
to the negative length of the dir _ suffix as the end index and append it to a list , if p doesnt end with dir _ suffix , append p to a list , substitute resulting list for norm _ patterns. all _ files is an empty list .
call the function os.walk with 3 arguments : root , topdown set to boolean True , followlinks set to self.symlinks ,
for every dirpath , dirnames and filenames in the result , for every dirname in list dirnames ,
join dirpath and dirname into a file path , use is as an argument for the call to the function os.path.join ,
use the result as an argument for the call to the os.path.join function , use the result and the norm _ patterns as arguments for the call to the is _ ignored function , if it evaluates to true , remove dirname from the dirnames .
if self.verbosity is greater than integer 1 ,
replace &apos; % s &apos; in string &apos; ignoring directory % s \ n &apos; with dirname , write it to self.stdout stream .
otherwise if dirname equals string &apos; locale &apos; ,
remove dirname from the dirnames .
call the method os.path.abspath with an argument dirpath , join the result and dirname into a file path , inset it at the beggining of self.locale _ paths .
for every filename in filenames ,
join dirpath and filename into path , use it as an argument for the call to the function os.path.normpath , substitute it for file _ path .
call the function is _ ignored , with arguments : file _ path and self.ignore _ patterns , if it evaluates to true ,
if self.verbosity is greater than integer 1 ,
replace &apos; % s &apos; in string &apos; ignoring file % s in % s \ n &apos; with filename and dirpath , write it to self.stdout.
if not ,
locale _ dir is None .
for every path in self.locale _ paths ,
call the function os.path.abspath with an argument dirpath , if it starts with return value of the method os.path.dirname ,
called with an argument path , substitute path for locale _ dir .
break the loop execution .
if locale _ dir is false ,
substitute self.default _ locale _ path for locale _ dir .
if locale _ dir is false ,
raise an CommandError with an argument string &quot; Unable to find a locale path to store translations for file % s &quot; ,
where &apos; % s &apos; is replaced with file _ path. create an object TranslatableFile with arguments : dirpath , filename and locale _ dir , append it to all _ files .
sort all _ files and return it .
define the method write _ po _ file with arguments self , potfile and locale .
call the method os.path.dirname with an argument potfile , join the result , locale and string &apos; LC _ MESSAGES &apos; into a file path ,
substitute it for basedir. if basedir is not a directory ,
make basedir directory ,
convert self.domain into a string and append string &apos; .po &apos; to it , join basedir and result in file path , substitute it for pofile .
if pofile path exists ,
append self.msgmerge _ options to a list containing string &apos; msgmerge &apos; , append to it a list containing pofile and potfile , substitute the result for args .
call the function popen _ wrapper with an argument args , assign the result to msgs , errors and status .
if six.PY2 is true ,
call the method msgs.decode with an argument string &apos; utf-8 &apos; , substitute the result for msgs .
if errors is true ,
if statue is not equal to STATUS _ OK .
raise an CommandError with an argument string &quot; errors happened while running msgmerge \ n % s &quot; , where &apos; % s &apos; is replaced with errors .
otherwise if self.verbosity is greater than integer 0 ,
write errors to self.stdout.
if not ,
call the function io.open with 3 arguments : potfile , string &apos; r &apos; and encoding set to string &apos; utf-8 &apos; as arguments ,
with the result renamed to fp , perform the following : read file fp and substitute the result for msgs .
if self.invoked _ for _ django is false ,
call the method self.copy _ plural _ forms with arguments : msgs and locale , substitute it for msgs .
substitute &apos; % s &apos; in string &quot; # . # - # - # - # - # % s.pot ( PACKAGE VERSION ) # - # - # - # - # \ n &quot; with self.domain ,
replace all the occurrences of previous string in msgs for an empty string , substitute the result for msgs. call the function io.open with 3 arguments : pofile , string &apos; w &apos; and encoding set to string &apos; utf-8 &apos; as arguments ,
with the result renamed to fp , perform the following : write msgs to fp .
if self.no _ obsolete is true ,
append self.msgattrib _ options to a list containing string &apos; msgattrib &apos; , append to it a list containing string &apos; -o &apos; , pofile and pofile ,
substitute the result for args. call the function popen _ wrapper with an argument args , assign the result to msgs , errors and status , respectively .
if errors is true ,
if status is not equal to STATUS _ OK ,
raise an CommandError with an argument string &quot; errors happened while running msgattrib \ n % s &quot; , where &apos; % s &apos; is replaced with errors .
otherwise if self.verbosity is greater than integer 0 ,
write errors to self.stdout.
define the method copy _ plural _ forms with arguments self , msgs and locale .
call the function os.path.dirname with an argument django . _ _ file _ _ , join the result into a path ,
use it as an argument for the call to the function os.path.normpath , substitute the result for django _ dir. if self.domain equals a string &apos; djangojs &apos; ,
domains is a tuple with 2 elements : strings &apos; djangojs &apos; and &apos; django &apos; .
if not ,
domains is a tuple with element string &apos; django &apos; .
for every domain in domains ,
join into a file path : django _ dir , &apos; conf &apos; , &apos; locale &apos; , locale , &apos; LC _ MESSAGES &apos; and string &apos; .po &apos; appended to domain , substitute the result for django _ po .
if django _ po file path exists ,
call the function io.open with 3 arguments : django _ po , string &apos; r &apos; and encoding set to string &apos; utf-8 &apos; as arguments ,
with the result renamed to fp , perform the following : read data from file fp , use the result as an argument for the call to the function plural _ forms _ re.search , substitute it for m .
if m is true ,
call the method m.group with an argument string &apos; value &apos; , use the result as an argument for the call to the force _ str ,
substitute the result for plural _ form _ line. if self.verbosity is greater than integer 1 ,
replace &apos; % s &apos; in string &quot; copying plural forms : % s \ n &quot; with plural _ form _ line , write it to self.stdout.
lines is an empty list .
found is boolean False .
split msgs by newline characters , for every line in result ,
if found is false and , line is false or return value of the function plural _ forms _ re.search called with an argument line is false ,
append newline to plural _ form _ line , substitute the result for line .
found is boolean True .
append line to lines .
join elements of lines into a string , separated by newline characters , substitute it for msgs .
break the loop execution .
return msgs .
import module sys .
import module os .
import module operator .
from django.apps import apps into default name space .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.db.migrations import Migration into default name space .
from django.db.migrations.loader import MigrationLoader into default name space .
from django.db.migrations.autodetector import MigrationAutodetector into default name space .
from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space .
from django.db.migrations.state import ProjectState into default name space .
from django.db.migrations.writer import MigrationWriter into default name space .
from django.utils.six.moves import reduce into default name space .
derive the class Command from the BaseCommand class .
help is a string &quot; Creates new migration ( s ) for apps . &quot; .
define the method add _ arguments with 2 arguments self and parser .
call the method parser.add _ argument with 4 arguments : string &apos; args &apos; , metavar set to string &apos; app _ label &apos; , nargs set to character &apos; * &apos; ,
and help as a string &apos; Specify the app label ( s ) to create migrations for . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --dry-run &apos; , action as a string &apos; store _ true &apos; , dest as string &apos; dry _ run &apos; ,
default set to boolean False , help as a string &quot; Just show what migrations would be made ; don &apos;t actually write them . &quot; . call the method parser.add _ argument with 5 arguments : string &apos; --merge &apos; , action as a string &apos; store _ true &apos; , dest as a string &apos; merge &apos; ,
default set to boolean False and help set to a string &quot; Enable fixing of migration conflicts . &quot; . call the method parser.add _ argument with 5 arguments : string &apos; --empty &apos; , action as a string &apos; store _ true &apos; , dest as a string &apos; empty &apos; ,
default set to boolean False and help as a string &quot; Create an empty migration . &quot; . call the method parser.add _ argument with 5 arguments : string &apos; --noinput &apos; , action as a string &apos; store _ false &apos; ,
dest as a string &apos; interactive &apos; , default set to boolean True , and help as a string &apos; Tells Django to NOT prompt the user for input of any kind . &apos; . define the method handle with 3 arguments : self , unpacked list app _ labels and unpacked dictionary options .
get the value under the &apos; verbosity &apos; key of the options dictionary , substitute it for self.verbosity.
get the value under the &apos; interactive &apos; key of the options dictionary , substitute it for self.interactive.
get the value under the &apos; dry _ run &apos; key of the options dictionary , if the key exists substitute it for self.dry _ run ,
if not , self.dry _ run is boolean False. get the value under the &apos; merge &apos; key of the options dictionary , if the key exists substitute it for self.merge ,
if not , self.merge is boolean False. get the value under the &apos; empty &apos; key of the options dictionary , if the key exists substitute it for self.empty ,
if not , self.empty is boolean False. crate a set containing of app _ labels elements , substitute it for app _ labels .
bad _ app _ labels is an empty set .
for every app _ label in app _ labels ,
try ,
call the method apps.get _ app _ config with an argument app _ label .
if LookupError exception is caught ,
call the method bad _ app _ labels with an argument app _ label ,
if bad _ app _ labels is true ,
for every app _ label in bad _ app _ labels ,
write string &quot; App &apos; % s &apos; could not be found . Is it in INSTALLED _ APPS ? &quot; with &apos; % s &apos; where &apos; % s &apos; is replaced with app _ label ,
write it for self.stderr. exit the program with the integer 2 as exit code .
loader is an instance of MigrationLoader class , created with 2 arguments : None and ignore _ no _ migrations set to boolean True .
call the method loader.detect _ conflicts , substitute the result for conflicts .
if conflicts is true and self.merge is false ,
for every app and names in result of the method conflicts.items , join names into a string , separated by &apos; , &apos; ,
join it with app into a string , separated with string &apos; ; &apos; , substitute it for name _ str. substitute &apos; % s \ in string &quot; Conflicting migrations detected ( % s ) . \ nTo fix them run &apos; python manage.py makemigrations --merge &apos; &quot; ,
with name _ str , use it as an argument to throw an CommandError exception. if self.merge is true and conflicts is false ,
write string &quot; No conflicts detected to merge . &quot; to self.stdout stream .
return nothing .
if self.merge and conflicts are both true ,
call the method self.handle _ merge with 2 arguments : loader and conflicts , return the result .
autodetector is an instance of the MigrationAutodetector class , created with 3 arguments : result of the method loader.project _ state ,
result of the method ProjectState.from _ apps with an argument apps and result of the method InteractiveMigrationQuestioner , called with 2 arguments specified _ apps set to app _ labels and dry _ run set to self.dry _ run. if self.empty is true ,
if app _ labels is false ,
raise an CommandError with an argument string &quot; You must supply at least one app label when using --empty . &quot; .
crate a dictionary with app mapping and from the class Migration , created with arguments : string &apos; custom &apos; and app ,
for every app in app _ labels. call the method autodetector.arrange _ for _ graph with 2 arguments : changes , loader.graph , substitute the result for changes .
call the method self.write _ migration _ files with an argument changes .
return nothing .
call the method autodetector.changes with 3 arguments : graph set to loader.graph , trim _ to _ apps set to app _ labels ,
if it exists or None if not and convert _ apps set to app _ labels , if it exists or None if not , substitute the result for changes. if changes is false and self.verbosity is greater than , or equal to iteger 1 ,
if length of app _ labels is equal to integer 1 ,
substitute &apos; % s &apos; in string &quot; No changes detected in app &apos; % s &apos; &quot; with the result of the method app _ labels.pop , write it to self.stdout.
otherwise if length of app _ labels is greater than integer 1 ,
substitute &apos; % s &apos; in string &quot; No changes detected in apps &apos; % s &apos; &quot; with the app _ labels joined into a string , separated by string &quot; &apos; , &apos; &quot; ,
write it to self.stdout. if not ,
write string &quot; No changes detected &quot; to self.stdout stream .
return nothing .
call the method self.write _ migration _ files with an argument changes .
define the method write _ migration _ files with arguments self and changes .
directory _ created is an empty dictionary .
for every app _ label and app _ migrations in result of the method changes.items ,
if self.verbosity is greater or equal to integer 1 ,
substitute &apos; % s &apos; in a string &quot; Migrations for &apos; % s &apos; : &quot; with app _ label , append newline to it ,
use it as an argument for the call to the method self.style.MIGRATE _ HEADING , write the result to self.stdout. for every migration in app _ migrations ,
writer is an instance of MigrationWriter class , created with an argument migration .
if self.verbosity is greater or equal to integer 1 ,
substitute &apos; % s &apos; in a string &quot; % s : \ n &quot; with return value of the self.style.MIGRATE _ LABEL method called with argument writer.filename ,
write the result to self.stdout. for every operation in migration.operations ,
substitute &apos; % s &apos; in a string &quot; - % s \ n &quot; with return value of the operation.describe method , write the result to self.stdout.
if self.dry _ run is false ,
call the function os.path.dirname with an argument writer.path , substitute the result for migrations _ directory .
get the value under the app _ label key of the directory _ created dictionary , if exists and it is false ,
if migrations _ directory is not a directory ,
make a directory migrations _ directory .
join migrations _ directory and string &quot; _ _ init _ _ .py &quot; into a file path , substitute it for init _ path .
if init _ path is not a file ,
crate a file named init _ path .
value under the all _ label key of the directory _ created dictionary is boolean True .
call the method writer.as _ string , substitute the result for migration _ string .
open writer.path file in write mode , with the file descriptor as fh , perform ,
write migration _ string to file fh .
otherwise if self.verbosity equals integer 3 ,
substitute &apos; % s &apos; in a string &quot; Full migrations file &apos; % s &apos; : &quot; with writer.filename , append newline to it ,
use it as an argument for the call to the method self.style.MIGRATE _ HEADING , write the result to self.stdout. call the method writer.as _ string , append newline to the result , write it to self.stdout.
define the method handle _ merge with arguments self , loader and conflicts .
if self.interactive is true ,
questioner is an instance of a InteractiveMigrationQuestioner class .
if not ,
questioner is an instance of a InteractiveMigrationQuestioner class , created with an argument : defaults set to dictionary with entry :
boolean True for &apos; ask _ merge &apos; . for every app _ label and migration _ names in result of the method conflicts.items ,
merge _ migrations is an empty list .
for every migration _ name in migration _ names ,
call the method loader.get _ migration with arguments app _ label and migration _ name , substitute the result for migration .
call the method loader.graph.forwards _ plan with argument a tuple , with 2 elements : app _ label and migration _ name ,
substitute the result for migration.ancestry. append migration to merge _ migrations .
common _ ancestor is None .
for m in merge _ migrations append m.ancestry to a list , zip the resulting list into tuples of pairs , for every level in result ,
apply operator.eq function to elements of level iterable , until level is reduced to a single value , if the result is true ,
substitute first element of level for common _ ancestor .
if not ,
break the loop execution ,
if common _ ancestor is None ,
raise an ValueError with an argument string &quot; Could not find common ancestor of % s &quot; , where &apos; % s &apos; is replaced with migration _ names .
for every migration in merge _ migrations ,
call the method migration.ancestry.index with an argument common _ ancestor , increment the result by one ,
slice migration.ancestry list from the last result as an starting index to the end , substitute the slice for migration.branch. migration.merged _ operations is an empty list .
for every node _ app and node _ name in migration.branch ,
call the method loader.get _ migration with arguments node _ app and node _ name , extend the migration.merged _ operations with the operations field of the result .
if self.verbosity is greater than integer 1 ,
substitute &apos; % s &apos; in a string &quot; Merging % s &quot; with app _ label ,
use it as an argument for the call to the method self.style.MIGRATE _ HEADING , write the result to self.stdout. for every migration in merge _ migrations ,
substitute &apos; % s &apos; in a string &quot; Branch % s &quot; with migration.name ,
use it as an argument for the call to the method self.style.MIGRATE _ HEADING , write the result to self.stdout. for every operation in migration.merged _ operations ,
substitute &apos; % s &apos; in a string &quot; - % s \ n &quot; with return value of the operation.describe method , write the result to self.stdout.
call the method questioner.ask _ merge with an argument app _ label , if it evaluates to true ,
numbers is a list containing return value of the MigrationAutodetector.parse _ number method called with an argument migration.name ,
for every migration in merge _ migrations. try ,
biggest _ number is maximum numbers element .
if ValueError exception is caught ,
biggest _ number is integer 1 .
subclass is a instance of a class named Migration , derived from the base class Migration , with 1 field :
dependencies set to a list of tuples with 2 elements : app _ label and migration.name for every migration in merge _ migrations. call the method subsclass with 2 arguments : string &quot; % 04i _ merge &quot; , replace &apos; % 04i &apos; with biggest _ number incremented by one ,
that occupies minimum 4 places within a string , and app _ label , substitute the result for new _ migration. writer is instance of MigrationWriter class , created with new _ migration argument .
open writer.path file in write mode , with the file descriptor as fh , perform the following ,
call the method writer.as _ string , write the result to fh file .
if self.verbosity is greater than integer 0 ,
substitute &apos; % s &apos; in a string &quot; \ nCreated new merge migration % s &quot; with writer path , write it to self.stdout.
from _ _ future _ _ import unicode _ literals into default name space .
from collections import OrderedDict into default name space .
from importlib import import _ module into default name space .
import module itertools .
import module traceback .
from django.apps import apps into default name space .
from django.core.management import call _ command into default name space .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.core.management.color import no _ style into default name space .
from django.core.management.sql import custom _ sql _ for _ model , emit _ post _ migrate _ signal and emit _ pre _ migrate _ signal into default name space .
from django.db import connections , router , transaction and DEFAULT _ DB _ ALIAS into default name space .
from django.db.migrations.executor import MigrationExecutor into default name space .
from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space .
from django.db.migrations.state import ProjectState into default name space .
from django.db.migrations.autodetector import MigrationAutodetector into default name space .
from django.utils.module _ loading import module _ has _ submodule into default name space .
derive the class Command from the base class BaseCommand .
help is a string &quot; Updates database schema . Manages both apps with migrations and those without . &quot; .
define the method add _ arguments with self class instance and parse as the arguments .
call the method parser.add _ argument with string &apos; app _ label &apos; , nargs set to charcter &apos; ? &apos; , help containing string ,
&apos;App label of an application to synchronize the state . &apos; as arguments. call the method parser.add _ argument with string &apos; migration _ name &apos; , nargs set to charcter &apos; ? &apos; , help containing string ,
&apos;Database state will be brought to the state after that migration . &apos; as arguments. call the method parser.add _ argument with string &apos; --noinput &apos; , action containing string &apos; store _ false &apos; , dest set to string &apos; interactive &apos; ,
default set to True , help containing string &apos; Tells Django to NOT prompt the user for input of any kind . &apos; as arguments. call the method parser.add _ argument with string &apos; --no-initial-data &apos; , action containing string &apos; store _ false &apos; ,
dest set to string &apos; load _ initial _ data &apos; , default set to True , help containing string &apos; Tells Django not to load any initial data after database synchronization . &apos; as arguments. call the method parser.add _ argument with string &apos; --database &apos; , action containing string &apos; store &apos; , dest set to string &apos; database &apos; ,
default set to DEFAULT _ DB _ ALIAS , help containing string &apos; Nominates a database to synchronize . Defaults to the &quot; default &quot; database . &apos; as arguments. call the method parser.add _ argument with string &apos; --fake &apos; , action containing string &apos; store _ true &apos; , dest set to string &apos; fake &apos; ,
default set to False , help containing string &apos; Mark migrations as run without actually running them &apos; as arguments. call the method parser.add _ argument with string &apos; --list &apos; , string &apos; -l &apos; , action contains string &apos; store _ true &apos; , dest set to string &apos; list &apos; ,
default set to False , help containing string &apos; Show a list of all known migrations and which are applied &apos; as arguments. define the method handle with self instance of a class , list args , dictionary options as arguments .
get the value from the options dictionary under the key &apos; verbosity &apos; , substitute it for self.verbosity.
get the value from the options dictionary under the key &apos; interactive &apos; , substitute it for self.interactive.
get the value from the options dictionary under the key &apos; traceback &apos; , substitute it for self.show _ traceback .
get the value from the options dictionary under the key &apos; load _ initial _ data &apos; , substitute it for self.load _ initial _ data .
get the value from the options dictionary under the key &apos; test _ database &apos; , or False if the key dont exists , substitute it for self.test _ database .
for every app _ config in return value of the call to the function apps.get _ app _ configs ,
if call to the function module _ has _ submodule with app _ config.module and &quot; management &quot; evaluates to True .
import module &apos; .management &apos; from the package app _ config.name.
get the value under the key &apos; database &apos; of the options dictionary , substitute it for db .
substitute connections element at the index of the value db for connections .
get the value under the &apos; list &apos; key of options dictionary , if key doesnt exist return False , if the return value is True ,
call the method self.show _ migration _ list with connection as first argument , as second argument use value under the &apos; app _ label &apos; key of options dictionary ,
if exists , if not use None as the second argument , return the result. call the function MigrationExecutor with connection and self.migration _ progress _ callback as arguments , substitute the result fro executor .
call the executor.loader.detect _ conflicts , substitute the result fr conflicts .
if conflicts is true ,
for every app and names in key , value tuple pairs of conflicts dictionary join names into a string separated by commas ,
in &quot; % s in % s &quot; substitute &apos; % s &apos; with names string and app , respective , join all the previous pairs into a string separated by &apos; ; &apos; , substitute it for name _ str. raise CommandError exception , with &quot; Conflicting migrations detected ( % s ) . \ nTo fix them run &apos; python manage.py makemigrations --merge &apos; &quot; ,
with &apos; % s &apos; substituted for name _ str , as argument. run _ syncdb is boolean False .
target _ app _ labels _ only is boolean True .
if values under the &apos; app _ label &apos; and &apos; migration _ name &apos; keys of the options dictionary are True ,
assign values under the &apos; app _ label &apos; and &apos; migration _ name &apos; keys of the options dictionary to the app _ label and migration _ name , respectively .
if app _ label is not contained in executor.loader.migrated _ apps ,
raise CommandError exception with &quot; App &apos; % s &apos; does not have migrations ( you cannot selectively sync unmigrated apps ) &quot; ,
with &apos; % s &apos; substituted for app _ label , as arguments. if migration _ name equals to string &apos; zero &apos; ,
targets is a list containing tuple with two elements , app _ label and None .
if not ,
try ,
call the executor.loader.get _ migration _ by _ prefix with app _ label and migration _ name , substitute the result for migration .
if AmbiguityError exception is caught ,
raise CommandError exception with &quot; More than one migration matches &apos; % s &apos; in app &apos; % s &apos; . Please be more specific . &quot; ,
with &apos; % s &apos; substituted for migration _ name and app _ label , respectively , as arguments. if KeyError exception is caught ,
raise CommandError exception with &quot; Cannot find a migration matching &apos; % s &apos; from app &apos; % s &apos; . &quot; ,
with &apos; % s &apos; substituted for migration _ name and app _ label , respectively , as arguments. targets is a list containing tuple with two elements , app _ label and migration.name.
target _ app _ labels _ only is boolean False .
otherwise if value under the &apos; app _ label &apos; key of options dictionary is true ,
substitute the value under the &apos; app _ label &apos; key of options dictionary for app _ label .
if app _ label is not contained in executor.loader.migrated _ apps ,
raise CommandError exception with &quot; App &apos; % s &apos; does not have migrations ( you cannot selectively sync unmigrated apps ) &quot; ,
with &apos; % s &apos; substituted for app _ label , as arguments. for every key in return vale of the method executor.loader.graph.leaf _ nodes , check if the first element of key equals to app _ label ,
if it does append it to targets list. if not ,
call the method executor.loader.graph.leaf _ nodes and substitute its result for targets .
run _ syncdb is boolean True .
call the executor.migration _ plan method with targets as the argument , substitute the result for plan .
if self.verbosity is greater or equal to integer 1 .
call the self.style.MIGRATE _ HEADING method , with string &quot; Operations to perform : &quot; as an argument ,
use the result as an argument for the call to the self.stdout.write method. if run _ syncdb and executor.loader.unmigrated _ apps exist ,
join the executor.loader.unmigrated _ apps into a string separated by string &apos; , &apos; append it to the end of a string &quot; Synchronize unmigrated apps : &quot; ,
use it as an argument for the call to the self.style.MIGRATE _ LABEL method , use the result of the previous method as an argument for the call to the self.stdout.write method. if target _ app _ labels _ only is true ,
for every a and n in targets , put a into a set , join all the set elements into a string separated by string &apos; , &apos; ,
if set is empty return string &apos; ( none ) &apos; instead , append the previous to the string &quot; Apply all migrations : &quot; , use the previous string as the argument for the call to the method self.style.MIGRATE _ LABEL , use the result as an argument for the call to the method self.stdout.write. if not ,
if element of targets in first row and second column is None ,
convert the first element of the first row of targets to string , append it to the string &quot; Unapply all migrations : &quot; ,
use the it as an argument for the call to the self.style.MIGRATE _ LABEL method , use the result to cal the self.stdout.write method. if not ,
replace &apos; % s &apos; in string &quot; % s , from % s &quot; with second and first element of the first targets row , respectively ,
append it to the string &quot; Target specific migration : &quot; , use it as the argument for the call to the self.style.MIGRATE _ LABEL method , call the self.stdout.write method with previous return value as an argument. if run _ syncdb and executor.loader.unmigrated _ apps is true ,
if self.verbosity is greater or equal to integer 1 .
call the self.style.MIGRATE _ HEADING with string &quot; Synchronizing apps without migrations : &quot; as an argument ,
use the result as an argument for the call to the self.stdout.write. call the self.sync _ apps method with connection and executor.loader.unmigrated _ apps as arguments , substitute it for created _ models .
if not ,
create _ models is an empty list .
if the value under the &apos; test _ flush &apos; key of the options dictionary exists ,
call the function call _ command with string &apos; flush &apos; , verbosity set to greater element , self.verbosity decremented by 1 or integer 0 ,
interactive set to boolean False , database set to db , reset _ sequences set to boolean False , inhibit _ post _ migrate set to boolean True. if self.verbosity is greater or equal to integer 1 ,
call the self.style.MIGRATE _ HEADING method with string &quot; Running migrations : &quot; as an argument , use the result as an argument for the call to the self.stdout.write method .
if plan is not true ,
if self.verbosity is greater or equal to integer 1 ,
call the method self.stdout.write with string &quot; No migrations to apply . &quot; as an argument .
call the MigrationAutodetector function with arguments , return value of the call to the method executor.loader.project _ state ,
and return value of the call to the method ProjectState.from _ apps with apps as an argument , assign it to the autodetector. call the method autodetector.changes with the graph set to executor.loader.graph as an argument , substitute it for the changes .
if changes is true ,
call the method self.style.NOTICE with string &quot; Your models have changes that are not yet reflected in a migration , and so won &apos;t be applied . &quot; as an argument , use the result as an argument for the call to the self.stdout.write method .
call the method self.style.NOTICE with string &quot; Run &apos; manage.py makemigrations &apos; to make new migrations , and then re-run &apos; manage.py migrate &apos; to apply them . &quot; as an argument , use the result as an argument for the call to the self.stdout.write method .
if not ,
call the executor.migrate method with , targets , plan and fake set to the value under the &apos; fake &apos; key of options dictionary ,
if the &apos; fake &apos; key doesnt exists set fake to boolean False , as arguments. call the method emit _ post _ migrate _ signal with created _ models , self.verbosity , self.interactive and connection.alias as arguments .
define the method migration _ progress _ callback with self class instance , action , migration and fake set to boolean False as arguments .
if self.verbosity is greater or equal to integer 1 ,
if action equals to string &quot; apply _ start &quot; ,
call the self.stdout.write method , with string &quot; Applying % s ... &quot; with &apos; % s &apos; replaced with migration and ending set to &apos; &apos; , as arguments .
flush the output buffer of the self.stdout object .
otherwise if action equals to string &apos; apply _ success &apos; ,
if fake is true ,
wrte to the standard output result of the call to the method self.style.MIGRATE _ SUCCESS with string &quot; FAKED &quot; as a argument .
if not ,
wrte to the standard output result of the call to the method self.style.MIGRATE _ SUCCESS with string &quot; OK &quot; as a argument .
otherwise if action equals to string &apos; unapply _ start &apos; .
call the self.stdout.write method , with string &quot; Unapplying % s ... &quot; with &apos; % s &apos; replaced with migration and ending set to &apos; &apos; , as arguments .
flush the output buffer of the self.stdout object .
otherwise if action equals to string &quot; unapply _ success &quot; .
if fake is true ,
wrte to the standard output result of the call to the method self.style.MIGRATE _ SUCCESS with string &quot; FAKED &quot; as a argument .
if not ,
wrte to the standard output result of the call to the method self.style.MIGRATE _ SUCCESS with string &quot; OK &quot; as a argument .
define the method sync _ apps with self class instance , connection and app _ labels as arguments .
call the connection.cursor method , substitute the result for cursor .
try ,
call the connection.introspection.table _ names with cursor as argument , store the result in tables .
call the connection.introspection.table _ names with tables as argument , store the result in seen _ models .
created _ models is a set .
pending _ references is a empty dictionary .
for every app _ config in return value of the method apps.get _ app _ configs if app _ config.models _ module is not None ,
and app _ config.label is contained in app _ labels , create a tuple containing app _ config.label and return value of the method router.get _ migratable _ models called with app _ config , connection.alias and include _ auto _ created set to True , append the tuple to the list all _ models. define the method model _ installed with model as an argument .
substitute model . _ meta for opts .
substitute connection.introspection.table _ name _ converter for converter .
evaluate next boolean expression , value of converter function with opts.db _ table as argument is contained in tables ,
or opts.auto _ created is True and return value of converter function with opts.auto _ created . _ meta.db _ table is contained in tables , invert the evaluated expression and return it. manifest is OrderDict class instance , created with tuple of two elements , app _ name and list of elements of model _ list for which model _ installed function returned true , for every app _ name and model _ list in all _ modules .
unpack the manifest.values function return value and feed it to the itertools.chain function , create _ models is a set containing chanied list .
call the emit _ pre _ migrate _ signal with create _ models , self.verbosity , self.interactive. connection.alias as arguments .
if self.verbosity is greater or equal than integer 1 ,
write the string &quot; Creating tables ... \ n &quot; to the standard output .
with the call to the transaction.atomic method with using set to connection.alias , savepoint set to connection.features.can _ rollback _ ddl as arguments ,
for every app _ name and model _ list in return value of manifest.items function ,
for every model in model _ list ,
if self.verbosity is greater or equal to 3 ,
call the self.stdout.write method with string &quot; Processing % s . % s model \ n &quot; as argument , with all occurrences of &apos; % s &apos; replaced with ,
app _ name and model . _ meta.object _ name , respectively. evaluate connection.creation.sql _ create _ model method with model , no _ style ( ) and seen _ models as arguments ,
assign the result to the sql and references , respectively. add model to seen _ models set .
add model to created _ models set .
for every refto and refs in return value of references.items method .
call the method extend with refs as argument , on the result call the pending _ references.setdefault method with refto and empty list as arguments .
if refto is contained in seen _ models ,
call the connection.creation.sql _ for _ pending _ references method with refto , no _ style ( ) and pending _ references as arguments ,
use the result as the argument for the call to the sql.extend method. call the connection.creation.sql _ for _ pending _ references method with refto , no _ style ( ) and pending _ references as arguments ,
use the result as the argument for the call to the sql.extend method. if self.verbosity is greater or equal than integer 1 and sql is true ,
call the self.stdout.write method with string &quot; Creating table % s \ n &quot; as argument , with all occurrences of &apos; % s &apos; replaced with model . _ meta.db _ table .
for statements is sql ,
call the cursor.execute method with statement as argument .
evaluate the method connection.introspection.table _ name _ converter with model . _ meta.db _ table as argument , append it to tables .
finally , perform ,
call the cursor.close method .
call the connection.cursor method , substitute it for cursor .
try ,
if self.verbosity is greater or equal than integer 1 ,
write the string &quot; Installing custom SQL ... \ n &quot; to the standard output .
for every app _ name and mode _ list in return value of manifest.items method ,
for model in model _ list ,
if model is contained in created _ models ,
call the method custom _ sql _ for _ model with model , no _ style ( ) and connection as arguments , substitute the result for custom _ sql .
if custom _ sql is empty ,
if self.verbosity is greater or equal to integer 2 ,
call the self.stdout.write method with string &quot; Installing custom SQL for % s . % s model \ n &quot; as argument ,
with all occurrences of &apos; % s &apos; replaced with app _ name and model . _ meta.object _ name , respectively. try ,
with call to the function transaction.atomic with using set to connection.alias as argument ,
for every sql in custom _ sql ,
call the cursor.execute method with sql as argument .
if exception of class Exception , as e , is caught ,
call the self.stderr.write method with string &quot; Failed to install custom SQL for % s . % s model : % s \ n &quot; as argument ,
with all occurrences of &apos; % s &apos; replaced with app _ name and model . _ meta.object _ name and e , respectively. if self.show _ traceback is true ,
call the traceback.print _ exc method .
if not ,
if self.verbosity is greater or equal to integer 3 ,
call the self.stderr.write method with string &quot; No custom SQL for % s . % s model \ n &quot; as argument ,
with all occurrences of &apos; % s &apos; replaced with app _ name and model . _ meta.object _ name , respectively. if self.verbosity is greater or equal to integer 1 ,
write string &quot; Installing indexes ... \ n &quot; to the standard output .
for every app _ name and model _ list in return value of manifest.items method ,
for every model in model _ list ,
if model is contained in created _ models ,
call the connection.creation.sql _ indexes _ for _ model with model and no _ style ( ) as arguments , substitute the result for index _ squl .
if index _ sql is not empty ,
if self.verbosity is greater or equal to integer 2 ,
call the self.stderr.write method with string &quot; Installing index for % s . % s model \ n &quot; as argument ,
with all occurrences of &apos; % s &apos; replaced with app _ name and model . _ meta.object _ name , respectively. try ,
with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can _ rollback _ ddl , as arguments .
for every sql in index _ sql ,
call the method cursor.execute with sql as argument .
if exception of the class Exception , as e , is caught ,
call the self.stderr.write method with string &quot; Failed to install index for % s . % s model : % s \ n &quot; as argument ,
with all occurrences of &apos; % s &apos; replaced with app _ name and model . _ meta.object _ name and e , respectively. finally perform ,
call the cursor.close method .
if self.load _ initial _ data is not empty ,
for every app _ label in app _ labels ,
call the method call _ command with string &apos; loaddata &apos; , string &apos; initial _ data &apos; , verbosity set to self.verbosity ,
database set to connection.alias , skip _ validation set to boolean True , app _ label set to app _ label and hide _ empty set to boolean True. return created _ models
define show _ migration _ list with self class instance , connection and app _ names set to None , as arguments .
loader is instance of MigrationLoader initialized with connection as an argument .
substitute loader.graph for graph .
if app _ names is not empty ,
invalid _ apps is an empty list .
for every app _ name is app _ names ,
if app _ name is not contained in loader.migrated _ apps ,
append app _ name to the invalid _ apps .
if invalid _ apps in not empty ,
raise a CommandError exception , with string &quot; No migrations present for : % s &quot; as argument , substitute &apos; % s &apos; in previous string with ,
string joined from invalided _ apps list and separated with string &apos; , &apos; . if not ,
sort loader.migrated _ apps , substitute it for app _ names .
for every app _ name in app _ names .
call self.stdout.write method with app _ name and self.style.MIGRATE _ LABEL as arguments .
shown is an empty set .
for every node in return value of the graph.leaf _ nodes method called with the app _ name argument ,
for every plan _ node in return value of the graph.forwards _ plan method called with node as argument .
if plan _ node is not contained in shown and first element of plan _ node equals to app _ name ,
substitute second element of plan _ node for title .
if replaces filed of graph.nodes element at the plan _ node index is true ,
substitute &apos; % s &apos; in the string &quot; ( % s squashed migrations ) &quot; with length of replaces filed of graph.nodes element at the plan _ node index , append the string to the title .
if plan _ node is contained in loader.applied _ migrations ,
substitute &apos; % s &apos; with title in the string &quot; &#91; X &#93; % s &quot; , write it to the standard output .
if not ,
substitute &apos; % s &apos; with title in the string &quot; &#91; &#93; % s &quot; , write it to the standard output .
add plan _ node to the shown set .
if shown is an empty set ,
call the self.stdout.write method with string &quot; ( no migrations ) &quot; and self.style.MIGRATE _ FAILURE as arguments .
import module argparse .
import module warnings .
from django.core.management.base import BaseCommand into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
derive the class Command from the BaseCommand class .
help is a string &quot; Runs this project as a FastCGI application . Requires flup . &quot; .
define the method add _ arguments with 2 arguments self and parser .
call the method parser.add _ argument with 3 arguments : string &apos; args &apos; , nargs set to argparse.REMAINDER and help as a string &apos; Various KEY = val options . &apos; 
define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
call the method warnings.warn with 2 arguments : string &quot; FastCGI support has been deprecated and will be removed in Django 1.9 . &quot; ,
and RemovedInDjango19Warning. from django.conf import settings into default namespace .
from django.utils import translation into default namespace .
try ,
call the method translation.activate with an argument settings.LANGUAGE _ CODE .
if AttributeError exception is caught ,
do nothing .
from django.core.servers.fastcgi import runfastcgi into default namespace .
call the function runfastcgi with an argument args .
define the method usage with 2 argument : self and subcommand .
from django.core.servers.fastcgi import FASTCGI _ HELP into default namespace .
return FASTCGI _ HELP .
from _ _ future _ _ import unicode _ literals into default name space .
from datetime import datetime into default name space .
import module errno .
import module os .
import module re .
import module sys .
import module socket .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.core.servers.basehttp import run and get _ internal _ wsgi _ application into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
from django.db.migrations.executor import MigrationExecutor into default name space .
from django.utils import autoreload into default name space .
from django.utils import six into default name space .
from django.core.exceptions import ImproperlyConfigured into default name space .
call the method re.compile with 2 arguments : raw string &quot; &quot; &quot; ^ ( ? : ( ? P &lt; addr &gt; ( ? P &lt; ipv4 &gt; \ d { 1,3 } ( ? : \ . \ d { 1,3 } ) { 3 } ) &#124; &quot; &quot; &quot;
&quot; &quot; &quot; ( ? P &lt; ipv6 &gt; \ &#91; &#91; a-fA-F0-9 : &#93; + \ &#93; ) &#124; ( ? P &lt; fqdn &gt; &#91; a-zA-Z0-9- &#93; + ( ? : \ . &#91; a-zA-Z0-9- &#93; + ) * ) ) : ) ? ( ? P &lt; port &gt; \ d + ) $ &quot; &quot; &quot; , re.X DEFAULT _ PORT is a string &quot; 8000 &quot; .
derive the class Command from the BaseCommand class .
help is a string &quot; Starts a lightweight Web server for development . &quot; .
requires _ system _ checks is boolean False .
define the method add _ arguments with 2 arguments self and parser .
call the method parser.add _ argument with 3 arguments : string &apos; addrport &apos; , nargs = &apos; ? &apos; and help as a string &apos; Optional port number , or ipaddr : port &apos; .
call the method parser.add _ argument with 6 arguments : string &apos; --ipv6 &apos; , string &apos; -6 &apos; , action set to string &apos; store _ true &apos; ,
dest set to string &apos; use _ ipv6 &apos; , default set to boolean False and help set to string &apos; Tells Django to use an IPv6 address . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --nothreading &apos; , action set to string &apos; store _ false &apos; ,
dest set to string &apos; use _ threading &apos; , default set to boolean True and help set to &apos; Tells Django to NOT use threading . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --noreload &apos; , action set to string &apos; store _ false &apos; ,
dest set to string &apos; use _ reloader &apos; , default set to boolean True and help is a string &apos; Tells Django to NOT use the auto-reloader . &apos; . def get _ handler with 3 arguments : self , unpacked list args and unpacked dictionary options .
call the function get _ internal _ wsgi _ application , return the result .
define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
from django.conf import settings into default namespace .
if not settings.DEBUG is true and settings.ALLOWED _ HOSTS is false ,
raise an CommandError exception with an argument string &apos; You must set settings.ALLOWED _ HOSTS if DEBUG is False . &apos; .
substitute value under the &apos; use _ ipv6 &apos; key of the options dictionary for self.use _ ipv6 .
if self.use _ ipv6 is true and socket.has _ ipv6 is false ,
raise an CommandError exception with an argument string &apos; Your Python does not support IPv6 . &apos; .
self . _ raw _ ipv6 is boolean False .
get the value under the &apos; addrport &apos; key of the options dictionary , if it is false ,
self.addr is an empty string .
substitute DEFAULT _ PORT for self.port.
if not ,
call the method re.match with 2 arguments : naiveip _ re and value under the &apos; addrport &apos; key of the options dictionary , substitute the result for m .
if m is None ,
raise an CommandError exception with an argument string &apos; &quot; % s &quot; is not a valid port number or address : port pair . &apos; ,
where &apos; % s &apos; is replaced with value under the &apos; addrport &apos; key of the options dictionary. call the method m.groups , assign the result to self.addr , _ ipv4 , _ ipv6 , _ fqdn and self.port , respectively .
call the method self.port.isdigit , if it evaluates to false ,
raise an CommandError exception with an argument string &quot; % r is not a valid port number . &quot; , where &apos; % r &apos; is repaced with self.port.
if self.addr is true ,
if _ ipv6 is true ,
substitute self.addr without the first and last element for self.addr.
self.use _ ipv6 is boolean True .
self . _ raw _ ipv6 is boolean True .
otherwise if self.use _ ipv6 is true and _ fqdn is false ,
raise an CommandError exception with an argument string &apos; &quot; % s &quot; is not a valid IPv6 address . &apos; where &apos; % s &apos; is replaced with self.addr.
if self.addr is false ,
if self.use _ ipv6 substitute string &apos; : : 1 &apos; for self.addr , if not substitute &apos; 127.0.0.1 &apos; for self.addr.
convert self.use _ ipv6 to boolean , substitute it for self . _ raw _ ipv6 .
call the self.run method with unpacked dictionary options as an argument .
define the method run with 3 arguments : self and unpacked dictionary options .
substitute value under the &apos; use _ reloader &apos; key of the options dictionary for use _ reloader .
if use _ reloader is true ,
call the method autoreload.main with 3 arguments : self.inner _ run , None and options .
if not ,
call the method self.inner _ run with 2 arguments : None and unpacked dictionary options .
define the method inner _ run with 3 arguments : self , unpacked list args and unpacked dictionary options .
from django.conf import settings into default namespace .
django.utils import translation into default namespace .
substitute value under the &apos; use _ threading &apos; key of the options dictionary for threading .
get the value under the &apos; shutdown _ message &apos; key of the options dictionary , if it exists substitute it for shutdown _ message ,
if not , shutdown _ message is an empty string. if sys.platform equals string win32 &apos; , substitute string &apos; CTRL-BREAK &apos; for quit _ command , if not substitute string &apos; CONTROL-C &apos; for quit _ command .
write string &quot; Performing system checks ... \ n \ n &quot; to self.stdout stream .
call the method self.validate with an argument display _ num _ errors set to boolean True .
try ,
call the method self.check _ migrations .
if ImproperlyConfigured exception is caught ,
do nothing .
call the function datetime.now , on the result call the method strftime with an argument string &apos; % B % d , % Y - % X &apos; , substitute the result for now .
if six.PY2 is true ,
call the method now.decode with an argument string &apos; utf-8 &apos; , substitute the result for now .
call the method self.stdout.write with an argument : string &quot; % ( started _ at ) s \ nDjango version % ( version ) s , using settings % ( settings ) r \ n &quot;
&quot; Starting development server at http : / / % ( addr ) s : % ( port ) s / \ n Quit the server with % ( quit _ command ) s . \ n &quot; , where &apos; &quot; % ( started _ at ) s &apos; is replaced with now , &apos; % ( version ) s &apos; is replaced with return value of the method self.get _ version , &apos; % ( settings ) r &apos; is replaced with settings.SETTINGS _ MODULE , &apos; % ( addr ) s &apos; is replaced with self.addr if self . _ raw _ ipv6 is true , or with self.addr if it is false , &apos; % ( port ) s &apos; is replaced with self.port and &apos; % ( quit _ command ) s &apos; is replaced with quit _ command. call the method translation.activate with an argument settings.LANGUAGE _ CODE .
try ,
call the method self.get _ handler with 2 arguments unpacked list args and unpacked dictionary options , substitute the result for handler .
call the function run with 5 arguments : self.addr , self.port converted to an integer , handler , ipv6 set to self.use _ ipv6 , and threading set to threading .
if socket.error , renamed to e , exception is caught ,
ERRORS is a dictionary with 3 initial entries : string &quot; You don &apos;t have permission to access that port . &quot; for errno.EACCES ,
&quot; That port is already in use . &quot; for errno.EADDRINUSE and &quot; That IP address can &apos;t be assigned-to . &quot; for errno.EADDRNOTAVAIL. try ,
get the value under the e.errno key of the ERRORS dictionary , substitute it for error _ text .
if KeyError exception is caught .
convert e to a string , substitute it for error _ text .
replace &apos; % s &apos; in a string &quot; Error : % s &quot; with error _ text , write it to self.stderr.
exit the program with the code integer 1 .
if KeyboardInterrupt exception is caught ,
if shutdown _ message is true ,
write shutdown _ message to self.stdout file stream .
exit program with code integer 0 .
define the method check _ migrations with an argument self .
executor is an instance of the class MigrationExecutor created with an argument : value under the DEFAULT _ DB _ ALIAS key of the connections dictionary .
call the method executor.migration _ plan wiht return value of te method executor.loader.graph.leaf _ nodes as argument , substitute it for plan .
if plan is true ,
call the method self.style.NOTICE with an argument :
string : &quot; \ nYou have unapplied migrations ; your app may not work properly until they are applied . &quot; , write it to self.stdout. call the method self.style.NOTICE with an argument string &quot; Run &apos; python manage.py migrate &apos; to apply them . \ n &quot; ,
write it to self.stdout. substitute Command for BaseRunserverCommand .
import module os .
from django.core.management.base import BaseCommand into default name space .
derive the class Command from the BaseCommand class .
help is a string &quot; Runs a Python interactive interpreter . Tries to use IPython or bpython , if one of them is available . &quot; .
requires _ system _ checks is boolean False .
shells is a list containing 2 elements : string &apos; ipython &apos; and string &apos; bpython &apos; .
define the method add _ arguments with 2 arguments self and parser .
call the method parser.add _ argument with 4 arguments : string &apos; --plain &apos; , action set to string &apos; store _ true &apos; , dest as a string &apos; plain &apos; ,
and help is a string &apos; Tells Django to use plain Python , not IPython or bpython . &apos; . call the method parser.add _ argument with 4 arguments : string &apos; --no-startup &apos; , action as a string &apos; store _ true &apos; ,
dest as a string &apos; no _ startup &apos; and help as a string &apos; When using plain Python , ignore the PYTHONSTARTUP environment variable and ~ / .pythonrc.py script . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; -i &apos; , string &apos; --interface &apos; , choices set to string self.shells ,
dest as a string &apos; interface &apos; and help as a string &apos; Specify an interactive interpreter interface . Available options : &quot; ipython &quot; and &quot; bpython &quot; &apos; . define the method _ ipython _ pre _ 011 with an argument self .
from IPython.Shell import IPShell into default namespace .
shell is an instance of IPShell class , created with an argument argv as an empty list .
call the method shell.mainloop.
define the method _ ipython _ pre _ 100 with an argument self .
from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace .
call the method instance of TerminalIPythonApp class , substitute the result for app .
call the method app.initialize with an argument argv as an empty list .
call the method app.start.
define the method _ ipython with an argument self .
from IPython import start _ ipython into default namespace .
call the method start _ ipython with an argument argv as an empty list .
define the method ipython with an argument self .
for every ip in tuple containing 3 elements : self . _ ipython , self . _ ipython _ pre _ 100 and self . _ ipython _ pre _ 011 ,
try ,
call the function ip .
if ImportError exception is caught ,
do nothing .
if not ,
return nothing .
raise an ImportError exception with an argument string &quot; No IPython &quot; .
define the method bpython with an argument self .
import bpython .
call the method bpython.embed.
define the method run _ shell with an arguments self and shell set to None .
if shell is true substitute list with element shell for available _ shells , if not substitute self.shells for available _ shells .
for every shell in available _ shells ,
try ,
get shell attribute of the self object , call it and return the result .
if ImportError exception is caught ,
do nothing .
raise an ImportError exception .
define the method handle with 3 arguments : self and unpacked dictionary options .
try ,
if value under &apos; plain &apos; key of the options dictionary is true ,
raise an ImportError exception .
call the method self.run _ shell with an argument shell set to value under the &apos; interface &apos; key of the options dictionary .
if ImportError exception is caught ,
import code .
imported _ objects is an empty dictionary .
try ,
import readline .
if ImportError exception is caught ,
do nothing .
if not ,
import rlcompleter .
call the method rlcompleter.Completer with an argument imported _ objects , use the complete field of the result as an argument for the call to the method readline.set _ completer .
call the method readline.parse _ and _ bind with an argument string &quot; tab : complete &quot; .
get the value under the &apos; no _ startup &apos; key of the options dictionary , if it evaluates to false ,
for every pythonrc in tuple containing 2 elements : return value of the function os.environ.get called with a string &quot; PYTHONSTARTUP &quot; ,
and string &apos; ~ / .pythonrc.py &apos; as tuples second element. if pythonrc is true ,
skip this loop iteration .
call the function os.path.expanduser with an argument pythonrc , substitute the result for pythonrc .
if pythonrc is not a file ,
skip this loop iteration .
try ,
open pythonrc , with the file handle renamed to handle perform the following ,
compile the handle.read in mode &apos; exec &apos; source is read from file pythonrc , execute the compiled script with imported _ objects variables .
if NameError exception is caught ,
do nothing .
call the method code.interact with an argument local set to imported _ objects .
from _ _ future _ _ import unicode _ literals into default name space .
from django.core.management.base import AppCommand into default name space .
from django.core.management.sql import sql _ create into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
derive the class Command from the AppCommand base class .
help is a string &quot; Prints the CREATE TABLE SQL statements for the given app name ( s ) . &quot; .
output _ transaction is boolean True .
define the method add _ arguments with 2 arguments self and parser .
call the method add _ arguments from the base class of the class Command , with an argument parser .
call the method parser.add _ argument with 3 arguments : string &apos; --database &apos; , default set to DEFAULT _ DB _ ALIAS ,
and help set to a string &apos; Nominates a database to print the SQL for . Defaults to the &quot; default &quot; database . &apos; . define the method handle _ app _ config with 3 arguments : self , app _ config and unpacked dictionary options .
if app _ config.models _ module is None ,
return nothing .
get the value under the &apos; database &apos; key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
call the function sql _ create with 3 arguments : app _ config , self.style and connection , substitute the result for statements .
join statements into a string , separated by newlines , return it .
from _ _ future _ _ import unicode _ literals into default name space .
from django.core.management.base import AppCommand into default name space .
from django.core.management.sql import sql _ all into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
derive the class Command from the AppCommand base class .
help is a string &quot; Prints the CREATE TABLE , custom SQL and CREATE INDEX SQL statements for the given model module name ( s ) . &quot; .
output _ transaction is boolean True .
define the method add _ arguments with 2 arguments self and parser .
call the method add _ arguments from the base class of the class Command , with an argument parser .
call the method parser.add _ argument with 3 arguments : string &apos; --database &apos; , default set to DEFAULT _ DB _ ALIAS ,
and help set to a string &apos; Nominates a database to print the SQL for . Defaults to the &quot; default &quot; database . &apos; . define the method handle _ app _ config with 3 arguments : self , app _ config and unpacked dictionary options .
if app _ config.models _ module is None ,
return nothing .
get the value under the &apos; database &apos; key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
call the function sql _ all with 3 arguments : app _ config , self.style and connection , substitute the result for statements .
join statements into a string , separated by newlines , return it .
from _ _ future _ _ import unicode _ literals into default name space .
from django.core.management.base import AppCommand into default name space .
from django.core.management.sql import sql _ delete into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
derive the class Command from the AppCommand base class .
help is a string &quot; Prints the DROP TABLE SQL statements for the given app name ( s ) . &quot; .
output _ transaction is boolean True .
define the method add _ arguments with 2 arguments self and parser .
call the method add _ arguments from the base class of the class Command , with an argument parser .
call the method parser.add _ argument with 3 arguments : string &apos; --database &apos; , default set to DEFAULT _ DB _ ALIAS ,
and help set to a string &apos; Nominates a database to print the SQL for . Defaults to the &quot; default &quot; database . &apos; . define the method handle _ app _ config with 3 arguments : self , app _ config and unpacked dictionary options .
if app _ config.models _ module is None ,
return nothing .
get the value under the &apos; database &apos; key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
call the function sql _ destroy _ indexes with 3 arguments : app _ config , self.style and connection , substitute the result for statements .
join statements into a string , separated by newlines , return it .
from _ _ future _ _ import unicode _ literals into default name space .
from django.core.management.base import AppCommand into default name space .
from django.core.management.sql import sql _ custom into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
derive class Command from the base class AppCommand .
help is a string , &quot; Prints the custom table modifying SQL statements for the given app name ( s ) . &quot; .
substitute True for output _ transaction .
define method add _ arguments with class instance self and parser as the input arguments .
call the function add _ arguments with parser as an argument , from the base class of the Command class .
call the parser.add _ argument method with the string &apos; --database &apos; , default set to DEFAULT _ DB _ ALIAS and help containig string ,
&apos;Nominates a database to print the SQL for . Defaults to the &quot; default &quot; database . &apos; as the arguments. define method handle _ app _ config with self class instance , app _ config and dictionary options as arguments .
if app _ config.models _ module is None ,
return nothing .
extract the value under the key &apos; database &apos; from the options dictionary , use the value for indexing connections list , substitute the result for connection .
call the function sql _ custom with app _ config , self.style and connection as the arguments , substitute the result for statements .
join the list of statements into a string separated by new lines , return it .
from _ _ future _ _ import unicode _ literals into default name space .
from django.core.management.base import AppCommand into default name space .
from django.core.management.sql import sql _ destroy _ indexes into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
derive the class Command from the AppCommand base class .
help is an string &quot; Prints the DROP INDEX SQL statements for the given model module name ( s ) . &quot; .
output _ transaction is boolean True .
define the method add _ arguments with 2 arguments : self and parser .
call the add _ arguments method from the base class of the class Command with parser as an argument .
call the method parser.add _ argument with 3 arguments : string &apos; --database &apos; , default set to DEFAULT _ DB _ ALIAS ,
and help set to string &apos; Nominates a database to print the SQL for . Defaults to the &quot; default &quot; database . &apos; . define the handle _ app _ config with 3 arguments self , app _ config and unpacked dictionary options .
if app _ config.models _ module is None .
return nothing .
get the value under the &apos; database &apos; key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
call the function sql _ destroy _ indexes with 3 arguments : app _ config , self.style and connection , substitute the result for statements .
join statements into a string , separated by newlines , return it .
from _ _ future _ _ import unicode _ literals into default name space .
from django.core.management.base import BaseCommand into default name space .
from django.core.management.sql import sql _ flush into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
derive the class Command from the base class BaseCommand .
help is a string , containing &quot; Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed . &quot; .
output _ transaction is boolean True .
define method add _ arguments with self class instance and parser as the arguments .
call the parent class of Command class add _ arguments method and parser as the arguments .
call the add _ argument method on parser object , use string &apos; --database &apos; , default set to DEFAULT _ DB _ ALIAS and help set to string ,
&apos;Nominates a database to print the SQL for . Defaults to the &quot; default &quot; database . &apos; as the arguments. define the method handle with self class instance and dictionary options as the arguments .
call the sql _ flush function with self.style , connections under the key with the value of options dictionary under the &apos; database &apos; key ,
from _ _ future _ _ import unicode _ literals into default name space .
from django.core.management.base import AppCommand into default name space .
from django.core.management.sql import sql _ indexes into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
derive the class Command from the base class AppCommand .
help is a string &quot; Prints the CREATE INDEX SQL statements for the given model module name ( s ) . &quot; .
output _ transaction is boolean True .
define the method add _ arguments with self class instance and parser as the arguments .
call the add _ arguments method with parser as argument form the base class of the class Command .
call parse.add _ argument method , with string &apos; --database &apos; , default set to DEFAULT _ DB _ ALIAS ,
and help as a string &apos; Nominates a database to print the SQL for . Defaults to the &quot; default &quot; database . &apos; , as arguments. define the method handle _ app _ config with self class instance , app _ config and dictionary options as arguments .
if app _ config.models _ module is None ,
return nothing .
get the value under the &apos; database &apos; key of options dictionary , use it as a index to get connections list element , store it in connection .
call the function sql _ indexes with app _ config , self.style and connection as arguments , store the result in statements .
join statements in a string separated by newline , return the result .
from _ _ future _ _ import unicode _ literals into default name space .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
from django.db.migrations.executor import MigrationExecutor into default name space .
from django.db.migrations.loader import AmbiguityError into default name space .
derive class Command from the base class BaseCommand .
help is a string &quot; Prints the SQL statements for the named migration . &quot;
def method add _ arguments with self class instance and parser as the arguments .
call the add _ argument method on the parser object , with string &apos; app _ label &apos; , and help set to string &apos; App label of the application containing the migration . &apos; as arguments .
call the add _ argument method on the parser object , with string &apos; migration _ name &apos; , and help set to string &apos; Migration name to print the SQL for . &apos; as arguments .
call the add _ argument method on the parser object , with string &apos; --database &apos; , default set to DEFAULT _ DB _ ALIAS and help set to string &apos; Nominates a database to create SQL for . Defaults to the default &quot; database . &apos; as arguments .
call the add _ argument method on the parser object with string &apos; --backwards &apos; , asction set to &apos; store _ true &apos; , dest set to &apos; backwards &apos; ,
default set to False and help set to string &apos;Creates SQL to unapply the migration , rather than to apply it &apos; as arguments. define the method handle with self class instance , list of arguments args and options dictionary as the arguments .
get the value under the key &apos; database &apos; of the options dictionary , use it as a index to get an element from connections , substitute it for connection .
call the MigrationExecutor with the connection as the argument , substitute it for executor .
get the values under the keys &apos; app _ label &apos; and &apos; migration _ name &apos; of the options dictionary , substitute the results for app _ label and migration _ name , respectively .
if app _ label is not contained in executor.loader.migrated _ apps ,
raise a exception of CommandError class , with string &quot; App &apos; % s &apos; does not have migrations &quot; with &apos; % s &apos; replaced with app _ label as the argument .
try ,
call the executor.loader.get _ migration _ by _ prefix with app _ label and migration _ name with arguments , substitute the result fr migration .
if AmbiguityError exception is raised ,
raise a exception of ComandError class with string &quot; More than one migration matches &apos; % s &apos; in app &apos; % s &apos; . Please be more specific . &quot; ,
with all &apos; % s &apos; strings replaced with migration _ name and app _ label , respectively , as an argument. if KeyError exception is raised ,
raise a exception of CommandError class , with string &quot; Cannot find a migration matching &apos; % s &apos; from app &apos; % s &apos; . Is it in INSTALLED _ APPS ? &quot; ,
replace all the &apos; % s &apos; occurrences with migration _ name and app _ label , respectively. target is a list containing tuple with two elements app _ label and migration.name.
get executor.loader.graph.nodes list item at the index of the first element of targets list , get the value under the &apos; backwards &apos; key of options dictionary , put previous two elements is a tuple , tuple is contained in a plan list .
call method executor.collect _ sql with plan as the argument , substitute the result for sql _ statements .
for every statements in sql _ statements :
call method self.stdout.write with statement as an argument .
from _ _ future _ _ import unicode _ literals into default name space .
from django.core.management.base import AppCommand into default name space .
from django.core.management.sql import check _ for _ migrations into default name space .
from django.db import connections and DEFAULT _ DB _ ALIAS into default name space .
derive the class Command from the AppCommand base class .
help is a string &apos; Prints the SQL statements for resetting sequences for the given app name ( s ) . &apos; .
output _ transaction is boolean True .
define the method add _ arguments , with 2 arguments self and parser .
call the method add _ arguments from the base class of the Command class , with an argument parser .
call the method parser.add _ argument with 3 arguments : string &apos; --database &apos; , default set to DEFAULT _ DB _ ALIAS ,
and help set to string &apos; Nominates a database to print the SQL for . Defaults to the &quot; default &quot; database . &apos; . define the method handle _ app _ config with 3 arguments : self , app _ config and unpacked dictionary options .
if app _ config.models _ module is None ,
return nothing .
get the value under the &apos; database &apos; key of the options dictionary ,
use the result as a key to get the value from the connections dictionary , substitute the result for connection. call the function check _ for _ migrations with 2 arguments : app _ config and connection .
call the method app _ config.get _ models with include _ auto _ created set to boolean True , substitute the result for models .
call the method connection.ops.sequence _ reset _ sql with 2 arguments self.style and models , substitute the result for statements .
join statements into a string , separated by newline characters , return it .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.utils import six into default name space .
from django.db import connections , DEFAULT _ DB _ ALIAS and migrations into default name space .
from django.db.migrations.loader import AmbiguityError into default name space .
from django.db.migrations.executor import MigrationExecutor into default name space .
from django.db.migrations.writer import MigrationWriter into default name space .
from django.db.migrations.optimizer import MigrationOptimizer into default name space .
derive the class Command from the BaseCommand class .
help is a string &quot; Squashes an existing set of migrations ( from first until specified ) into a single new one . &quot; .
define the method add _ arguments with 2 arguments self and parser .
call the method parser.add _ argument with 2 arguments : string &apos; app _ label &apos; ,
and help is a string &apos; App label of the application to squash migrations for . &apos; . call the method parser.add _ argument with 2 arguments : string &apos; migration _ name &apos; ,
and help is a string &apos; Migrations will be squashed until and including this migration . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --no-optimize &apos; , action as a string &apos; store _ true &apos; ,
dest as a string &apos; no _ optimize &apos; , default set to boolean False and help as a string &apos; Do not try to optimize the squashed operations . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --noinput &apos; , action set to string &apos; store _ false &apos; ,
dest as a string &apos; interactive &apos; , default as boolean True help as a string &apos; Tells Django to NOT prompt the user for input of any kind . &apos; . define the method handle with 3 arguments : self and unpacked dictionary options .
get the value under the &apos; verbosity &apos; key of the options dictionary , substitute it for self.verbosity.
get the value under the &apos; interactive &apos; key of the options dictionary , substitute it for self.interactive.
get the values under the &apos; app _ label &apos; and &apos; migration _ name &apos; keys of the options dictionary ,
substitute them for app _ label and migration _ name , respectively. executor is an instance of MigrationExecutor , created with value under the DEFAULT _ DB _ ALIAS key of the connections dictionary .
if app _ label is not contained in executor.loader.migrated _ apps ,
raise an CommandError with an argument string &quot; App &apos; % s &apos; does not have migrations ( so squashmigrations on it makes no sense ) &quot; ,
where &apos; % s &apos; is replaced with app _ label. try ,
call the method executor.loader.get _ migration _ by _ prefix with arguments app _ label , migration _ name , substitute the result for migration .
if AmbiguityError exception is caught ,
raise an CommandError with an argument string &quot; More than one migration matches &apos; % s &apos; in app &apos; % s &apos; . Please be more specific . &quot; ,
where &apos; % s &apos; is replaced with migration _ name and app _ label. if KeyError exception is caught ,
raise an CommandError with an argument string &quot; Cannot find a migration matching &apos; % s &apos; from app &apos; % s &apos; . &quot; ,
where &apos; % s &apos; is replaced with migration _ name and app _ label. migrations _ to _ squash is a list created dynamically with elements : return value of the method executor.loader.get _ migration called ,
with arguments al and mn , for every al , mn in executor.loader.graph.forwards _ plan method return value called with 2 arguments : migration.app _ label , migration.name , only if al equals migration.app _ label. if self.verbosity is greater than integer 0 or self.interactive is true ,
call the method self.style.MIGRATE _ HEADING with an argument string &quot; Will squash the following migrations : &quot; ,
write it to self.stdout. for every migration in migrations _ to _ squash ,
append migration.name to string &apos; - &apos; , write it to self.stdout stream .
if self.interactive is true ,
answer is None .
while answer is false or answer is not contained in string &quot; yn &quot; , perform the following ,
call the method six.moves.input with an argument string &quot; Do you wish to proceed ? &#91; yN &#93; &quot; , substitute the result for answer .
if answer is false ,
substitute &apos; n &apos; for answer .
break from the loop execution ,
if not ,
convert first element of answer to lowercase and substitute it for answer .
if answer equals a string &apos; y &apos; ,
return nothing .
operations is an empty list .
for every smigration in migrations _ to _ squash ,
call the method operations.extend with an argument smigration.operations.
if self.verbosity is greater than integer 0 ,
call the method self.style.MIGRATE _ HEADING with an argument string &quot; Optimizing ... &quot; , write it to self.stdout.
optimizer is an instance of MigrationOptimizer class .
call the method optimizer.optimize with 2 arguments operations and migration.app _ label , substitute the result for new _ operations .
if self.verbosity is greater than integer 0 ,
if lengths of new _ operations and operations are the same ,
write string &quot; No optimizations possible . &quot; to self.stdout stream .
if not ,
replace &apos; % s &apos; in string &quot; Optimized from % s operations to % s operations . &quot; with lengths of operations and ew _ operations , respectively ,
write it to self.stdout stream. replaces is an empty list .
for every migration in migrations _ to _ squash ,
if migration.replaces is true ,
extend replaces list with migration.replaces ,
if not ,
append tuple with 2 elements : migration.app _ label and migration.name to replaces .
subclass is a class named Migration , sub classed from migrations.Migration base class , with fields dependencies set to an empty list ,
dependencies set to new _ operations and replaces set to replaces. call the function subclass with 2 arguments string &quot; 0001 _ squashed _ % s &quot; , where &apos; % s &apos; is replaced with migration.name and app _ label ,
substitute the result for new _ migration. writer is an instance of a class MigrationWriter , created with an argument new _ migration .
open writer.path file in write mode , with file descriptor as fh , perform the following ,
call the method writer.as _ string , write the result to file fh .
if self.verbosity is greater than integer 0 ,
replace &apos; % s &apos; in a string &quot; Created new squashed migration % s &quot; with writer.path , use it as an argument for the call to the method ,
self.style.MIGRATE _ HEADING , write the result to self.stdout. write string &quot; You should commit this migration but leave the old ones in place ; &quot; to self.stdout.
write string &quot; the new migration will be used for new installs . Once you are sure &quot; to self.stdout.
write string &quot; all instances of the codebase have applied the migrations you squashed , &quot; to self.stdout.
write string &quot; you can delete them . &quot; to self.stdout.
from importlib import import _ module into default name space .
from django.core.management.base import CommandError into default name space .
from django.core.management.templates import TemplateCommand into default name space .
derive the class Command from the TemplateCommand base class .
help is a tuple containing a string &quot; Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory . &quot; .
missing _ args _ message is a string &quot; You must provide an application name . &quot; .
define the method handle with 2 arguments : self and unpacked dictionary options .
remove values under the keys &apos; name &apos; and &apos; directory &apos; of the options dictionary and substitute it for app _ name and target , respectively .
call the method self.validate _ name with 2 arguments : app _ name and string &apos; app &apos; .
try ,
call the function import _ module with an argument app _ name .
if ImportError exception is caught ,
do nothing .
in not ,
raise an CommandError exception with an argument string &quot; % r conflicts with the name of an existing Python module and cannot be used &quot;
&quot; as an app name . Please try another name . &quot; , where &apos; % r &apos; is replaced with app _ name. call the method handle from the base class of Command class , with 4 arguments : string &apos; app &apos; , app _ name , target and unpacked dictionary options .
from importlib import import _ module into default name space .
from django.core.management.base import CommandError into default name space .
from django.core.management.templates import TemplateCommand into default name space .
from django.utils.crypto import get _ random _ string into default name space .
derive class Command from the TemplateCommand base class .
help is a tuple containing string &quot; Creates a Django project directory structure for the given &quot;
&quot; project name in the current directory or optionally in the given directory . &quot; . missing _ args _ message is a string &quot; You must provide a project name . &quot; .
define the method handle with arguments self and unpacked dictionary options .
remove the elements from the &apos; name &apos; and &apos; dictionary &apos; keys of the options dictionary , substitute them for project _ name and target , respectively .
call the method self.validate _ name with arguments project _ name and string &quot; project &quot; .
try ,
call the function import _ module with an argument project _ name .
if ImportError exception is caught ,
do nothing .
if not ,
raise an exception CommandError , with argument string &quot; % r conflicts with the name of an existing Python module and cannot be used as a project name . Please try another name . &quot; , where &apos; % r &apos; is replaced with project _ name .
chars is a string &apos; abcdefghijklmnopqrstuvwxyz0123456789 ! @ # $ % ^ &amp; * ( - _ = + ) &apos; .
call the function get _ random _ string with 2 arguments : integer 50 and chars , substitute it for value under the &apos; secret _ key &apos; of the options dictionary .
call the handle method of the base class of the Command class , with 4 arguments : string &apos; project &apos; , project _ name , target ,
import module warnings .
from django.apps import apps into default name space .
from django.contrib.auth import get _ user _ model into default name space .
from django.db import DEFAULT _ DB _ ALIAS into default name space .
from django.core.management import call _ command into default name space .
from django.core.management.base import BaseCommand into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
from django.utils.six.moves import input into default name space .
derive class Command from the BaseCommand base class .
help is a string &quot; Deprecated - use &apos; migrate &apos; instead . &quot; .
define the method add _ arguments with self and parser as arguments .
call the method parser.add _ argument with 5 arguments : string &apos; --noinput &apos; , action set to string &apos; store _ false &apos; ,
dest set to string &apos; interactive &apos; , default set to boolean True and help as &apos; Tells Django to NOT prompt the user for input of any kind . &apos; call the method parser.add _ argument with 5 arguments : string &apos; --no-initial-data &apos; , action set to string &apos; store _ false &apos; ,
dest set to string &apos; load _ initial _ data &apos; , default set to boolean True , and help as a string &apos; Tells Django not to load any initial data after database synchronization . &apos; call the method parser.add _ argument with 3 arguments : string &apos; --database &apos; , default set to DEFAULT _ DB _ ALIAS ,
and help set to string &apos; Nominates a database to synchronize . Defaults to the &quot; default &quot; database . &apos; . define the method handle with 2 arguments : self and unpacked dictionary options .
call the method warnings.warn with 2 arguments : string &quot; The syncdb command will be removed in Django 1.9 &quot; and RemovedInDjango19Warning .
call the function call _ command with 2 arguments : string migrate and unpacked dictionary options .
try ,
call the method apps.get _ model with 2 arguments : string &apos; auth &apos; and string &apos; Permission &apos; .
if LookupError exception is caught .
return nothing .
call the function get _ user _ model , substitute the result for UserModel .
if return value of the method UserModel . _ default _ manager.exists is false and value under the &apos; interactive &apos; key of the options dictionary is true ,
msg is a tuple containing string &quot; \ nYou have installed Django &apos;s auth system , and don &apos;t have any superusers defined . \ nWould you like to create one now ? ( yes / no ) : &quot; .
call the method input with an argument msg and store the result in confirm .
endless loop ,
if confirm is not equal to string &apos; yes &apos; or string &apos; no &apos; ,
query a string &apos; Please enter either &quot; yes &quot; or &quot; no &quot; : &apos; and store the result in confirm .
skip this loop iteration .
if confirm equals string &apos; yes &apos; ,
call the function call _ command with 3 arguments : string &quot; createsuperuser &quot; , interactive is boolean True ,
and database set to value under the &apos; database &apos; key of the options dictionary. break the loop execution .
import module logging .
import module sys .
import module os .
from django.conf import settings into default name space .
from django.core.management.base import BaseCommand into default name space .
from django.test.utils import get _ runner into default name space .
derive class Command from the BaseCommand base class .
help is a string &apos; Discover and run tests in the specified modules or the current directory . &apos; .
requires _ system _ checks is boolean False .
define the method _ _ init _ _ with an argument self .
self.test _ runner is None .
call the method _ _ init _ _ form the base class of the Command class .
define the method run _ from _ argv with arguments self and argv .
option is a string &apos; --testrunner = &apos; .
for arg in argv list without the first two elements ,
if arg starts with options ,
get the length of the options , use it as a starting index for the slicing arg list , substitute it for self.test _ runner .
break the loop execution .
call the run _ from _ argv function from the base class of the Command class with argv as a argument , .
define the method add _ arguments with arguments self and parser .
call the method parser.add _ argument with 4 arguments : string &apos; args &apos; , metavar set to string &apos; test _ label &apos; , nargs set to string &apos; * &apos; ,
and help is a string &apos; Module paths to test ; can be modulename , modulename.TestCase or modulename.TestCase.test _ method &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --noinput &apos; , action set to &apos; store _ false &apos; , dest set to &apos; interactive &apos; ,
default set to boolean True , help set to string &apos; Tells Django to NOT prompt the user for input of any kind . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --failfast &apos; , action set to string &apos; store _ true &apos; , dest set to &apos; failfast &apos; ,
default set to boolean False and help set to string &apos; Tells Django to stop running the test suite after first failed test . &apos; . call the method parser.add _ argument with 4 arguments : string &apos; --testrunner &apos; , action set to string &apos; store &apos; , dest set to &apos; testrunner &apos; ,
and help set to a string &apos; Tells Django to use specified test runner class instead of the one specified by the TEST _ RUNNER setting . &apos; . call the method parser.add _ argument with 5 arguments : string &apos; --liveserver &apos; , action set to string &apos; store &apos; , dest set to &apos; liveserver &apos; ,
default set to None and help set to string &apos; Overrides the default address where the live server ( used &apos; &apos; with LiveServerTestCase ) is expected to run from . The default value is localhost : 8081 . &apos; call the function get _ runner with arguments settings and self.test _ runner , substitute the result for test _ runner _ class .
if test _ runner _ class has an &apos; option _ list &apos; attribute ,
raise an RuntimeError exception with an argument string &quot; The method to extend accepted command-line arguments by the &quot;
&quot; test management command has changed in Django 1.8 . Please create an add _ arguments class method to achieve this . &quot; if test _ runner _ class has an attribute &apos; add _ arguments &apos; ,
call the method test _ runner _ class.add _ arguments with an argument parser .
define the method execute with 3 arguments self , unpacked list args and unpacked dictionary options .
if value under the &apos; verbosity &apos; key of the options dictionary is greater than zero ,
call the method logging.getLogger with an argument string &apos; py.warnings &apos; , substitute the result for logger .
call the method logging.StreamHandler , substitute the result for handler .
call the method logger.addHandler with an argument handler .
call the method execute form the base class of the class Command , with 2 arguments : unpacked list args and unpacked dictionary options .
if value under the &apos; verbosity &apos; key of the options dictionary is greater than zero ,
call the method logger.removeHandler with an argument handler .
define the method handle with 3 arguments : self , unpacked list test _ labels and unpacked dictionary options .
from django.conf import settings into default namespace .
from django.test.utils import get _ runner into default namespace .
call the method get _ runner with 2 arguments : settings and value under the &apos; testrunner &apos; key of the options dictionary , substitute it for the TestRunner .
if value under the &apos; liveserver &apos; key of the options dictionary is not None ,
substitute value under the &apos; liveserver &apos; key of the options dictionary for value under the &apos; DJANGO _ LIVE _ TEST _ SERVER _ ADDRESS &apos; key of the os.environ dictionary .
delete the value under the &apos; liveserver &apos; key of the options dictionary .
test _ runner is an instance of TestRunner class , called with an argument unpacked dictionary options .
call the method test _ runner.run _ tests with an argument test _ labels , substitute it for failures .
if failures is true ,
exit the program with failures converted to boolean as a message .
from django.core.management import call _ command into default name space .
from django.core.management.base import BaseCommand into default name space .
from django.db import connection into default name space .
derive class Command from the BaseCommand base class .
help is a string &apos; Runs a development server with data from the given fixture ( s ) . &apos; .
args is a string &apos; &#91; fixture ... &#93; &apos; .
requires _ system _ checks is boolean False .
define the method with self class instance and parser as arguments .
call parser.add _ argument method with &apos; args &apos; , metavar set to string &apos; fixture &apos; , nargs set to string &apos; * &apos; and help set to string &apos; Path ( s ) to fixtures to load before running the server . &apos; .
call parser.add _ argument method with &apos; --noinput &apos; , action set to string &apos; store _ false &apos; , dest set to string &apos; interactive &apos; ,
default set to boolean True and help set to string &apos; Tells Django to NOT prompt the user for input of any kind . &apos; . call the parser.add _ argument with string &apos; --addrport &apos; , default set to an empty string and help as string &apos; Port number or ipaddr : port to run the server on . &apos; .
call parser.add _ argument method with &apos; --ipv6 &apos; , string &apos; -6 &apos; , action set to string &apos; store _ true &apos; , dest set to string &apos; use _ ipv6 &apos; ,
default set to boolean False and help set to string &apos; Tells Django to use an IPv6 address . &apos; . define the method handle with self class instance , list of arguments fixture _ labels and dictionary options as arguments .
get the value under the key &apos; verbosity &apos; of options dictionary , substitute it for verbosity .
get the value under the key &apos; interactive &apos; of options dictionary , substitute it for interactive .
call the method connection.creation.create _ test _ db with verbosity set to verbosity , autoclobber set to inverse value of interactive ,
serialize set to boolean False , substitute the return value for db _ name. call the method call _ command with 3 arguments , string &apos; loaddata &apos; , unpacked list fixture _ labels and unpacked dictionary containing 1 element : verbosity for &apos; verbosity &apos; .
replace &apos; % r &apos; from string &apos; \ nServer stopped . \ nNote that the test database , % r , has not been deleted . You can explore it on your own . &apos; , with db _ name , substitute it for shutdown _ message .
substitute connection.features.test _ db _ allows _ multiple _ connections for use _ threading .
call the function call _ command with 6 arguments , string &apos; runserver &apos; , addrport as the value under the &apos; addrport &apos; key of options dictionary ,
from _ _ future _ _ import unicode _ literals into default name space .
import module warnings .
from django.core.management.commands.check import Command as CheckCommand into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
derive class Command from CheckCommand base class .
concatenate CheckCommand.help to string &apos; Deprecated . Use &quot; check &quot; command instead . &apos; , substitute it for help .
define the method handle with self class instance and dictionary pair of elements options as arguments .
call the method warnings.warn with string &apos; &quot; validate &quot; has been deprecated in favor of &quot; check &quot; . &apos; and RemovedInDjango19Warning as arguments .
call the handle function with dictionary pair of elements options from the base class of the class Command .
from _ _ future _ _ import unicode _ literals into default name space .
import module codecs .
import module os .
import module re .
import module warnings .
from django.apps import apps into default name space .
from django.conf import settings into default name space .
from django.core.management.base import CommandError into default name space .
from django.db import models and router into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
define the function check _ for _ migrations with 2 arguments : app _ config and connection .
from django.db.migrations.loader import MigrationLoader into default name space .
loader is an instance of MigrationLoader class , created with an argument connection .
if app _ config.label is contained in loader.migrated _ apps ,
raise an CommandError exception , with an arguent : string &quot; App &apos; % s &apos; has migrations . Only the sqlmigrate and sqlflush commands can be used when an app has migrations . &quot; , where &apos; % s &apos; is replaced for app _ config.label.
define the function sql _ create with 3 arguments : app _ config , style and connection .
call the function check _ for _ migrations with an arguments app _ config , connection .
if value under the &apos; ENGINE &apos; key of the connection.settings _ dict dictionary equals a string &apos; django.db.backends.dummy &apos; ,
raise an CommandError exception with an argument string &quot; Django doesn &apos;t know which syntax to use for your SQL statements , \ n &quot;
&quot; because you haven &apos;t properly specified the ENGINE setting for the database . \ n see : https : / / docs.djangoproject.com / en / dev / ref / settings / # databases &quot; . call the method app _ config.get _ models with an argument include _ auto _ created set to boolean True , substitute it for app _ models .
final _ output is an empty list .
call the method connection.introspection.table _ names , substitute the result for tables .
if model is not contained in app _ models for every model in return value of the connection.introspection.installed _ models function return value ,
add model to a set , substitute the result for known _ models. pending _ references is an empty dictionary .
for every model in return value of the function router.get _ migratable _ models , called with arguments :
app _ config , connection.alias and include _ auto _ created set to boolean True. call the method connection.creation.sql _ create _ model with arguments model , style and known _ models , substitute the result for output and references .
call the method final _ output.extend with an argument output .
for every refto and refs in return value of the method references.items ,
call the method pending _ references.setdefault with 2 arguments : refto and an empty list , extend the result with refs .
if refto is contained in known _ models ,
call the method connection.creation.sql _ for _ pending _ references with 3 arguments : refo , style and pending _ references ,
use the result as an argument for the call to the method final _ output.extend. call the method connection.creation.sql _ for _ pending _ references with 3 arguments : refo , style and pending _ references ,
use the result as an argument for the call to the method final _ output.extend. add model to known _ models set .
call the method pending _ references.keys , put the result into a set and substitute it for not _ installed _ models .
if not _ installed _ models is true ,
alter _ sql is an empty list .
for every model in not _ installed _ models ,
for every sql in return value of the function connection.creation.sql _ for _ pending _ references called with arguments : model , style ,
and pending _ references append sql to the string &apos; -- &apos; , put the results in a list , extend alter _ sql with the result. if alter _ sql ,
append string &apos; -- The following references should be added but depend on non-existent tables : &apos; to the final _ output .
extend final _ output with alter _ sql .
return final _ output .
define the function sql _ delete with 4 arguments : app _ config , style , connection and close _ connection set to boolean True .
call the function check _ for _ migrations with arguments app _ config and connection .
try ,
call the method connection.cursor , substitute the result for cursor .
if Exception exception is caught ,
cursor is None .
try ,
if cursor is true ,
call the method connection.introspection.table _ names with an argument cursor , substitute the result for table _ names .
if not ,
table _ names is an empty list .
output is an empty list .
to _ delete is an empty set .
references _ to _ delete is an empty dictionary .
call the method router.get _ migratable _ models with argument : app _ config , connection.alias and include _ auto _ created set to True , substitute the result for app _ models .
for every model in app _ models ,
if cursor is true and return value of the function connection.introspection.table _ name _ converter called with an arugment : model . _ meta.db _ table is contained in table _ names ,
substitute model . _ meta for opts .
for every f in opts.local _ fields ,
if f.rel and f.rel.to are not contained in to _ delete ,
call the method references _ to _ delete.setdefault with arguments : r.rel.to and an empty list , append to the result tuple with 2 entries : model and f .
call the method to _ delete.add with an argument model .
for every model in app _ models ,
if return value of the function connection.introspection.table _ name _ converter called with an arugment : model . _ meta.db _ table is contained in table _ names
call the method connection.creation.sql _ destroy _ model with arguments : model , references _ to _ delete and style , extend with the result the list output .
finally perform ,
if both cursor and close _ connection are true ,
call the method cursor.close ,
call the method connection.close ,
return reversed list output .
define the function sql _ flush with 4 arguments : style , connection , only _ django set to boolean False ,
if only _ django ,
call the method connection.introspection.django _ table _ names with an argument boolean true , substitute the result for tables .
if not ,
call the method connection.introspection.table _ names , substitute the result for tables .
call the method connection.introspection.sequence _ list if reset _ sequences is true , substitute the result for seqs , if not , seqs is an empty tuple .
call the method connection.ops.sql _ flush with arguments : style , tables , seqs and allow _ cascade , substitute the result for statements .
return statements .
define the function sql _ custom with 3 arguments : app _ config , style and connection .
call the method check _ for _ migrations with arguments : app _ config and connection .
output is an empty list .
call the method router.get _ migratable _ models with arguments app _ config and connection.alias.
for every model in app _ models ,
call the function custom _ sql _ for _ model with 3 arguments : model , style and connection , extend the output with the result .
return output .
define the function sql _ indexes with 3 arguments : app _ config , style and connection .
call the function check _ for _ migrations with an arguments app _ config and connection .
outut is an empty list .
for model in router.get _ migratable _ models method return value , called with 3 arguments : app _ config , connection.alias ,
and include _ auto _ created set to boolean True , call the method connection.creation.sql _ indexes _ for _ model with arguments model and style , extend output with the result .
return output .
define the function sql _ destroy _ indexes with 3 arguments : app _ config , style and connection .
call the function check _ for _ migrations with arguments app _ config and connection .
output is an empty list .
for model in return value of the method router.get _ migratable _ models with arguments app _ config , connection.alias ,
and include _ auto _ created set to boolean True , call the method connection.creation.sql _ destroy _ indexes _ for _ model with arguments model and style , extend the output with the result .
return output .
define the function sql _ all with 3 arguments : app _ config , style and connection .
call the function check _ for _ migrations with arguments app _ config and connection .
use the app _ config , style and connection as arguments for the call to the sql _ create , sql _ custom and sql _ indexes functions , append the results respectively , return the result .
define the function _ split _ statements with an argument content .
call the function re.compile with an argument raw string &quot; ^ ( ( ? : &apos; &#91; ^ &apos; &#93; * &apos; &#124; &#91; ^ &apos; &#93; ) * ? ) -- . * $ &quot; , substitute the result for comment _ re .
statements is an empty list .
statement is an empty list .
split content by newline character , for every line in result ,
call the method comment _ re.sub with an arguments : raw string &apos; \ 1 &apos; and line , strip the whitespaces surrounding the result , return it .
if cleaned _ line is false ,
skip this loop iteration ,
append cleaned _ lien to statement .
if cleaned _ line ends with &apos; ; &apos; character ,
join statements into a string , separated by white spaces , append it to statements .
statement is an empty list .
return statements .
define the function custom _ sql _ for _ model with 3 arguments : app _ config , style and connection .
substitute model . _ meta for opts .
app _ dirs is an empty list .
call the method apps.get _ app _ config with an argument model . _ met.app _ label , substitute path field of the result for app _ dir .
join app _ dir and string &apos; sql &apos; into a file path , use the result as an argument for the call to the function os.path.normpath ,
append the result to app _ dirs. join app _ dir and string &apos; models / sql &apos; into a file path , use the result as an argument for the call to the function os.path.normpath ,
append the result to old _ app _ dirs. if file path old _ app _ dir exists ,
call the function warnings.warn with 2 arguments : string &quot; Custom SQL location &apos; &lt; app _ label &gt; / models / sql &apos; is deprecated , use &apos; &lt; app _ label &gt; / sql &apos; instead . &quot; and RemovedInDjango19Warning .
append old _ app _ dir to app _ dirs .
output is an empty list .
if opts.managed is true ,
for every f in opts.local _ fields that has an &apos; post _ create _ sql &apos; attribute , append f to a list , substitute the resulting list for post _ sql _ fields .
for every f in post _ sql _ fields ,
call the method f.post _ create _ sql with arguments : style and model . _ meta.db _ table , extend the output with the result .
once split at the &apos; .&apos; value under the &apos; ENGINE &apos; key of the connection.settings _ dict dictionary , substitute last element of the result for backend _ name .
sql _ files is an empty list .
for every app _ dir in app _ dirs ,
join into a file path : app _ dir and string % s . % s.sql , where &apos; % s &apos; is replaced by opts.model _ name and backend _ name , respectively ,
append the result to sql _ files. join into a file path : app _ dir and string % s . % s.sql , where &apos; % s &apos; is replaced by opts.model _ name , append the result to sql _ files .
for every sql _ file in sql _ files ,
if file path sql _ file exists ,
call the function codecs.open with 3 arguments : sql _ file , string &apos; r &apos; and encoding set to settings.FILE _ CHARSET , with the result renamed to fp ,
call the method connection.ops.prepare _ sql _ script with 2 arguments : return value of the function fp.read ,
and _ allow _ fallback set to boolean True , extend the output with the result. return output .
define the function emit _ pre _ migrate _ signal with 4 arguments : create _ models , verbosity , interactive and db .
for app _ config in return value of the method apps.get _ app _ configs ,
if app _ config.models _ module is None ,
skip this loop iteration ,
if verbosity is greater or equal to integer 2 ,
replace &apos; % s &apos; in string &quot; Running pre-migrate handlers for application % s &quot; with app _ config.label , print it to the standard output .
call the method models.signals.pre _ migrate.send with 5 arguments : sender set to app _ config , app _ config set to app _ config ,
verbosity set to verbosity , interactive set to interactive and using set to db. call the method models.signals.pre _ syncdb.send with 6 arguments : sender set to app _ config.models _ module ,
app set to app _ config.models _ module , create _ models set to create _ models , verbosity set to verbosity , interactive set to interactive , and db set to db. define the function emit _ post _ migrate _ signal with 4 arguments : created _ models , verbosity , interactive and db .
for app _ config in return value of the method apps.get _ app _ configs ,
if app _ config.models _ module is None ,
skip this loop iteration ,
if verbosity is greater or equal to integer 2 ,
replace &apos; % s &apos; in string &quot; Running post-migrate handlers for application % s &quot; with app _ config.label , print it to the standard output .
call the method models.signals.post _ migrate.send with 5 arguments : sender set to app _ config , app _ config set to app _ config ,
verbosity set to verbosity , interactive set to interactive and using set to db. call the method models.signals.post _ syncdb.send with 6 arguments : sender set to app _ config.models _ module ,
import module cgi .
import module errno .
import module mimetypes .
import module os .
import module posixpath .
import module re .
import module shutil .
import module stat .
import module sys .
import module tempfile .
from os import path into default name space .
import module django .
from django.template import Template and Context into default name space .
from django.utils import archive into default name space .
from django.utils.six.moves.urllib.request import urlretrieve into default name space .
from django.utils. _ os import rmtree _ errorhandle into default name space .
from django.core.management.base import BaseCommand and CommandError into default name space .
from django.core.management.utils import handle _ extensions into default name space .
call the function re.compile with 2 arguments : string &apos; ^ ( &#91; a-z &#93; ) : &apos; and re.I , substitute the result for _ drive _ re .
call the function re.compile with 2 arguments : string &apos; ^ ( &#91; a-z &#93; ) &#91; : &#124; &#93; &apos; and re.I , substitute the result for _ url _ drive _ re .
derive the class TemplateCommand from the BaseCommand base class .
requires _ system _ checks is boolean False .
can _ import _ settings is boolean False .
url _ schemes is list of strings &apos; http &apos; , &apos; https &apos; and &apos; ftp &apos; .
leave _ locale _ alone is boolean True .
define the method add _ aguments with arguments self and parser .
call the method parser.add _ argument with 2 arguments : string &apos; name &apos; and help set to string &apos; Name of the application or project . &apos; .
call the method parser.add _ argument with 3 arguments : string &apos; directory &apos; , nargs set to &apos; ? &apos; and help set to string &apos; Name of the application or project . &apos; .
call the method parser.add _ argument with 2 arguments : string &apos; --template &apos; and help set to string &apos; The path or URL to load the template from . &apos; .
call the method parser.add _ argument with 6 arguments : string &apos; --extension &apos; , string &apos; -e &apos; , dest set to string &apos; extensions &apos; ,
action set to &apos; append &apos; , default is a list containing string &apos; py &apos; and help set to string : &apos; The file extension ( s ) to render ( default : &quot; py &quot; ) . Separate multiple extensions with commas , or use -e multiple times . &apos; . call the method parser.add _ argument with 6 arguments : string &apos; --name &apos; , string &apos; -n &apos; , dest set to string &apos; files &apos; ,
action set to string &apos; append &apos; , default as an empty list and help set to a string : &apos; The file name ( s ) to render . Separate multiple extensions with commas , or use -n multiple times . &apos; . define the method handle with 5 arguments : self , app _ or _ project , name , target set to None and unpacked dictionary options .
substitute app _ or _ project for self.app _ or _ project .
self.paths _ to _ remove is an empty list .
substitute value under the &apos; verbosity &apos; key of the options dictionary for self.verbosity.
call the method self.validate _ name with 2 arguments name and app _ or _ project .
if target is None ,
join the current working directory and name into a file path , substitute it for top _ dir .
try ,
make a directory top _ dir .
if OSError renamed to e , exception is caught ,
if e.errno equals errno.EEXIST ,
replace &apos; % s &apos; in string &quot; &apos; % s &apos; already exists &quot; with top _ dir , substitute it for message .
if not ,
substitute e for message .
raise an CommandError exception with an argument message .
if not ,
ge the absolute path of the return value of the function path.expanduser with the argument target , substitute it for top _ dir .
if file path top _ dir doesnt exists ,
raise an CommandError exception with an argument string &quot; Destination directory &apos; % s &apos; does not exist , please create it first . &quot; ,
where &apos; % s &apos; is replaced with top _ dir. call the function handle _ extensions with 2 arguments : value under the &apos; extensions &apos; key of the options dictionary ,
and ignored as an empty tuple , convert the result into a tuple and substitute it for extensions. extra _ files is an empty list .
for every file in value under the &apos; files &apos; key of the options dictionary .
split file by &apos; , &apos; character , apply on its every element a lambda function which takes an argument x ,
and returns x striped of the surrounding whitespaces , extend the extra _ files with the mapped list. if self.verbosity is greater or equal to integer 2 ,
call the method self.stdout.write , with an argument string &quot; Rendering % s template files with extensions : % s \ n &quot; ,
where &apos; % s &apos; is replaced with app _ or _ project and extensions joined into a string , separated by a string &apos; , &apos; . call the method self.stdout.write , with an argument string &quot; Rendering % s template files with filenames : % s \ n &quot; ,
where &apos; % s &apos; is replaced with app _ or _ project and extra _ files joined into a string , separated by a string &apos; , &apos; . append string &apos; _ name &apos; to app _ or _ project , substitute it for base _ name .
append string &apos; _ template &apos; to app _ or _ project , substitute it for base _ subdir .
append string &apos; _ directory &apos; to app _ or _ project , substitute it for base _ directory .
if second last element of django.VERSION is not equal to a string &apos; final &apos; ,
docs _ version is a string &apos; dev &apos; .
if not ,
convert first 2 elements of django.VERSION into a strings , join them together , separated by a &apos; .&apos; , substitute the result for docs _ version .
context is an instance of a class Context , created with 2 arguments : dictionary created by apllying options to unpacked dictionary containing 3 entries :
name for base _ name , top _ dir for base _ directory and docs _ version for &apos; docs _ version &apos; and autoescape set to boolean False. from django.conf import settings into a default name space ,
if settings.configured is false ,
call the method settings.configure.
call the method self.handle _ template with 2 arguments : value under the &apos; template &apos; key of the options dictionary and base _ subdir .
increment length of template _ dir by one and substitute it for prefix _ length .
for every root , dirs and files in subdirectory tree starting from the base dir template _ dir ,
slice root starting from the prefix _ length index to the end , substitute it for path _ rest .
call the method path _ rest.replace with arguments base _ name and name , substitute the result for relative _ dir .
if relative _ dir is true ,
join top _ dir and relative _ dir into a file path , substitute it for target _ dir .
if target _ dir path doesnt exists ,
make target _ dir directory ,
for dirname in dirs ,
if dirname starts with character &apos; .&apos; or dirname equals a string &apos; _ _ pycache _ _ &apos; ,
remove dirname key from dirs .
for every filename in files ,
if filename ends with &apos; .pyo &apos; , &apos; .pyc &apos; or &apos; .py.class &apos; ,
skip this loop iteration ,
join root and filename into a file path , substitute it for old _ path .
join top _ dir , relative _ dir and return value of the function filename.replace called with 2 arguments : base _ name and name ,
into a file path , substitute it for new _ path. if new _ path file path exists ,
raise a CommandError exception with an argument :
string &quot; % s already exists , overlaying a project or app into an existing directory won &apos;t replace conflicting files &quot; , where &apos; % s &quot; is replaced with new _ path. open old _ path file in &apos; rb &apos; mode , with file descriptor renamed to template _ file ,
call the method template _ file.read , substitute it for content .
if filename ends with extensions or filename is contained in extra _ files ,
call the method content.decode with an argument string &apos; utf-8 &apos; , substitute it for content .
template is an instance of Template class , created with an argument content .
call the method template.render with an argument context , substitute it for content .
call the method content.encode with an argument string &apos; utf-8 &apos; , substitute it for content .
open new _ path file in &apos; wb &apos; mode , with file descriptor renamed to new _ file ,
write content to new _ file file .
if self.verbosity is greater or equal to integer 2 ,
replace &apos; % s &apos; in string &quot; Creating % s \ n &quot; with new _ path , write it to the self.stdout stream .
try ,
call the function shutil.copymode with arguments old _ path and new _ path .
call the method self.make _ writeable with an argument new _ path .
if OSError exception is caught ,
replace &apos; % s &apos; in string &quot; Notice : Couldn &apos;t set permission bits on % s . You &apos;re probably using an uncommon filesystem setup . No problem . &quot; ,
with new _ path and self.style.NOTICE , respectively , write it to self.stderr stream. if self.paths _ to _ remove is true ,
if self.verbosity is greater or equal to integer 2 ,
write string &quot; Cleaning up temporary files . \ n &quot; to self.stdout stream .
for every path _ to _ remove in self.paths _ to _ remove ,
if path _ to _ remove is file ,
remove file path _ to _ remove ,
if not ,
call the function shutil.rmtree with 2 arguments : path _ to _ remove and onerror set to rmtree _ errorhandler .
define the method handle _ template with 3 arguments : self , template and subdir .
if template is None ,
join first element of django . _ _ path _ _ , string &apos; conf &apos; and subdir into a valid file path , return it .
if not ,
if template starts with a string &apos; file : / / &apos; ,
remove first 7 elements form template .
call the method path.expanduser with an argument template , substitute it for expanded _ template .
call the method path.normpath with an argument expanded _ template , substitute it for expanded _ template .
if expanded _ template is a directory ,
return expanded _ template .
call the method self.is _ url with an argument template , if it evaluates to true ,
call the method self.download with an argument template , substitute the result for absolute _ path .
if not ,
get the absolute file path of the expanded _ template , substitute it for absolute _ path .
if file path absolute _ path exists ,
call the method self.extract with an argument absolute _ path , return the result .
raise an CommandError exception with an argument string &quot; couldn &apos;t handle % s template % s . &quot; , replace &apos; % s &apos; with self.app _ or _ project and template .
define validate _ name with 3 arguments : self , name and app _ or _ project .
if name is None ,
raise an CommandError exception with an argument string &quot; you must provide % s % s name &quot; , where &apos; % s &apos; is replaced with string &apos; an &apos; ,
and app _ or _ project if app _ or _ project equals to string &apos; app &apos; , if not , it is replaced with &apos; a &apos; and app _ or _ project. call the method re.search with 2 arguments : raw string &apos; ^ &#91; _ a-zA-Z &#93; \ w * $ &apos; and name , if it evaluates to false ,
call the method re.search with 2 arguments : raw string &apos; ^ &#91; _ a-zA-Z &#93; &apos; and name , if it evaluates to false ,
message is a string &apos; make sure the name begins with a letter or underscore &apos; .
if not ,
message is a string &apos; use only numbers , letters and underscores &apos; .
raise an CommandError with an argument string &quot; % r is not a valid % s name . Please % s . &quot; , were &apos; % r &apos; is replaced with name ,
and &apos; % s &apos; is replaced with app _ or _ project and message , respectively. define the method download with arguments self and url .
define the function cleanup _ url with an argument url .
strip url of surrounding &apos; / &apos; characters , substitute it for tmp .
split tmp at &apos; / &apos; character , substitute the last element of the result for filename .
if url ends with &apos; / &apos; character ,
append &apos; / &apos; to tmp , substitute it for display _ url .
if not ,
substitute url for display _ url .
return filename and display _ url .
replace &apos; % s &apos; in string &apos; django _ % s _ template _ &apos; with self.app _ or _ project .
call the function tempfile.mkdtemp with arguments : prefix set to prefix and suffix set to string &apos; _ download &apos; .
append the tempdir to self.paths _ to _ remove .
call the function cleanup _ url with an argument url , assign the result to filename and display _ url , respectively .
if self.verbosity is greater or equal to integer 2 ,
replace &apos; % s &apos; in string &quot; Downloading % s \ n &quot; , with display _ url , write it to self.stdout stream .
try ,
call the function urlretrieve with arguments url and tempdir and filename joined into a file path , assign the result to the _ path , and info , respectively .
if IOErro , renamed to e , exception is caught ,
raise an CommandError exception with an argument string &quot; couldn &apos;t download URL % s to % s : % s &quot; , where &apos; % s &apos; is replaced with url ,
filename and e. split the _ path at the &apos; / &apos; character , substitute last element of the result for used _ name .
get the value under the &apos; content-disposition &apos; key of the info dictionary , substitute it for content _ disposition .
if content _ disposition is true ,
call the method cgi.parse _ header with an argument content _ disposition , assign the result to _ and params , respectively .
get the value under the &apos; filename &apos; key of the params dictionary , if the key exists substitute it for guessed _ filename ,
if not , substitute used _ name for guessed _ filename. if not ,
substitute used _ name for guessed _ filename .
call the method self.splitext with an argument guessed _ filename , substitute the second element of the result for ext .
get the value under the &apos; content-type &apos; key of the info dictionary , substitute it for content _ type .
if ext is false and content _ type is true ,
call the method mimetypes.guess _ extension with an argument content _ type , substitute result for ext .
if ext is true ,
append ext to guessed _ filename .
if used _ name is not equal to guessed _ filename ,
join tempdir and guessed _ filename into a file path , substitute it for guessed _ path .
call the function shutil.move with arguments the _ path and guessed _ path .
return guessed _ path .
return the _ path .
define the method splitext with arguments self and the _ path .
call the method posixpath.splitext with an argument the _ path .
convert base to lowercase , if it ends with string &apos; .tar &apos; ,
take last four elements of base and append ext to it , substitute result for ext .
substitute last four elements of base for base .
return base and ext .
define the function with arguments self and filename .
replace &apos; % s &apos; in string &apos; django _ % s _ template _ &apos; with self.app _ or _ project , substitute it for prefix .
call the method tempfile.mkdtemp with 2 arguments : prefix set to prefix , suffix set to string &apos; _ extract &apos; , substitute the result for tempdir .
append tempdir to self.self.paths _ to _ remove .
if self.verbosity is greater or equal to integer 2 .
substitute &apos; % s &apos; in string &quot; Extracting % s \ n &quot; with filename , write it to self.stdout stream .
try ,
call the method archive.extract with arguments : filename and tempdir .
return tempdir .
if archive.ArchiveException or IOError , renamed to e , exception are caught ,
raise an CommandError with an argument string &quot; couldn &apos;t extract file % s to % s : % s &quot; , where &apos; % s &apos; is replaced with filename , tempdir and e .
define the method is _ url with arguments self and template .
if character &apos; : &apos; is not contained in template ,
return boolean False .
split template once at the first character &apos; : &apos; , convert the first element to lowercase and substitute it for scheme .
if scheme is countaine in self.url _ schemes return boolean True , otherwise return False .
define the method make _ writeable with arguments self and filename .
if sys.platform starts with string &apos; java &apos; ,
return nothing .
if call to the method os.access with arguments : filename and os.W _ OK , evaluates to false ,
call the function os.stat with an argument filename , substitute the result for st .
call the method stat.S _ IMODE with an argument st.st _ mode , calculate binary OR with the result and stat.S _ IWUSR , as operands ,
substitute the result for new _ permission. call the function os.chmod wiht arguments filename and new _ permissions .
from _ _ future _ _ import unicode _ literals into default name space .
import module os .
from subprocess import PIPE and Popen into default name space .
import module sys .
from django.utils.encoding import force _ text and DEFAULT _ LOCALE _ ENCODING into default name space .
from django.utils import six into default name space .
from .base import CommandError into default name space .
define the function popen _ wrapper with 2 arguments : args and os _ err _ exc _ type set to CommandError .
try ,
p is a instance of Popen class , created with 6 arguments : args , shell set to boolean False , stdout set to PIPE ,
stderr set to PIPE , close _ fds set to boolean True is os.name is not equal to &apos; nt &apos; , universal _ newlines set to boolean True. if OSError , renamed to e , exception is caught ,
call the force _ text function with 3 arguments : e.strerror , DEFAULT _ LOCALE _ ENCODING and strings _ only set to boolean True .
call the method six.reraise 3 with arguments : os _ err _ exc _ type , return value of the function os _ err _ exc _ type ,
called with string as an argument &apos; Error executing % s : % s &apos; , where &apos; % s &apos; is replaced by : first element of args and strerror , respective , and third element of the result of the function sys.exc _ info. call the method p.communicate , assign the result to output and errors , respectively .
return a tuple containing 3 entries : output , result of the function force _ text , called with 3 arguments : errors ,
DEFAULT _ LOCALE _ ENCODING and strings _ only set to boolean True and p.returncode. define the function handle _ extensions with 2 arguments : extensions set to tuple containing string &apos; html &apos; and ignored set to tuple containing string &apos; py &apos; .
ext _ list is an empty list ,
for every ext in extensions ,
delete all the whitespaces from ext , split it by &apos; , &apos; character , extend ext _ list with the result .
for every i and ext in enumerated iterable ext _ list ,
if ext doesnt start with &apos; .&apos; character ,
prepend &apos; .&apos; to the i-th element of the ext _ list .
if striped x by &apos; .&apos; character is not contained in ignored , for every x in ext _ list put x into a set , return the resulting set .
define the function find _ command with 3 arguments : cmd , path set to None and pathext set to None .
if path is None ,
call the function os.environ.get with 2 arguments : string &apos; PATH &apos; and an empty string , split the result at the os.pathsep , substitute the result for path .
if path is an instance of six.string _ types ,
path is an list containing path .
if pathext is None ,
call the method os.environ.get with 2 arguments : strings &apos; PATHEXT &apos; and &apos; .COM ; .EXE ; .BAT ; .CMD &apos; , split the result at os.pathsep , substitute it for pathext .
for ext in pathext ,
if cmd ends with ext ,
pathext is an list containing an empty string .
break the loop execution .
for every p in path ,
join p and cmd into a file path , substitute it for f .
if f is a file ,
return f .
for every ext in pathext ,
add ext to f , substitute the result for fext .
if fext is a file ,
return fext .
return None .
import module collections .
from math import ceil into default name space .
from django.utils import six into default name space .
derive the class InvalidPage from the Exception base class .
do nothing .
derive the class PageNotAnInteger from the InvalidPage base class .
do nothing .
derive the class EmptyPage from the InvalidPage base class .
do nothing .
derive the class Paginator from the object base class .
def the method _ _ init _ _ with 5 arguments : self , object _ list , per _ page , orphans set to integer 0 and allow _ empty _ first _ page set to boolean True .
substitute object _ list for self.object _ list .
convert per _ page into an integer and substitute it for self.per _ page .
convert orphans into an integer and substitute it for self.orphans.
substitute allow _ empty _ first _ page for self.allow _ empty _ first _ page .
self . _ num _ pages and self . _ count are None .
define the method validate _ number with self class instance and number as arguments .
try ,
convert number into an integer and substitute it for number
if TypeError or ValueError exceptions are caught ,
raise an exception PageNotAnInteger with string &apos; That page number is not an integer &apos; as an argument .
if number is lesser than integer 1 ,
raise an EmptyPage exception with string &apos; That page number is less than 1 &apos; as an argument .
if number is greater than self.num _ pages ,
if number equals a integer 1 and self.allow _ empty _ first _ page is true ,
do nothing .
if not ,
raise an EmptyPage exception with string &apos; That page contains no results &apos; as an argument .
return number .
define the method page with self class instance and number as arguments .
call the method self.validate _ number with an argument number , substitute it for number .
decrement number by one , multiply it with self.per _ page , substitute the result for bottom .
sum bottom and self.per _ page , substitute the result for top .
if sum of the top and self.orphans is greater or equal to self.count ,
substitute self.count for top .
call the self . _ get _ pages method with 3 arguments : self.object _ list from the bottom to the top index , number and self , return the result .
define the method _ get _ page with self class instance , unpacked list args and unpacked dictionary kwargs as arguments .
return a instance of the class Page , created with 2 arguments : unpacked list args and unpacked dictionary kwargs .
define the method _ get _ count with an argument self .
if self . _ count is None ,
try ,
substitute the return value of the method self.object _ list.count for self . _ count .
if TypeError or AttributeError exceptions are caught ,
substitute length of self.object _ list for self . _ count .
return self . _ count .
count is a property object with _ get _ count as a getter method .
define the method _ get _ num _ pages with an argument self .
if self . _ num _ pages is None ,
if self.count equals a integer 0 and self.allow _ empty _ first _ page is false ,
self . _ num _ pages is a integer 0 .
if not ,
get greater value between integer 1 and result of subtraction of self.orphans from self.count , substitute it for hits .
divide hits by a floating point number self.per _ page , convert its ceiling value to an integer and substitute it for self . _ num _ pages .
return self . _ num _ pages .
num _ pages is a property object with _ get _ num _ pages as a getter method .
define the method _ get _ page _ range with an argument self .
return all the integers from the integer 1 to the self.num _ pages .
page _ range is a property object with _ get _ page _ range as a getter method .
substitute Paginator for QuerySetPaginator .
derive the class Page from the collections.Sequence base class .
define the method _ _ init _ _ with 4 arguments : self , object _ list , number , and paginator .
substitute object _ list for self.object _ list .
substitute number for self.number.
substitute paginator for self.paginator.
define the method _ _ repr _ _ with an argument self .
return the string &apos; &lt; Page % s of % s &gt; &apos; , with occurrences of &apos; % s &apos; replaced by self.number and self.paginator.num _ pages , respectively .
define the method _ _ len _ _ with an argument self .
return the length of self.object _ list .
define the method _ _ getitem _ _ with arguments self and index .
if index is not an instance of six.integer _ types or tuple type ,
raise a TypeError exception ,
if self.object is not an instance of list type ,
convert self.object _ list to a list .
return self.object _ list element at index .
define the method has _ next with an argument self .
if self.number is lesser than self.paginator.num _ pages , return boolean True , otherwise return boolean False .
define the method has _ previous with an argument self .
if self.number is greater than integer 1 , return boolean True , otherwise return boolean False .
define the method has _ other _ pages with an argument self .
call the method self.has _ previous , if it evaluate to false , call the self.has _ next method , return the result .
define the method next _ page _ number with an argument self .
call the method self.paginator.validate _ number with self.number incremented by 1 as argument , return the result .
define the method previous _ page _ number with an argument self .
call the method self.paginator.validate _ number with self.number decremented by 1 as argument , return the result .
define the method start _ index with an argument self .
if self.paginator.count equals a integer 0 ,
return integer 0 .
decrement self.number by one , multiply it by self.paginator.per _ page , increment the result by one , return it .
define the method end _ index with an argument self .
if self.number equals to self.paginator.num _ pages ,
return self.paginator.count.
multiply self.number and self.paginator.per _ page , return the result .
import module importlib .
from django.conf import settings into default name space .
from django.utils import six into default name space .
from django.core.serializers.base import SerializerDoesNotExist into default name space .
BUILTIN _ SERIALIZERS is a dictionary containing 4 inital entries : &quot; django.core.serializers.xml _ serializer &quot; for &quot; xml &quot; ,
&quot; django.core.serializers.python &quot; for &quot; python &quot; , &quot; django.core.serializers.json &quot; for &quot; json &quot; , and &quot; django.core.serializers.pyyaml &quot; for &quot; yaml &quot; . _ serializers is an empty dictionary .
derive the class BadSerializer from the object base class .
internal _ use _ only is boolean False .
define the _ _ init _ _ method with arguments self and exception .
substitute exception for self.exception.
define the _ _ call _ _ method with arguments self , unpacked list args and unpacked dictionary kwargs .
raise an self.exception exception .
define the function register _ serializer with 3 arguments : format , serializer _ module and serializers set to None .
if serializers is None and _ serializers is false ,
call the function _ load _ serializers .
try ,
call the function importlib.import _ module with an argument serializer _ module , substitute it for module .
if ImportError , renamed to exc , exception is caught ,
ba _ serializer is a instance of BadSerializer class , created with an argument exc .
create a instance of a class BadSerializerModule from the object base class , with elements Deserializer set to bad _ serializer and Serializer set to bad _ serializer .
if serializers is None ,
substitute module for the value under the format key of the _ serializers dictionary .
if not ,
substitute module for the value under the format key of the serializers dictionary .
define the function unregister _ serializer with an argument format .
if _ serializers is false ,
call the function _ load _ serializers .
if format is not contained in _ serializers ,
raise a SerializerDoesNotExist exception with an argument format .
delete the _ serializers dictionary entry at the format key .
define the function get _ serializer with an argument format .
if _ serializers is false ,
call the function _ load _ serializers .
if format is not contained in _ serializers ,
raise a SerializerDoesNotExist exception with an argument format .
get the value under the format key of the _ serializers dictionary , return the Serializer filed of the result .
define the function get _ serializer _ formats .
if _ serializers is false ,
call the function _ load _ serializers .
convert _ serializers into a list , return it .
define the function get _ public _ serializer _ formats .
f _ serializers is false ,
call the function _ load _ serializers .
append k into a list for every k and v in return value of the six.iteritems function with an argument _ serializers ,
only if v.Serializer.internal _ use _ only is false , return the resulting list. define the function get _ deserializer with an argument format .
f _ serializers is false ,
call the function _ load _ serializers .
if format is not contained in _ serializers ,
raise a SerializerDoesNotExist exception with an argument format .
get the value under the format key of the _ serializers dictionary , return the Deserializer filed of the result .
define the function serializer with 3 arguments : format , queryset and unpacked dictionary options .
call the get _ serializer function with an argument format , call the return value object and substitute it for s .
call the s.serialize method with arguments queryset and unpacked dictionary options .
evaluate the method s.getvalue , return the result .
define the function deserialize with 3 arguments : format , stream _ or _ string and unpacked dictionary options .
call the get _ deserializer function with an argument format , substitute the result for d .
call the object d with arguments stream _ or _ string and unpacked dictionary options , return the result .
define the function _ load _ serializers .
use the global variable _ serializers .
serializers is an empty dictionary .
for every format in BUILTIN _ SERIALIZERS ,
call the function register _ serializer with 3 arguments : format , value under the format key of the BUILTIN _ SERIALIZERS dictionary and serializers .
if setting has an &quot; SERIALIZATION _ MODULES &quot; attribute ,
for every format in settings.SERIALIZATION _ MODULES ,
call the function register _ serializer with 3 arguments : format , value under the format key of the settings.SERIALIZATION _ MODULES dictionary and serializers .
substitute serializers for _ serializers .
import module warnings .
from django.db import models into default name space .
from django.utils import six into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
derive the class SerializerDoesNotExist from the KeyError base class .
do nothing .
derive the class SerializationError from the Exception base class .
do nothing .
derive the class DeserializationError from the Exception base class .
do nothing .
derive the class Serializer from the object base class .
internal _ use _ only is a boolean False .
define the method serialize with 3 arguments : self , queryset and unpacked dictionary options .
substitute options for self.options.
remove the &apos; stream &apos; key from the options dictionary and substitute it for self.stream ,
if the key doesnt exists call the six.String function and substitute the result for self.stream. remove the &apos; fields &apos; key from the options dictionary and substitute it for self.selected _ fields ,
if the key doesnt exists substitute None for self.selected _ fields. remove the &apos; use _ natural _ keys &apos; key from the options dictionary and substitute it for self.use _ natural _ keys ,
if the key doesnt exists substitute boolean False for self.use _ natural _ keys. if self.use _ natural _ keys is true ,
call the function warnings.warn with 2 arguments : string &quot; ``use _ natural _ keys`` is deprecated ; use ``use _ natural _ foreign _ keys`` instead . &quot; and RemovedInDjango19Warning .
remove the &apos; use _ natural _ primary _ keys &apos; key from the options dictionary and substitute it for self.use _ natural _ foreign _ keys ,
if the key doesnt exists substitute self.use _ natural _ keys for self.use _ natural _ foreign _ keys. remove the &apos; use _ natural _ primary _ keys &apos; key from the options dictionary and substitute it for self.use _ natural _ primary _ keys ,
if the key doesnt exists substitute boolean False for self.use _ natural _ primary _ keys. call the method self.start _ serialization
self.first is boolean True .
for every obj in queryset ,
call the self.start _ object with an argument obj .
substitute obj . _ meta.concrete _ model for concrete _ model .
for every field in concrete _ model . _ meta.local _ fields ,
if field.serialize is true ,
if field.rel is None ,
if self.selected _ fields is None or field.attname is contained in self.selected _ fields
call the method self.handle _ field with arguments obj and filed .
if not ,
if self.selected _ fields is None or last three elements of field.attname are contained in self.selected _ fields :
call the method self.handle _ fk _ field with arguments obj and field .
for every field in concrete _ model . _ meta.many _ to _ many ,
if field.serialize is true ,
if self.selected _ fields is None or field.attname is contained in self.selected _ fields ,
call the method self.handle _ m2m _ field with arguments obj and filed .
call the method self.end _ object with an argument obj .
if self.first is true ,
self.first is boolean False .
call the method self.end _ serialization .
call the method self.getvalue , return the result .
define the method start _ serialization with an argument self .
raise a NotImplementedError with an argument string &apos; subclasses of Serializer must provide a start _ serialization ( ) method &apos; .
define the method end _ serialization with an argument self .
do nothing .
define the method start _ object with argument self and obj .
raise a NotImplementedError with an argument string &apos; subclasses of Serializer must provide a start _ object ( ) method &apos; .
define the method end _ object with argument self and obj .
do nothing .
define the method handle _ field with argument self , obj and field .
raise a NotImplementedError with an argument string
define the method handle _ fk _ field with argument self , obj and field .
raise a NotImplementedError with an argument string
define the method handle _ m2m _ field with argument self , obj and field .
raise a NotImplementedError with an argument string &apos; subclasses of Serializer must provide an handle _ m2m _ field ( ) method &apos; .
define the method getvalue with an argument self .
get &apos; getvalue &apos; attribute of the self.stream object , if it exists and is callable ,
evaluate self.stream.getvalue method , return the result .
derive the class Deserializer from the six.Iterator base class .
define the method _ _ init _ _ , with 3 arguments : self , stream _ or _ string and unpacked dictionary options .
substitute options for self.options.
if stream _ or _ string is an instance of six.string _ types type .
call the function six.StringIO with an argument stream _ or _ string , substitute the result for self.stream.
if not ,
substitute stream _ or _ string for self.stream.
define the method _ _ iter _ _ with an argument self .
return self .
define the method _ _ next _ _ with an argument self .
raise a NotImplementedError with an argument string &apos; subclasses of Deserializer must provide a _ _ next _ _ ( ) method &apos; .
derive the class DeserializedObject from the object base class .
define the method _ _ init _ _ , with 3 arguments : self , m2m and data set None .
substitute obj for self.object.
substitute m2m _ data for self.m2m _ data .
define the method _ _ repr _ _ with an argument self .
return a string &quot; &lt; DeserializedObject : % s . % s ( pk = % s ) &gt; &quot; , where &apos; % s &apos; are replaced with self.object. _ meta.app _ label ,
self.object. _ meta.object _ name and self.object.pk , respectively. define the method save , with 3 arguments : self , save _ m2m set to boolean True and using set to boolean True .
call the models.Model.save _ base method with arguments self.object , using as using and raw set to boolean True .
if self.m2m.data and save _ m2m are true ,
for every accessor _ name and object _ list is return value of the method self.m2m _ data.items.
set accessor _ name of the self.object to object _ list .
self.m2m _ data is None .
define the function build _ instance with 3 arguments : Model , data and db .
obj is an instance of Model class , created with an unpacked dictionary data as argument .
if obj.pk is None , and Model has an &apos; natural _ key &apos; attribute , and Model . _ default _ manager has and &apos; get _ by _ natural _ key &apos; ,
call the method obj.natural _ key , substitute the result for natural _ key .
try ,
call the method Model . _ default _ manager.db _ manager with an argument db , on the result call the get _ by _ natural _ key with ,
an unpacked list natural _ key as argument , substitute the pk filed of the resulting object for obj.pk. if Model.DoesNotExist exception is caught ,
do nothing .
return obj .
from _ _ future _ _ import absolute _ import into default name space .
from _ _ future _ _ import unicode _ literals into default name space .
import module datetime .
import module decimal .
import module json .
import module sys .
from django.core.serializers.base import DeserializationError into default name space .
from django.core.serializers.python import Serializer as PythonSerializer into default name space .
from django.core.serializers.python import Deserializer as PythonDeserializer into default name space .
from django.utils import six into default name space .
from django.utils.timezone import is _ aware into default name space .
define the class Serializer from the PythonSerializer base class .
internal _ use _ only is boolean False .
define the method start _ serialization with an argument self .
call the method json . _ _ version _ _ .split with an argument &apos; .&apos; , if the result is respectively greater than list containing strings &apos; 2&apos; , &apos; 1&apos; and &apos; 3&apos; ,
call the method self.options.update with dictionary as an argument , containing 1 element : boolean False for &apos; use _ decimal &apos; .
self . _ current is None .
call the method self.options.copy , substitute the result for self.json _ kwargs .
remove the entry under the &apos; stream &apos; key of the self.json _ kwargs dictionary .
remove the entry under the &apos; fields &apos; key of the self.json _ kwargs dictionary .
get the value under the &apos; indent &apos; key of self.options dictionary , if it is true ,
substitute a tuple with 2 elements : characters &apos; , &apos; and &apos; : &apos; for value under the &apos; separators &apos; key of the self.json _ kwargs dictionary .
write a &apos; &#91; &apos; to the self.stream file stream .
define the method end _ serialization with an argument self .
if value under the &apos; indent &apos; key of the self.options dictionary is true ,
write a new line to the self.stream file stream .
write &apos; &#93; &apos; to the self.stream file stream .
if value under the &apos; indent &apos; key of the self.options dictionary is true ,
write a new line to the self.stream file stream .
define the method end _ object with arguments self and obj .
get the value under the &apos; indent &apos; key of the self.options dictionary , substitute it for indent .
if self.first is false ,
write &apos; , &apos; to the self.stream file stream .
if indent is false ,
write a white space to the self.stream file stream .
if indent is true ,
write new line to the self.stream file stream .
call the json.dump function with 4 arguments : return value of the method self.get _ dump _ object called with an argument obj , self.stream , cls set to DjangoJSONEncoder and unpacked dictionary self.json _ kwargs .
self . _ current is None .
define the method getvalue with an argument self .
call the getvalue method from the base class of the class PythonSerializer , return the result .
define the function Deserializer with arguments stream _ or _ string and unpacked dictionary options .
if stream _ or _ string is not an instance of bytes or six.string _ types ,
call the stream _ or _ string.read function , substitute the result for stream _ or _ string .
if stream _ or _ string is instance of bytes type ,
call the method stream _ or _ string.decode with an argument string &apos; utf-8 &apos; , substitute the result for stream _ or _ string .
try ,
call the function json.loads with an argument stream _ or _ string , substitute the result for objects .
for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options ,
yield obj as generator return value ,
if GeneratorExit exception is caught ,
raise an exception ,
if Exception , renamed to e , exception is caught ,
call the six.reraise function with 3 arguments : DeserializationError , DeserializationError called with an argument e ,
third element of the return value of the function sys.exc _ info. define the class DjangoJSONEncoder from the json.JSONEncoder base class .
define the method defalt with arguments self and o .
if o is an instance of datetime.datetime object .
call the method o.isoformat substitute the result for r .
if o.microsecond is true ,
remove 3 elements from r starting at the index 23 .
if r ends with string &apos; + 00 : 00 &apos; ,
cut the last 6 elemetns from r , append character &apos; Z &apos; to it , substitute the result for r .
return r .
otherwise if o is an instance of datetime.date object ,
call the method o.isoformat , return the result .
otherwise if o is an instance of datetime.time object ,
call the function is _ aware with an argument o , if it evaluates to true ,
raise a ValueError exception with an argument string &quot; JSON can &apos;t represent timezone-aware times . &quot; .
call the method o.isoformat substitute the result for r .
if o.microsecond is true ,
substitute first 12 elements of r for r .
return r .
otherwise if o is an instance of decimal.Decimal object ,
convert o to an string , return it .
if not ,
call the method default with an argument o from the base class of the class DjangoJSONEncoder , return the result .
substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder .
from _ _ future _ _ import unicode _ literals into default name space .
from django.apps import apps into default name space .
from django.conf import settings into default name space .
from django.core.serializers import base into default name space .
from django.db import models and DEFAULT _ DB _ ALIAS into default name space .
from django.utils.encoding import smart _ text and is _ protected _ type into default name space .
from django.utils import six into default name space .
derive Serializer from the base.Serializer base class .
internal _ use _ only is boolean True .
define the method start _ serialization with an argument self .
self . _ current is None .
self.objects is an empty list .
define the method end _ serialization with an argument self .
do nothing .
define the method start _ object with arguments self and obj .
self.current is an empty dictionary .
define the method end _ object with arguments self and obj .
call the self.get _ dum _ object method with an argument obj , use the result as an argument for the self.objects.append method .
self . _ current is None .
define the method get _ dump _ object with arguments self and obj .
data is an dictionary with 2 initial entries : return value of the smart _ text function with the argument obj . _ meta for &apos; model &apos; ,
and self . _ current for &apos; fields &apos; . if self.use _ natural _ primary _ keys is false or obj doesnt have a &apos; natural _ key &apos; attribute .
call the smart _ text function with 2 arguments : return value of the obj . _ get _ pk _ val function and string _ only set to boolean True ,
substitute it for value under the &apos; pk &apos; key of data dictionary. return data .
define handle _ field method with self , obj and field arguments .
call the method field . _ get _ val _ from _ obj with obj argument , substitute the result for value .
call the function is _ protected _ type with an argument value , if it evaluates to true ,
substitute value for field.name key of self . _ current dictionary .
if not ,
call the function field.value _ to _ string with an argument obj , substitute the result for value under the field.name key of self . _ current dictionary .
define the method handle _ fk _ field with self , obj and field arguments .
if self.use _ natural _ foreign _ keys is true and field.rel.to has an &apos; natural _ key &apos; attribute .
get field.name from the obj , substitute it for related .
if related is true ,
call the method related.natural _ key , substitute the result for value .
if not ,
value is None .
if not ,
get return value of the field.get _ attname function attribute of the obj object , substitute it for value .
substitute value for value under the field.name key of the self . _ current dictionary .
define the method handle _ m2m _ field with self , obj and field arguments .
if field.rel.through. _ meta.auto _ created is true ,
if self.use _ natural _ foreign _ keys is true and field.rel.to has an &apos; natural _ key &apos; attribute ,
m2m _ value is an lambda function with value as an argument , return value is the result of the method value.natural _ key .
if not ,
m2m _ value is a lambda function with an argument value , return value is the result of the function smart _ text called with arguments :
return value of the value . _ get _ pk _ val method and strings _ only set to boolean True. call the function m2m _ value with the argument related , for every related in itterator object generated from the attribute field.name ,
of the obj object , append the results in a list , substitute it for value under the field.name key of the self . _ current dictionary. define the method getvalue with an argument self .
return self.objects.
define the function Deserializer with arguments object _ list and unpacked dictionary options .
remove the value under the &apos; using &apos; key from the options dictionary , assign it to the db , if the entry doesnt exists ,
substitute DEFAULT _ DB _ ALIAS for db. remove the value under the &apos; ignorenonexistent &apos; key from the options dictionary , assign it to the ignore , if the entry doesnt exists ,
substitute boolean False for ignore. for every d in object _ list ,
try ,
call the function _ get _ model with an argument value under the &apos; model &apos; key of the d dictionary , substitute the result for Model .
if base.DeserializationError exception is caught ,
if ignore is true ,
skip this loop iteration ,
if not ,
raise an exception .
data is an empty dictionary ,
if &apos; pk &apos; is contained in d ,
call the method Model . _ meta.pk.to _ python with one argument : value under the &apos; pk &apos; key of dictionary d , or None if previous doesnt exists ,
substitute the result for the value under the Model . _ meta.pk.attname key of data dictionary. m2m _ data is an empty dictionary .
call the method Model . _ meta.get _ all _ field _ names , substitute the result for model _ fields .
for every field _ name and field _ value in return value of the function six.iteritems called with value under the &apos; fields &apos; key of dictionary d ,
if ignore is true and field _ name is not contained in model _ fields ,
skip this loop iteration ,
if field _ value is an instance of the str type ,
call the smart _ text function with 3 arguments : field _ value , value under the &apos; encoding &apos; key of the options dictionary or ,
settings.DEFAULT _ CHARSET if the key doesnt exists and strings _ only set to boolean True. call the Model . _ meta.get _ field method with an argument field _ name , substitute the result for field .
if field.rel is true , and field.rel is an instance of models.ManyToManyRel ,
if field.rel.to. _ default _ manager has an attribute &apos; get _ by _ natural _ key &apos; ,
define the function m2m _ convert with an argument value .
if value has an attribute &apos; _ _ iter _ _ &apos; and value is not an instance of six.text _ type ,
call the method field.rel.to. _ default _ manager.db _ manager with an argument db on the return value call the method get _ by _ natural _ key ,
with unpacked list value as an argument , return the pk field of the result. if not ,
call the method field.rel.to. _ meta.pk.to _ python with an argument value , use the result as an argument for the call to the ,
smart _ text function , return the result. if not ,
m2m _ convert is a lambda function with an argument v , return value is the result of the function smart _ text called with an argument :
return value of the method field.rel.to. _ meta.pk.to _ python called with an argument v. call the m2m _ convert function with pk as argument , for every pk in field _ value , substitute the value under the field.name key of the m2m _ data dictionary .
otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object ,
if field _ value is not None ,
if field.rel.to. _ default _ manager has an &apos; get _ by _ natural _ key &apos; attribute ,
if field _ value has an attribute &apos; _ _ iter _ _ &apos; and is not an instance of six.text _ type object ,
call the method field.rel.to. _ default _ manager.db _ manager with db as argument , call the get _ by _ natural _ key method on the result with ,
unpacked list field _ value as an argument , substitute the result for obj. get field.rel.field _ name attribute of the object obj , substitute it for value .
if field.rel.to. _ meta.pk.rel is true ,
substitute value.pk for value .
if not ,
all the method field.rel.to. _ meta.get _ field with field.rel.field _ name as argument , call the to _ python method on the result with ,
unpacked list field _ value as an argument , substitute the result for value. substitute value for value under the field.attname key of the data dictionary .
if not ,
all the method field.rel.to. _ meta.get _ field with field.rel.field _ name as argument , call the to _ python method on the result with ,
unpacked list field _ value as an argument , substitute the result for value of under the field.attname key of the data dictionary. if not ,
value under the field.attname key of the data dictionary is None .
if not ,
call the field.to _ python method with field _ value , substitute the result for field.name key of the data dictionary .
call the method base.build _ instance with arguments Model , data and db , substitute the result for obj .
call the function base.DeserializedObject with obj and m2m _ data as arguments , yield the result as the generator return value .
define the function _ get _ model with an argument model _ identifier .
try ,
call the method apps.get _ model with an argument model _ identifier .
if LookupError or TypeError exceptions are caught ,
raise an base.DeserializationError exception with an argument string &quot; Invalid model identifier : &apos; % s &apos; &quot; , where &apos; % s &apos; is replaced with model _ identifier .
import module decimal .
import module yaml .
import module sys .
from io import StringIO into default name space .
from django.db import models into default name space .
from django.core.serializers.base import DeserializationError into default name space .
from django.core.serializers.python import Serializer as PythonSerializer into default name space .
from django.core.serializers.python import Deserializer as PythonDeserializer into default name space .
from django.utils import six into default name space .
try ,
from yaml import CSafeLoader as SafeLoader into default name space .
yaml import CSafeDumper as SafeDumper into default name space .
if ImportError exception is caught ,
from yaml import SafeLoader , SafeDumper into default name space .
derive the class DjangoSafeDumper from the SafeDumper base class .
define the method represent _ decimal with arguments self and data .
call the method self.represent _ scalar with 2 arguments : string &apos; tag : yaml.org , 2002 : str &apos; and data converted into a string , return the result .
call the method DjangoSafeDumper.add _ representer with arguments decimal.Decimal and DjangoSafeDumper.represent _ decimal .
derive the class Serializer from the PythonSerializer base class .
internal _ use _ only is a boolean False .
define the method handle _ field with arguments self , obj and field .
if field is an instance of models.TimeField and filed.name attribute of obj is not None ,
get field.name attribute of obj , convert it to a string , substitute it for the value under the filed.name key of self . _ current dictionary .
if not ,
call the handle _ filed method of the base class of the Serializer class , with arguments obj and field .
define the method end _ serialization with an argument self .
call the function yaml.dump with 4 arguments : self.objects , self.stream , Dumper = DjangoSafeDumper and unpacked dictionary self.options.
define the method getvalue with an argument self .
call the getvalue method of the base class of the PythonSerializer class , return the result .
define the function Deserializer with 2 arguments : stream _ or _ string and unpacked dictionary options .
if stream _ or _ string is an instance of bytes ,
call the method stream _ or _ string.decode with string &apos; utf-8 &apos; as argument , substitute the result for stream _ or _ string .
if stream _ or _ string is an instance of the six.string _ types ,
call the function StringIO with an argument stream _ or _ string , substitute the result for stream .
if not ,
substitute stream _ or _ string for stream .
try ,
for every obj in return value of the PythonDeserializer created with 2 arguments : return value of the function yaml.load ,
with 2 arguments : stream and Loader set to SafeLoader , and unpacked dictionary options , yield one element of the itterable obj .
if exception GeneratorExit is caught ,
raise an exception .
if Exception , renamed to e , exception is caught ,
call the function six.reraise with 3 arguments : DeserializationError , return value of the DeserializationError called with an argument e ,
from _ _ future _ _ import unicode _ literals into default name space .
from django.apps import apps into default name space .
from django.conf import settings into default name space .
from django.core.serializers import base into default name space .
from django.db import models and DEFAULT _ DB _ ALIAS into default name space .
from django.utils.xmlutils import SimplerXMLGenerator into default name space .
from django.utils.encoding import smart _ text into default name space .
from xml.dom import pulldom into default name space .
from xml.sax import handler into default name space .
from xml.sax.expatreader import ExpatParser as _ ExpatParser into default name space .
derive the class Serializer from the base.Serializer base class .
define the method indent with argument self and level .
if value under the &apos; indend &apos; key of the options dictionary exists and is not None ,
get the value under the &apos; indent &apos; key of the options dictionary , multiply it with level , create a string containing number of whitespaces equal to the previous result , append it to the string containing newline character , use the result as the argument for the call to the self.xml.ignorableWhitespace method .
define the method start _ serialization with an argument self .
self.xml is a instance of SimplerXMLGenerator class created with 2 arguments : self.stream and value under the &apos; encoding &apos; key of the
options dictionary , if the key doesnt exists use settings.DEFAULT _ CHARSET instead. call the self.xml.startDocument method .
call the method self.xml.startElement with 2 arguments , string &quot; django-objects &quot; and a dictionary containing 1 element : &quot; 1.0 &quot; for &quot; version &quot; .
define the method end _ serialization with an argument self .
call the self.indent method with integer 0 as an argument .
call the method self.xml.endElement with an argument string &quot; django-objects &quot; .
call the self.xml.endDocument method .
define the method start _ object with arguments self and obj .
if &apos; _ meta &apos; is not an attribute of obj ,
raise an base.SerializationError exception with argument string &quot; Non-model object ( % s ) encountered during serialization &quot; ,
replace &apos; % s &apos; with type of the obj object. call the method self.indent with argument integer 1 .
attrs is a dictionary containing 1 entry : return value of the smart _ text function with argument obj . _ meta for &apos; model &apos; .
if self.use _ natural _ primary _ keys is false and obj doesnt have &apos; natural _ key &apos; argument .
substitute return value of the method obj . _ get _ pk _ val for obj _ pk .
if obj _ pk is not None ,
substitute the return value of the smart _ text function with an argument obj _ pk for the value under the &apos; pk &apos; key of the attrs dictionary .
call the method self.xml.startElement with arguments string &apos; object &apos; and attrs .
define the method end _ object with arguments self and obj .
call the method self.indent with argument integer 1 .
call the method self.xml.endElement with an argument string &apos; object &apos; .
define the method handle _ field with arguments self , obj and field .
call the method self.indent with argument integer 2 .
call the method self.xml.startElement with 2 arguments : string &apos; field &apos; and a dictionary containing 2 entries : field.name for &apos; name &apos; ,
and return value of the field.get _ internal _ type method for &apos; type &apos; . if field.name attribute of obj is not None ,
call the method field.value _ to _ string with an argument obj , use the result as an argument for the call the method self.xml.characters.
if not ,
call the method self.xml.addQuickElement with an argument string &apos; None &apos; .
call the method self.xml.endElement with an argument string &apos; field&apos;
define the method handle _ fk _ field with arguments self , obj and field .
call the method self . _ start _ relational _ field with an argument field .
evaluate the field.get _ attname , use the result as the name of the obj attribute to get , substitute it for related _ att .
if related _ att is not None ,
if self.use _ natural _ foreign _ keys is true and field.rel.to has an attribute &apos; natural _ key &apos; ,
get field.name attribute of the obj , substitute it for related .
call the method related.natural _ key , substitute the result for related .
for every key _ value in related ,
call the method self.xml.startElement with arguments string &apos; natural &apos; and an empty dictionary .
call the function smart _ text with argument key _ value , use the result as an argument for the call to the self.xml.characters method .
call the method self.xml.endElement with an argument string &apos; natural&apos;
if not ,
call the function smart _ text with argument related _ att , use the result as an argument for the call to the self.xml.characters method .
if not ,
call the method self.xml.addQuickElement with an argument string &apos; None &apos; .
call the method self.xml.endElement with an argument string &apos; field &apos; .
define the method handle _ m2m _ field with arguments self , obj and field .
if field.rel.through. _ meta.auto _ created is true ,
call the method self . _ start _ relational _ field with the argument field .
if self.use _ natural _ foreign _ keys is true and field.rel.to has an attribute &apos; natural _ key &apos; ,
define the function handle _ m2m with an argument value ,
call the value.natural _ key method , substitute the result for natural .
call the method self.xml.startElement with argument string &apos; object &apos; and an empty dictionary .
for every key _ value in natural ,
call the method self.xml.startElement with argument string &apos; natural &apos; and an empty dictionary .
call the function smart _ text with argument key _ value , use the result as an argument for the call to the self.xml.characters method .
call the method self.xml.startElement with an argument string &apos; natural &apos; .
call the method self.xml.startElement with an argument string &apos; object &apos; .
if not ,
define the function handle _ m2m with an argument value ,
call the self.xml.addQuickElement method with 2 arguments : string &apos; object &apos; and attr dictionary containing 1 entry :
return value of the function smart _ text with return value of the method value . _ get _ pk _ val as an argument for &apos; pk &apos; . for every relobj in iterator generated from the field.name attribute of the obj object .
call the function handle _ m2m with an argument relobj .
call the method self.xml.endElement with an argument string &apos; field &apos; .
define the method _ start _ relational _ field with arguments self and field .
call the method self.indent with argument integer 2 .
call the method self.xml.startElement with 2 arguments : string &apos; field &apos; and dictionary containing 3 entries : field.name for &apos; name &apos; ,
field.rel. _ _ class _ _ . _ _ name _ _ for &apos; rel &apos; and return value of the function smart _ text with an argument field.rel.to. _ meta for &apos; to &apos; . derive the class Deserializer from the base.Deserializer base class .
define the method _ _ init _ _ with 3 arguments : self , stream _ or _ string and unpacked dictionary options .
call the method _ _ init _ _ from the base class of the Deserializer class with arguments stream _ or _ string and unpacked dictionary options .
call the method pulldom.parse with arguments : self.stream and return value of the method self . _ make _ parser ,
substitute the result for self.event _ stream. remove the &apos; using &apos; key from the options dictionary , substitute the return value for self.db , if the key doesnt exists substitute
DEFAULT _ DB _ ALIAS for self.db. remove the &apos; ignorenonexistent &apos; key from the options dictionary , substitute the return value for self.db ,
if the key doesnt exists substitute boolean False for self.ignore. define the method _ make _ parser with an argument self .
return the instance of DefusedExpatParser class .
define the method _ _ next _ _ with an argument self .
for every event and node in self.event _ stream ,
if event equals a string &quot; START _ ELEMENT &quot; and node.nodeName equals a string &apos; object &apos; ,
call the method self.event _ stream.expandNode with an argument node .
call the method self . _ handle _ object with an argument node , return the result .
raise an StopIteration exception .
define the method _ handle _ object with arguments self and node .
call the method self . _ get _ model _ from _ node with arguments node and string &apos; model &apos; .
data is an empty dictionary .
call the method node.hasAttribute with string &apos; pk &apos; as an argument , if it evaluates to true ,
call the method node.getAttribute with an argument string &apos; pk &apos; , use the result as the argument for the call to the method , Model . _ meta.pk.to _ python with , substitute the result for value under the Model . _ meta.pk.attname key of the data dictionary .
m2m _ data is an empty dictionary .
call the method Model . _ meta.get _ all _ field _ names , substitute the result for model _ fields .
for every field _ node in return value of the method node.getElementsByTagName with an argument string &apos; field &apos; .
call the method field _ node.getAttribute with an argument string &apos; name &apos; , substitute the result for field _ name .
if field _ name is false ,
raise an base.DeserializationError exception with string &quot; &lt; field &gt; node is missing the &apos; name &apos; attribute &quot; as argument .
if self.ignore is true and field _ name is not contained in model _ fields ,
skip this loop iteration .
call the method Model . _ meta.get _ field with an argument field _ name , substitute it for field .
if field.rel is true and field.rel is an instance of models.ManyToManyRel ,
call the method self . _ handle _ m2m _ field _ node with an argument field _ node and field , substitute the result for value under the field.name key of m2m _ data dictionary .
otherwise , if field.rel is true and field.rel is an instance of models.ManyToOneRel ,
call the method self . _ handle _ fk _ field _ node with field _ node and field as arguments , substitute the result for the value under the
field.attname of the data dictionary. if not ,
call the method field _ node.getElementsByTagName with an argument string &apos; None &apos; , if it evaluates to true ,
value is None .
if not ,
call the function getInnerText with argument field _ node , on the result call the method strip , use the result as an argument for the
call to the field.to _ python method , substitute the result for value. substitute value for value under the field.name key of the data dictionary .
call the method base.build _ instance with arguments Model , data and self.db , substitute the result for obj .
call the method base.DeserializedObject with arguments obj and m2m _ data , return the result .
define the method _ handle _ fk _ field _ node with arguments self , node and field .
call the method node.getElementsByTagName with an argument string &apos; None &apos; , if it evaluates to true ,
return None .
if not ,
if field.rel.to. _ default _ manager has an atttribute &apos; get _ by _ natural _ key &apos; ,
call the method node.getElementsByTagName with the argument string &apos; natural &apos; , substitute the result for keys .
if keys is true ,
call the function getInnerText with argument k , on the result call the method strip , for every k in keys , append the results to field _ value list .
call the method field.rel.to. _ default _ manager.db _ manager with an argument self.db , on the result call the method get _ by _ natural _ key ,
with unpacked list field _ value as an argument , substitute the result for obj. get the field.rel.field _ name from the obj , substitute it for obj _ pk .
if field.rel.to. _ meta.pk.rel is true ,
substitute obj _ pk.pk for obj _ pk .
if not ,
call the function getInnerText with an argument node , call the strip method on the result , substitute the result for field _ value .
call the field.rel.to. _ meta.get _ field method with an field.rel.field _ name argument , on the result call the method to _ python ,
with field _ value as an argument , substitute the result for obj _ pk. return obj _ pk .
if not ,
call the function getInnerText with an argument node , call the strip method on the result , substitute the result for field _ value .
call the field.rel.to. _ meta.get _ field method with an field.rel.field _ name argument , on the result call the method to _ python ,
with field _ value as an argument , return the result. define the method _ handle _ m2m _ field _ node with arguments self , node and field .
if field.rel.to. _ default _ manager has an attribute &apos; get _ by _ natural _ key &apos; ,
define the function m2m _ convert with an argument n ,
call the method n.getElementsByTagName with string &apos; natural &apos; as argument , substitute result for keys .
if keys is true ,
call the function getInnerText with argument k , on the result call the method strip , for every k in keys , append the results to field _ value list .
call the method field.rel.to. _ default _ manager.db _ manager with an argument self.db , on the result call the method get _ by _ natural _ key ,
with unpacked list field _ value as an argument , substitute the field pk of the result for obj _ pk. if not ,
call the method n.getAttribute with string &apos; pk &apos; as argument , use the result as an argument for the call to the field.rel.to. _ meta.pk.to _ python method , substitute the result for obj _ pk .
return obj _ pk .
if not ,
m2m _ convert is an lambda function with an argument n , return value is the return value of the method field.rel.to. _ meta.pk.to _ python ,
called with n.getAttribute ( &apos; pk &apos; ) method. call the m2m _ convert function with an argument c , for every c in return value of the method node.getElementsByTagName ,
with an argument string &apos; object &apos; , return the result. define the method _ get _ model _ from _ node with arguments self , node and attr .
call the method node.getAttribute with an argument attr , substitute the result for model _ identifier .
if model _ identifier is false ,
raise an base.DeserializationError exception with an argument string &quot; &lt; % s &gt; node is missing the required &apos; % s &apos; attribute &quot; ,
where &apos; % s &apos; is replaced with node.nodeName and attr. try ,
call the method apps.get _ model with an argument model _ identifier , return the result .
if LookupError or TypeError exceptions are caught ,
raise an base.DeserializationError exception with an argument string &quot; &lt; % s &gt; node has invalid model identifier : &apos; % s &apos; &quot; ,
where &apos; % s &apos; is replaced with node.nodeName and attr. define the function getInnerText with an argument node .
inner _ text is an empty list .
for every child in node.childNodes ,
if child.nodeType equals to child.TEXT _ NODE or child.nodeType equals to child.CDATA _ SECTION _ NODE ,
append child.data to the inner _ text list .
otherwise if child.nodeType equals to child.ELEMENT _ NODE ,
call the function getInnerText with an argument child , use the result as an argument for the call to the method inner _ text.extend.
if not ,
do nothing .
join inner _ text elements into a string .
derive the class DefusedExpatParser from the _ ExpatParser base class .
define the method _ _ init _ _ with arguments self , unpacked list args and unpacked dictionary kwargs .
call the method _ ExpatParser . _ _ init _ _ with arguments self , unpacked list args and unpacked dictionary kwargs .
call the method self.setFeature with 2 arguments : handler.feature _ external _ ges and boolean False .
call the method self.setFeature with 2 arguments : handler.feature _ external _ pes and boolean False .
define the method start _ doctype _ decl with an arguments self , name , sysid , pubid and has _ internal _ subset .
raise an DTDForbidden exception with arguments name , sysid and pubid .
define the method entity _ decl with arguments self , name , is _ parameter _ entity , value , base , sysid , pubid and notation _ name .
raise an EntitiesForbidden exception with arguments name , value , base , sysid , pubid and notation _ name .
define the method unparsed _ entity _ decl with arguments self , name , base , sysid , pubid and notation _ name .
raise an EntitiesForbidden exception with arguments name , None , base , sysid , pubid and notation _ name .
define the method external _ entity _ ref _ handler with arguments self , context , base , sysid and pubid .
raise an ExternalReferenceForbidden exception with arguments context , base , sysid and pubid .
define the method reset with an argument self .
call the method _ ExpatParser.reset with an argumen sefl .
substitute self . _ parser for parser .
substitute self.start _ doctype _ decl for parser.StartDoctypeDeclHandler.
substitute self.entity _ decl for parser.EntityDeclHandler.
substitute self.unparsed _ entity _ decl for parser.UnparsedEntityDeclHandler.
substitute self.external _ entity _ ref _ handler for parser.ExternalEntityRefHandler.
derive the class DefusedXmlException from the ValueError base class .
define the method _ _ repr _ _ with an argument self .
convert self into a string and return it .
derive the class DTDForbidden from the DefusedXmlException base class .
define the method _ _ init _ _ with arguments self , name , sysid and pubid .
call the method _ _ init _ _ from the base class of the DTDForbidden class .
substitute name for self.name.
substitute sysid for self.sysid.
substitute pubid for self.pubid.
define the method _ _ str _ _ with an argument self .
tpl is an string &quot; DTDForbidden ( name = &apos; { } &apos; , system _ id = { ! r } , public _ id = { ! r } ) &quot; .
call the method tpl.format with an arguments self.name , self.sysid and self.pubid.
derive the class EntitiesForbidden from the DefusedXmlException base class .
define the method _ _ init _ _ with arguments self , name , value , base , sysid , pubid and notation _ name .
call the method _ _ init _ _ from the base class of the EntitiesForbidden class .
substitute name for self.name.
substitute value for self.value.
substitute base for self.base.
substitute sysid for self.sysid.
substitute pubid for self.pubid.
substitute notation _ name for self.notation _ name .
define the method _ _ str _ _ with an argument self .
tpl is an string &quot; EntitiesForbidden ( name = &apos; { } &apos; , system _ id = { ! r } , public _ id = { ! r } ) &quot; .
call the method tpl.format with an arguments self.name , self.sysid and self.pubid.
derive the class ExternalReferenceForbidden from the DefusedXmlException base class .
define the method _ _ init _ _ with arguments self , context , base , sysid and pubid .
call the method _ _ init _ _ from the base class of the ExternalReferenceForbidden class .
substitute context for self.context.
substitute base for self.base.
substitute sysid for self.sysid.
substitute pubid for self.pubid.
define the method _ _ str _ _ with an argument self .
tpl is an string &quot; ExternalReferenceForbidden ( system _ id = &apos; { } &apos; , public _ id = { } ) &quot; .
call the method tpl.format with an arguments self.sysid and self.pubid.
from _ _ future _ _ import unicode _ literals into default name space .
import module socket .
import module sys .
from wsgiref import simple _ server into default name space .
from wsgiref.util import FileWrapper
from django.core.exceptions import ImproperlyConfigured into default name space .
from django.core.management.color import color _ style into default name space .
from django.core.wsgi import get _ wsgi _ application into default name space .
from django.utils import six into default name space .
from django.utils.module _ loading import import _ string into default name space .
from django.utils.six.moves import socketserver into default name space .
_ _ all _ _ is a tuple containing 2 initial elements : strigs &apos; WSGIServer &apos; and &apos; WSGIRequestHandler &apos; .
define the funtion get _ internal _ wsgi _ application .
from django.conf import settings into default name space .
get &apos; WSGI _ APPLICATION &apos; attribute from the settings , substitute it for app _ path .
if app _ path is None ,
call the function get _ wsgi _ application , return the result .
try ,
call the import _ string with app _ path as an argument , return the result .
if ImportError , rename it to e , exception is caught ,
msg is a tuple containing one initial entry : a string &quot; WSGI application &apos; % ( app _ path ) s &apos; could not be loaded ; Error importing module : &apos; % ( exception ) s &apos; &quot; , where &apos; % ( app _ path ) s &apos; is replaced by app _ path and &apos; % ( exception ) s &apos; is replaced by e .
call the function six.reraise with 3 arguments : ImproperlyConfigured , ImproperlyConfigured ( msg ) and third element of return value of the function sys.exc _ info .
derive the class WSGIServer from simple _ server.WSGIServer and object base classes .
request _ queue _ size is integer 10 .
define the _ _ init _ _ method with 3 arguments : self , unpacked list args and unpacked dictionary * * kwargs .
pop value under the &apos; ipv6 &apos; key of the kwargs dictionary , if it is true ,
substitute socket.AF _ INET6 for self.address _ family .
call the _ _ init _ _ method from the base class of the WSGIServer class , with 2 arguments : unpacked list args and unpacked dictionary kwargs .
define the function server _ bind with an argument self .
call the server _ bind method from the base class of the WSGIServer class .
call the self.setup _ environ method .
derive the class WSGIRequestHandler from simple _ server.WSGIRequestHandler and object base classes .
define the _ _ init _ _ method with 3 arguments : self , unpacked list args and unpacked dictionary * * kwargs .
call the color _ style method , substitute the result for self.style.
call the _ _ init _ _ method from the base class of the WSGIRequestHandler class , with 2 arguments : unpacked list args and unpacked dictionary kwargs .
define the function address _ string with an argument self .
return the first element of self.client _ address .
define the function server _ bind with an argument self .
msg is a string &quot; &#91; % s &#93; % s \ n &quot; , where &apos; % s &apos; are replaced with return value of the method self.log _ date _ time _ string and formated args .
if first element of the second row of args equals a string &apos; 2&apos; ,
call the self.style.HTTP _ SUCCESS with an argument msg , substitute it for msg .
otherwise if first element of second row of args equals a string &apos; 1&apos; ,
call the self.style.HTTP _ INFO with an argument msg , substitute it for msg .
otherwise if second element of args equals a string &apos; 304 &apos; ,
call the self.style.HTTP _ NOT _ MODIFIED with an argument msg , substitute it for msg .
otherwise if first element of second row of args equals a string &apos; 3&apos; ,
call the self.style.HTTP _ REDIRECT with an argument msg , substitute it for msg .
otherwise if second element of args equals a string &apos; 404 &apos; ,
call the self.style.HTTP _ NOT _ FOUND with an argument msg , substitute it for msg .
otherwise if first element of second row of args equals a string &apos; 4&apos; ,
call the self.style.HTTP _ BAD _ REQUEST with an argument msg , substitute it for msg .
if not ,
call the self.style.HTTP _ SERVER _ ERROR with an argument msg , substitute it for msg .
call the sys.stderr.write function with an argument msg .
define the function run with 5 arguments : addr , port , wsgi _ handler , ipv6 set to boolean False and threading set to boolean False .
server _ address is a tuple containing 2 initial elements : addr and port .
if threading is true ,
call the function type with 3 arguments : string &apos; WSGIServer &apos; , tuple containing 2 elements : socketserver.ThreadingMixIn and WSGIServer ,
and an empty dictionary , substitute the result for httpd _ cls. if not ,
substitute WSGIServer for httpd _ cls .
call the httpd _ cls function with 4 arguments : server _ address , WSGIRequestHandler and ipv6 set to ipv6 , substitute the result for httpd .
if threading is true ,
httpd.daemon _ threads is boolean True .
call the method httpd.set _ app with an argument wsgi _ handler .
call the method httpd.serve _ forever .
import module importlib .
import module os .
import module sys .
_ _ version _ _ is a string &quot; 0.1 &quot; .
_ _ all _ _ is a list containing a string &quot; runfastcgi &quot; .
FASTCGI _ OPTIONS is a dictionary containing 16 initial entries : &apos; fcgi &apos; for &apos; protocol &apos; , None for &apos; host &apos; , None for &apos; port &apos; ,
define the method fastcgi _ help with an argument message set to None .
print FASTCGI _ HELP to the standard output .
if message is true ,
print message to the standard output .
return boolean False .
define the function runfastcgi with 2 arguments : argset set to an empty list and unpacked dictionary kwargs .
call the method FASTCGI _ OPTIONS.copy , substitute the result for options .
call the options.update method with an argument kwargs .
for every x in argset ,
if character &apos; = &apos; is contained in x ,
call the x.split method with arguments : character &apos; = &apos; and integer 1 , store the result in k and v , respectively .
if not ,
substitute x for k and boolean True for v.
substitute v for value under the k converted to lower case key of options dictionary .
if string &apos; help &apos; is contained in options ,
call the fastcgi _ help function , return the result .
try ,
import flup
if ImportError , renamed to e , exception is caught ,
call the method sys.stderr.write with an argument string &quot; ERROR : % s \ n &quot; , where &apos; % s &apos; is replaced by e .
call the method sys.stderr.write with an argument string &quot; Unable to load the flup package . In order to run django \ n &quot; .
call the method sys.stderr.write with an argument string &quot; as a FastCGI application , you will need to get flup from \ n &quot; .
call the method sys.stderr.write with an argument string &quot; http : / / www.saddi.com / software / flup / If you &apos;ve already \ n &quot; .
call the method sys.stderr.write with an argument string &quot; installed flup , then make sure you have it in your PYTHONPATH . \ n &quot; .
return boolean False .
append value under the &apos; protocol &apos; key of the options dictionary to the string &apos; server . &apos; , substitute it for flup _ module .
if value under the &apos; method &apos; key of the options dictionary equals to string &apos; perfork &apos; or &apos; fork &apos; ,
wsgi _ opts is a dictionary with 4 initial entries : value under the key &apos; maxspare &apos; of options dictionary converted to an integer ,
for &apos; maxSpare &apos; , value under the key &apos; minspare &apos; of options dictionary converted to an integer for &apos; minSpare &apos; , value under the key &apos; maxchildren &apos; of options dictionary converted to an integer , for &apos; maxChildren &apos; , and value under the key &apos; maxrequests &apos; of options dictionary converted to an integer , for &apos; maxRequests &apos; . append string &apos; _ fork &apos; to flup _ module .
otherwise if value under the &apos; method &apos; key of optins dictionary equals to string &apos; thread &apos; or &apos; threaded &apos; ,
wsgi _ opts is a dictionary with 4 initial entries : value under the key &apos; maxspare &apos; of options dictionary converted to an integer ,
for &apos; maxSpare &apos; , value under the key &apos; minspare &apos; of options dictionary converted to an integer for &apos; minSpare &apos; , and value under the key &apos; maxchildren &apos; of options dictionary converted to an integer , for &apos; maxThreads &apos; . if not ,
call the function fastcgi _ help with an argument string &quot; ERROR : Implementation must be one of prefork or thread . &quot; , return the result .
if value under the &apos; debug &apos; key of options dictionary is not None , substitute it for value under the &apos; debug &apos; key of wsgi _ opts dictionary .
try ,
call the function importlib.import _ module with 2 arguments : flup _ module converted to string and appended to &apos; .&apos; character , and string &apos; flup &apos; , substitute the result for module .
substitute module.WSGIServer for WSGIServer .
if Exception exception is caught ,
append flup _ module to string &quot; Can &apos;t import flup . &quot; , print it to the standard output .
return boolean False .
from django.core.servers.basehttp import get _ internal _ wsgi _ application into default name space .
if value under the &apos; socket &apos; key of the options dictionary is false and values under the &apos; host &apos; and &apos; port &apos; keys of the options dictionary are true ,
set the value under the &apos; bindAddress &apos; key of the wsgi _ opts dictionary to a tuple containing 2 elements : value under the &apos; host &apos; key ,
of the options dictionary and value under the &apos; port &apos; key of the options dictionary converted into an integer. if value under the &apos; socket &apos; key of the options dictionary is true and values under the &apos; host &apos; and &apos; port &apos; keys of the options dictionary are false ,
substitute the value under the &apos; socket &apos; key of options dictionary for value under the &apos; bindAddress &apos; key of wsgi _ opts dictionary .
if values under the &apos; socket &apos; , &apos; host &apos; and &apos; port &apos; keys of the options dictionary are false ,
set value under the &apos; bindAddress &apos; key of wsgi _ opts to None .
if not ,
call the fastcgi _ help function with an argument string &quot; Invalid combination of host , port , socket . &quot; , return it .
if value under the &apos; daemonize &apos; of options dictionary is None ,
if the value under the &apos; bindAddress &apos; key of the wsgi _ opts dictionary is not None , set daemonize to boolean True , if not , set it to boolean False .
if not ,
convert the value under the &apos; daemonize &apos; key of options dictionary to lowercase , if it equals to string &apos; true &apos; , &apos; yes &apos; or &apos; t &apos; ,
daemonize is boolean True .
convert the value under the &apos; daemonize &apos; key of options dictionary to lowercase , if it equals to string &apos; false &apos; , &apos; no &apos; or &apos; f &apos; ,
daemonize is boolean False .
if not ,
call the fastcgi _ help function with an argument string &quot; ERROR : Invalid option for daemonize parameter . &quot; , return it .
daemon _ kwargs is an empty dictionary .
if value under the &apos; outlog &apos; key of options dictionary is true ,
substitute the value under the &apos; outlog &apos; key of options dictionary for value under the &apos; out _ log &apos; key of daemon _ kwargs dictionary .
if value under the &apos; errlog &apos; key of options dictionary is true ,
substitute the value under the &apos; errlog &apos; key of options dictionary for value under the &apos; err _ log &apos; key of daemon _ kwargs dictionary .
if value under the &apos; umask &apos; key of options dictionary is true ,
convert the value under the &apos; umask &apos; key of options dictionary into an integer of base 8 , substitute it for value under the &apos; umask &apos; key of daemon _ kwargs dictionary .
if daemonize is true ,
from django.utils.daemonize import become _ daemon into default name space .
call the function become _ daemon with 2 arguments : our _ home _ dir set to the value under the &apos; workdir &apos; key of options dictionary and ,
unpacked dictionary daemon _ kwargs. if value under the &apos; pidfile &apos; of options dictionary exists ,
open the file whose name is stored in the value under the &apos; pidfile &apos; key of options dictionary and mode &apos; w &apos; , with the file descriptor as fp ,
call the method fp.write with an argument string &apos; % d \ n &quot; , with &apos; % d &apos; replaced by os.getpid function return value .
create the object WSGIServer with 2 arguments : get _ internal _ wsgi _ application return value and unpacked dictionary wsgi _ opts , call the method run on it .
if _ _ name _ _ equals a string &apos; _ _ main _ _ &apos; .
call the function runfastcgi with an argument all the elements , except the first from the sys.argv list .
from django.dispatch import Signal into default name space .
request _ started is a instance of a Signal class .
request _ finished is a instance of a Signal class .
got _ request _ exception is a instance of a Signal class , created with an argument providing _ args as the list containing string &apos; request &apos; .
from _ _ future _ _ import unicode _ literals into default name space .
import module base64 .
import module json .
import module time .
import module zlib .
from django.conf import settings into default name space .
from django.utils import baseconv into default name space .
from django.utils.crypto import constant _ time _ compare and salted _ hmac into default name space .
from django.utils.encoding import force _ bytes , force _ str and force _ text into default name space .
from django.utils.module _ loading import import _ string into default name space .
derive the class BadSignature from the Exception base class .
do nothing .
derive the class SignatureExpired from the BadSignature base class .
do nothing .
define the function b64 _ encode with an argument s .
call the method base64.urlsafe _ b64encode with an argument s , on the result call the strip function with &apos; = &apos; as the argument , return the result .
define the function b64 _ decode with an argument s .
calculate negative length of s , by modulus integer 4 , use the result as the number of &apos; = &apos; characters to be stored in pad .
call the method base64.urlsafe _ b64decode with sum of s and pad as argument .
define the function b64 _ hmac with arguments salt , value and key .
call the salted _ hmac with 3 arguments : salt , value and key , call the digest method on the result ,
use the result as an argument for the call to the b64 _ encode function , return the result. define the function get _ cookie _ signer with an argument salt set to string &apos; django.core.signing.get _ cookie _ signer &apos; .
call the import _ string function with an argument settings.SIGNING _ BACKEND , substitute the result for Signer .
call the force _ bytes function with an argument settings.SECRET _ KEY , substitute the result for key .
create the Singer class with 2 arguments : key appended to string &apos; django.http.cookies &apos; and salt set to salt , return it .
derive the class JSONSerializer from the object base class .
define the method dumps with arguments self and obj .
call the json.dumps function with 2 arguments : obj and separators set to tuple containing &apos; , &apos; and &apos; : &apos; characters ,
call the encode method on the result with string &apos; latin-1 &apos; as an argument , return the result. define the method loads with arguments self and data .
call the data.decode method with a string &apos; latin-1 &apos; as an argument , use the result as an argument for the call to the json.load function , return the result .
define the function dumps with 5 arguments : obj , key set to None , salt set to string &apos; django.core.signing &apos; ,
call the serializer function , call the dumps method on the result with an argument obj , substitute result for data .
is _ compressed is boolean False .
if compress is true ,
call the function zlib.compress with an argument data , substitute the result for compressed .
if length of compressed is lesser than length of data decremented by 1 ,
substitute compressed for data .
is _ compressed is boolean True .
call the b64 _ encode function with an argument data , substitute the result for base64d .
if is _ compressed is true ,
prefix the base64d with a &apos; .&apos; character .
instantiate the TimestampSigner object with arguments key and salt set to salt , call its method sign with an argument base64 , return it .
define the function loads with 5 arguments : s , key set to None , salt set to string &apos; django.core.signing &apos; ,
instantiate TimestampSigner object with arguments key and salt set to salt , call its method unsign with arguments :
s and max _ age set to max _ age , use it as an argument for the force _ bytes function , substitute the result for base64d. decompress is boolean False .
if first element of base64d equals to a &apos; .&apos; character ,
substitute first element of base64d for base64d .
decompress is boolean True .
call the method b64 _ decode with an argument base64 , substitute the result for data .
if decompress is true ,
call the function zlib.decompress with an argument data , substitute the result for data .
call the serializer function , call the loads method on the return value with an argument data , return the result .
derive the class Signer from the object base class .
define the method _ _ init _ _ with 4 arguments : self , key set to None , sep set to &apos; : &apos; and salt set to None .
call the function force _ str with an argument sep , substitute the result for self.sep.
if key exists , substitute it for self.key , if not substitute settings.SECRET _ KEY for key .
call the force _ str function with an argument : salt , if it exists , if not with a string &apos; % s . % s &apos; , with &apos; % s &apos; replaced by ,
self . _ _ class _ _ . _ _ module _ _ and self . _ _ class _ _ . _ _ name _ _ , respectively , substitute the result for self.salt. define the method signature with arguments self and value .
call the function base64 _ hmac with 3 arguments : string &apos; signer &apos; appended to self.salt , value and self.key , substitute the result for signature .
call the function force _ str with an argument signature , return the result .
define the method sign with arguments self and value .
call the function force _ str with an argument value , substitute the result for value .
convert value , self.sep and return value of a method self.signature called with an argument value , concatenate them together , return the result .
define the method unsign with arguments self and signed _ value .
call the function signed _ value with an argument value , substitute the result for signed _ value .
if self.sep is not contained in signed _ value ,
raise an BadSignature exception with an argument string &apos; No &quot; % s &quot; found in value &apos; , where &apos; % s &apos; is replaced by self.sep.
call the signed _ value.rsplit method with arguments self.sep and integer 1 , substitute the result for value and sig , respectively .
call the function constant _ time _ compare with 2 arguments : sig and return value of the self.signature method with an argument value , if it evaluates to true ,
call the force _ text function with an argument value , return the result .
raise an BadSignature exception with an argument string &apos; Signature &quot; % s &quot; does not match &apos; , where &apos; % s &apos; is replaced by sig .
derive the class TimestampSigner from the Signer base class .
define the method timestamp with an argument self .
call the method baseconv.base62.encode with result of the time.time function converted to an integer , as an argument , return the result .
define the method sign with arguments self and value .
call the force _ str function with an argument value , substitute the result for value .
convert value , self.sep and return value of the function timestamp , concatenate them , substitute the result for value .
call the sign method from the base class of the TimestampSigner class with an argument value , return the result
define the method unsign with arguments self , value and max _ age set to None .
call the unsign method from the base class of the TimestampSigner class with an argument value , substitute the result for result .
call the result.rsplit method with arguments self.sep and integer 1 , substitute the result for value and timestamp , respectively .
call the baseconv.base62.decode method with an argument timestamp , substitute the result for timestamp .
if max _ age is not None ,
subtract timestamp from the return value of the function time.time , substitute the result for age .
if age is greater than max _ age ,
raise an SignatureExpired exception with an argument string &apos; Signature age % s &gt; % s seconds &apos; , where &apos; % s &apos; is replaced by age and max _ age , respectively .
return value .
from _ _ future _ _ import unicode _ literals into default name space .
import module functools .
from importlib import import _ module into default name space .
import module re .
from threading import local into default name space .
import module warnings .
from django.http import Http404 into default name space .
from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space .
from django.utils.datastructures import MultiValueDict into default name space .
from django.utils.deprecation import RemovedInDjango20Warning into default name space .
from django.utils.encoding import force _ str , force _ text and iri _ to _ uri into default name space .
from django.utils.functional import lazy into default name space .
from django.utils.http import urlquote into default name space .
from django.utils.module _ loading import module _ has _ submodule into default name space .
from django.utils.regex _ helper import normalize into default name space .
from django.utils import six and lru _ cache into default name space .
from django.utils.translation import get _ language into default name space .
call the function local , substitute the result for _ prefixes .
call the function local , substitute the result _ urlconf .
derive the class ResolverMatch with object as base class .
define the _ _ init _ _ method with 7 arguments : self , func , args , kwargs , url _ name set to None , app _ name set to None and namespaces set to None .
substitute func for self.func.
substitute args for self.args.
substitute kwargs for self.kwargs.
substitute url _ name for self.url _ name .
substitute app _ name for self.app _ name .
if namespaces is true ,
append x to self.namespaces list for every x in namespaces , only if x is true .
if not ,
self.namespaces is an empty list .
join self.namespaces into a string separated with character &apos; : &apos; , substitute it for self.namespace.
if func doesnt have a attribute &apos; _ _ name _ _ &apos; ,
join func . _ _ class _ _ . _ _ module _ _ and func . _ _ class _ _ . _ _ name _ _ into a string , separated by character &apos; .&apos; , substitute it for self . _ func _ path .
if not ,
join func . _ _ module _ _ and func . _ _ name _ _ into a string , separated by character &apos; .&apos; , substitute it for self . _ func _ path .
if url _ name exists substitute it for view _ path , if not substitute .self. _ func _ path for view _ path .
append list containing view _ path to self.namespaces list , join all the elements into a string separated by character &apos; : &apos; ,
substitute it for self.view _ name. define the method _ _ getitem _ _ with arguments self and index .
return the element at the index index of the tuple containing 3 elements : self.func , self.args and self.kwargs.
define the method _ _ repr _ _ with an argument self .
in the string &quot; ResolverMatch ( func = % s , args = % s , kwargs = % s , url _ name = % s , app _ name = % s , namespaces = % s ) &quot; , replace all the occurrences of :
string &apos; % s &apos; with self . _ func _ path , self.args , self.kwargs , self.url _ name , self.app _ name and self.namespaces , respectively. derive the class Resolver404 with Http404 as base class .
do nothing .
derive the class NoReverseMatch with Exception as base class .
do nothing .
method lru _ cache.lru _ cache with an argument maxsize set to None , as a decorator ,
define the function get _ callable with arguments lookup _ view and can _ fail set to boolean False .
if lookup _ view is a callable object ,
return lookup _ view .
call the function get _ mod _ func with an argument lookup _ view , store the result in mod _ name and func _ name , respectively .
if func _ name is false ,
if can _ fail is true ,
return lookup _ view .
if not ,
raise an ImportError exception with an argument string &quot; Could not import &apos; % s &apos; . The path must be fully qualified . &quot; ,
where &apos; % s &apos; is replaced by lookup _ view. try ,
call the function import _ module with an argument mod _ name .
if ImportError exception is caught .
if can _ fail is true ,
return lookup _ view
if not ,
call the function get _ mod _ func with an argument mod _ name , store the result in parentmod and submod , respectively .
if submod is true and return value of the function module _ has _ submodule called with 2 arguments : result of the function :
import _ module called with an argument parentmod and submod , evaluates to false. raise an ViewDoesNotExist exception with an argument string &quot; Could not import &apos; % s &apos; . Parent module % s does not exist . &quot; ,
where string &apos; % s &apos; is replaced by lookup _ view and mod _ name , respectively. if not ,
raise an exception .
if not ,
try ,
get func _ name attribute from the mod object , substitute it for view _ func .
if AttributeError exception is caught .
if can fail is true ,
return lookup _ view
if not ,
raise an ViewDoesNotExist exception with an argument string &quot; Could not import &apos; % s &apos; . View does not exist in module % s . &quot; ,
where string &apos; % s &apos; is replaced by lookup _ view and mod _ name , respectively. if not ,
if view _ function is not a callable function ,
raise an ViewDoesNotExist exception with an argument string &quot; Could not import &apos; % s . % s &apos; . View is not callable . &quot; ,
where string &apos; % s &apos; is replaced by mod _ name and func _ name , respectively. return view _ func .
method lru _ cache.lru _ cache with an argument maxsize set to None , as a decorator ,
define the function get _ resolver with an argument urlconf .
if urlconf is None ,
from django.conf import settings into default name space .
substitute settings.ROOT _ URLCONF for urlconf .
return an instance of a class RegexURLResolver created with arguments : raw string &apos; ^ / &apos; and urlconf .
method lru _ cache.lru _ cache with an argument maxsize set to None , as a decorator ,
define the function get _ ns _ resolver with arguments ns _ pattern and resolver .
ns _ resolver is class instance of a class RegexURLResolver , created with 2 arguments : ns _ pattern and resolver.url _ patterns .
return an instance of a class RegexURLResolver created with arguments : raw string &apos; ^ / &apos; and a list containing an element ns _ resolver .
define the function get _ mod _ func with an argument callback .
try ,
call the method callback.rindex with an argument character &apos; .&apos; , substitute the result for dot .
if ValueError exception is caught ,
return callback and a empty string .
return callback split into two lists at the dot index , without the element at the dot index .
derive the class LocaleRegexProvider with object as base class .
define the method _ _ init _ _ with arguments self and regex .
substitute regex for self . _ regex .
self . _ regex _ dict is an empty dictionary .
property decorator ,
define the method regex with an argument self .
call the function get _ language , substitute the result for language _ code .
if language _ code is not contained in self . _ regex _ dict ,
if self.regex is not an instance of six.string _ types ,
substitute self . _ regex for regex .
if not ,
call the function force _ text with arguments self and _ regex , substitute the result for regex .
try ,
call the function re.compile with arguments regex and re.UNICODE , substitute the result for compiled _ regex .
if re.error , renamed to e , is caught ,
raise an ImproperlyConfigured exception with argument string &apos; &quot; % s &quot; is not a valid regular expression : % s &apos; ,
where &apos; % s &apos; is replace by regex and return value of the function six.text _ type with an argument e. substitute the compiled _ regex for value under the language _ code key of the self . _ regex _ dict dictionary .
return the value under the language _ code key of the self . _ regex _ dict dictionary .
derive the class RegexURLPattern with LocaleRegexProvider as base class .
define the method _ _ init _ _ with 5 arguments : self , regex , callback , default _ args set to None and name set to None .
call the method LocaleRegexProvider . _ _ init _ _ with arguments self and regex .
if callback is an callable object ,
substitute callback for self . _ callback .
if not ,
self . _ callback is None .
substitute callback for self . _ callback _ str .
if default _ args exists substitute it for self.default _ args , if not , self.default _ args is an empty dictionary .
substitute name for self.name.
define the method _ _ repr _ _ with an argument self .
substitute &apos; % s &apos; in string &apos; &lt; % s % s % s &gt; &apos; with self . _ _ class _ _ . _ _ name _ _ , self.name and self.regex.pattern , respectively ,
use it as an argument for the call to the force _ str function , return the result. define the method add _ prefix with arguments self and prefix .
if prefix is false , and self doesnt have &apos; _ callback _ str &apos; attribute ,
return nothing .
joint prefix , character &apos; .&apos; and self . _ callback _ str together , substitute the result for self . _ callback _ str .
define the method resolve with arguments self and path .
call the method self.regex.search with an argument path , substitute the result for match .
if match is true ,
call the method match.groupdict , substitute the result for kwargs .
if kwargs is true ,
args is an empty tuple .
if not ,
call the method match.groups , substitute the result for args .
call the method kwargs.update with an argument self.default _ args .
return an instance of a ResolverMatch class , crated with arguments self.callback , args , kwargs and self.name.
property decorator ,
define the method callback with an argument self .
if self . _ callback is not None ,
return self . _ callback .
call the function get _ callable with an argument self . _ callback _ str , substitute the result for self . _ callback .
return self . _ callback .
derive the class RegexURLResolver with LocaleRegexProvider as base class .
define the method _ _ init _ _ with 6 arguments : self , regex , urlconf _ name , default _ kwargs set to None , app _ name set to None and namespace set to None .
call the method LocaleRegexProvider . _ _ init _ _ with arguments self and regex .
substitute urlconf _ name for self.urlconf _ name .
if urlconf _ name is not an instance of six.string _ types class ,
substitute self.urlconf _ name for self.urlconf _ module .
self.callback is None .
if default _ kwargs exists , substitute it for self.default _ kwargs , otherwise self.default _ kwargs is an empty dictionary .
substitute namespace for self.namespace.
substitute app _ name for self.app _ name .
self . _ reverse _ dict is an empty dictionary .
self . _ namespace _ dict is an empty dictionary .
self . _ app _ dict is an empty dictionary .
self . _ callback _ strs is an empty set .
self . _ populated is boolean False .
define the method _ _ repr _ _ with an argument self .
if self.urlconf _ name is an instance of a list type and its length is not zero .
replace &apos; % s &apos; in string &apos; &lt; % s list &gt; &apos; with _ _ class _ _ . _ _ name _ _ field of first element of self.urlconf _ name , substitute it for urlconf _ repr .
if not ,
create a printable representation of self.urlconf _ name object , substitute it for urlconf _ repr .
replace all &apos; % s &apos; in string &apos; &lt; % s % s ( % s : % s ) % s &gt; &apos; with self . _ _ class _ _ . _ _ name _ _ , urlconf _ repr , self.app _ name ,
self.namespace and self.regex.pattern , respectively. return it. define the method _ populate with an argument self .
lookups is an instance of the MultiValueDict class .
namespaces is an empty dictionary .
apps is an empty dictionary .
call the function get _ language , substitute the result for language _ code .
for every pattern in reversed list self.url _ patterns ,
if pattern has an attribute &apos; _ callback _ str &apos; ,
call the method self . _ callback _ strs.add with an argument pattern . _ callback _ str .
otherwise , if pattern has an &apos; _ callback &apos; attribute .
substitute pattern . _ callback for callback .
if callback is an instance of functools.partial object ,
substitute callback.func for callback .
if callback doesnt have &apos; _ _ name _ _ &apos; attribute ,
join callback . _ _ module _ _ , character &quot; . &quot; and callback . _ _ class _ _ . _ _ name _ _ together , substitute the result for lookup _ str .
if not ,
join together callback . _ _ module _ _ , character &quot; . &quot; and callback . _ _ name _ _ , substitute the result for lookup _ str .
call the method self . _ callback _ strs.add with an argument lookup _ str .
substitute pattern.regex.pattern for p _ pattern .
if p _ pattern starts with a string &apos; ^ &apos; ,
remove the first element from p _ pattern .
if pattern is an instance of RegexURLResolver class ,
if pattern.namespace is true ,
substitute the tuple containing 2 elements p _ pattern and pattern for value under the pattern.namespace key of the namespaces dictionary .
if pattern.app _ name is true ,
call the method apps.setdefault with 2 arguments : pattern and an empty list , append to the resulting object pattern.namespace.
if not ,
substitute pattern.regex.pattern for parent _ pat .
for every name in pattern.reverse _ dict ,
for every matches , pat and defaults in return value of the method pattern.reverse _ dict.getlist called with an argument name ,
call the method normalize with sum of parent _ pat and pat as an argument , substitute the result for new _ matches .
call the method lookups.appendlist with 2 arguments : name and a tuple containing 3 elements : new _ matches , sum of p _ pattern and pat ,
and dictionary created by applying defaults mapping on the pattern.default _ kwargs dictionary. for every namespace and tuple containing : prefix and sub _ pattern , in return value of the method pattern.namespace _ dict.items ,
substitute tuple containing 2 elements : sum of p _ pattern and prefix , and sub _ pattern for value under the namespace key of the namespace dictionary .
for every app _ name and namespace _ list in pattern.app _ dict.items method return value ,
call the method apps.setdefault with 2 arguments : app _ name and an empty list , extend the resulting list with namespaces _ list .
call the method self . _ callback _ strs.update with an argument pattern . _ callback _ strs .
if not ,
call the function normalize with an argument p _ pattern , substitute the result for bits .
call the method lookups.appendlist with 2 arguments : pattern.callback and a tuple containing 3 elements : bits , p _ pattern ,
and pattern.default _ args. if pattern.name is not None ,
call the method lookups.appendlist with 2 arguments : pattern.name and a tuple containing 3 elements : bits , p _ pattern ,
and pattern.default _ args. substitute lookups for the value under language _ code key of the self . _ reverse _ dict dictionary .
substitute namespaces for the value under language _ code key of the self . _ namespace _ dict dictionary .
substitute apps for the value under language _ code key of the self . _ app _ dict dictionary .
self . _ populated is boolean True .
property decorator ,
define the method reverse _ dict with an argument self .
call the function get _ language , substitute the result for language _ code .
if language _ code is not contained in self . _ reverse _ dict
call the method self . _ populate .
return the value under the language _ code key of the self . _ reverse _ dict dictionary .
property decorator ,
define the method namespace _ dict with an argument self .
call the method get _ language , substitute the result for language _ code .
if language _ code is not contained in self . _ namespace _ dict ,
call the method self . _ populate .
return the value under the language _ code key of the self . _ namespace _ dict dictionary .
property decorator ,
define the method app _ dict with an argument self .
call the method get _ language , substitute the result for language _ code .
if language _ code is not containsed in self . _ app _ dict
call the method self . _ populate .
return the value under the language _ code key of the self . _ app _ dict dictionary .
define the method resolve with an argument self .
call the function force _ text with an argument path , substitute the result for path .
tried is an empty list .
call the function self.regex.search with an argument path , substitute the result for match .
if match is true ,
slice the path list from the result of the match.end method as the start index to the end , substitute it for new _ path .
for every pattern in self.url _ patterns ,
try ,
call the method pattern.resolve with an argument new _ path , substitute the result for sub _ match .
if Resolver404 , renamed to e , exception is caught ,
call the get method with an argument string &apos; tried &apos; on the first element of the e.args , substitute the result for sub _ tried .
if sub _ tried is not None ,
call the method tried.extend with an argument : t added to a list containing element pattern , for every t in sub _ tried .
if not ,
append list containing pattern to tried .
if not ,
if sub _ match is true ,
sub _ match _ dict is a dictionary created from self.default _ kwargs dictionary using mapping function match.groupdict.
call the method sub _ match _ dict.update with an argument sub _ match.kwargs.
return an instance of a class ResolverMatch created with 6 arguments : sub _ match.func , sub _ match.args , sub _ match _ dict ,
sub _ match.url _ name , self.app _ name if it exists or if not sub _ match.app _ name and sub _ match.namespaces list appended to self.name. append pattern to tried list .
raise an Resolver404 exception with an argument dictionary containing 2 entries : new _ path for &apos; path &apos; and tried for &apos; tried &apos; .
raise an Resolver404 exception with an argument dictionary containing 1 entry : path for &apos; path &apos; .
property decorator ,
define the method urlconf _ module with an argument self .
try ,
return self . _ urlconf _ module .
if AttributeError exception is caught .
call the function import _ module with argument self.urlconf _ name , substitute the result for self . _ urlconf _ module .
return self . _ urlconf _ module .
property decorator ,
define the method url _ patterns with an argument self .
get attribute &quot; urlpatterns &quot; form the self.urlconf _ module , substitute it for patterns , if the attribute doesnt exist ,
substitute self.urlconf _ module for self.urlconf _ module. try ,
call the function iter with an argument patterns .
if TypeError exception is caught ,
msg is a string &quot; &quot; The included urlconf &apos; { name } &apos; does not appear to have any patterns in it .
If you see valid patterns in the file then the issue is probably caused by a circular import . &quot; raise an ImproperlyConfigured exception with an argument : return value of the method msg.format , called with an argument name set to self.urlconf _ name .
return patterns .
define the method resolve _ error _ handler with arguments self and view _ type .
replace &apos; % s &apos; in the string &apos; handler % s &apos; with view _ type , use it as an name of the attribute to get from the self.urlconf _ module ,
substitute it for callback , if the attribute doesnt exists , callback is None. if not callback ,
from django.conf import urls into default name space ,
replace &apos; % s &apos; in the string &apos; handler % s &apos; with view _ type , use it as an name of the attribute to get from the urls , substitute it for callback .
call the function get _ callable with an argument callback , return the result and an empty dictionary .
define the method reverse with arguments self , lookup _ view , unpacked list args and unpacked dictionary kwargs .
call the method self . _ reverse _ with _ prefix with 4 arguments : lookup _ view , an empty string , unpacked list args and unpacked dictionary kwargs .
define the method _ reverse _ with _ prefix with arguments self , lookup _ view , _ prefix , unpacked list args and unpacked dictionary kwargs .
if args and kwargs are both true ,
raise an ValueError exception with an argument string &quot; Don &apos;t mix * args and * * kwargs in call to reverse ( ) ! &quot; .
call the function force _ text with an argument v , for every v in args , put the results in a text _ args list .
text _ kwargs is a dictionary created from the result of the function force _ text with an argument v , mapped through function k , for every k and v in return value of the kwargs.items.
if self . _ populated is false ,
call the method self . _ populate ,
substitute lookup _ view for original _ lookup ,
try ,
if lookup _ view is contained in self . _ callback _ strs ,
call the function get _ callable with arguments lookup _ view and boolean True , substitute the result for lookup _ view .
if ImportError , AttributeError , renamed to e , exceptions are caught ,
raise an NoReverseMatch exception with an argument string &quot; Error importing &apos; % s &apos; : % s . &quot; , where &apos; % s &apos; is replaced with lookup _ view and e , respectively .
if not ,
if original _ lookup and lookup _ view are not callable objects ,
call the function warnings.warn with 3 arguments : string &apos; Reversing by dotted path is deprecated ( % s ) . &apos; , with &apos; % s &apos; replaced with
original _ lookup , RemovedInDjango20Warning and stacklevel set to integer 3. call the method self.reverse _ dict.getlist with an argument lookup _ view , substitute the result for possibilities .
call the function urlquote with an argument _ prefix , use the result as an argument for the call to the normalize function ,
substitute the fitst element of the result for prefix _ norm and prefix _ args , respectively. for every possibility , pattern and defaults in possibilities ,
for every result and params in possibility ,
if args is true ,
if length of args is not equal to the sum of the lengths of params and prefix _ args ,
skip this loop iteration .
create a list of tuples out of 2 lists : appended params list to prefix _ args and text _ args , covert the result into a dictionary ,
substitute it for candidate _ subs. if not ,
if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix
dictionary keys converted into sets , skip this loop iteration ,
matches is boolean True ,
for every k and v in return value of the function defaults.items ,
if the value of the kwargs dictionary under the key k is not equal to v ,
matches is boolean False .
break from this loop execution .
if matches is false ,
skip this loop iteration ,
substitute text _ kwargs for candidate _ subs .
replace all the occurrences of the &apos; % &apos; string for &apos; % % &apos; , append result to the previous result , substitute it for candidate _ pat .
call the function re.search with 3 arguments : string &apos; ^ % s % s &apos; , with &apos; % s &apos; replaced for prefix _ norm and pattern , respectively ,
candidate _ pat formated with candidate _ subs and re.UNICODE. candidate _ subs is dictionary created from elements in return value of the function urlquote called with argument v ,
mapped with a function k , for every k and v in return value of the method candidate _ subs.items. format candidate _ pat with candidate _ subs , return the result .
get the attribute &apos; _ _ module _ _ &apos; from the getattr , if it exists substitute it for m , if not , m is None .
get the attribute &apos; _ _ name _ _ &apos; from the getattr , if it exists substitute it for m , if not , m is None .
if m and n are not None ,
join m and n into a string , separated by &apos; .&apos; , substitute the result for lookup _ view _ s .
if not ,
substitute lookup _ view for lookup _ view _ s .
append pattern into a list patterns , for every possibility , pattern and defaults in possibilities .
raise an NoReverseMatch exception with an argument string &quot; Reverse for &apos; % s &apos; with arguments &apos; % s &apos; and keyword &quot; ,
&quot; arguments &apos; % s &apos; not found . % d pattern ( s ) tried : % s &quot; , replace &apos; % s &apos; with lookup _ view _ s , args , kwargs , length of patterns , patterns , and respectively. derive the class LocaleRegexURLResolver with RegexURLResolver as base class .
define the _ _ init _ _ method with 5 arguments : self , urlconf _ name , default _ kwargs set to None , app _ name set to None and namespace set to None .
call the _ _ init _ _ method of the base class of the class LocaleRegexURLResolver , with arguments : None , urlconf _ name , default _ kwargs , app _ name and namespace .
property decorator ,
define the method regex with an argument self .
call the function get _ language , substitute the result for language _ code .
if language _ code is not contained in self . _ regex _ dict ,
call the function re.compile with 2 arguments , string &apos; ^ % s / &apos; , where &apos; % s &apos; is replaced with language _ code and re.UNICODE , substitute the result for regex _ compiled .
substitute the regex _ compiled for value under the language _ code key of the self . _ regex _ dict dictionary .
return the value under the language _ code of the self . _ regex _ dict dictionary .
define the function resolve with arguments path and urlconf set to None .
if urlconf is None ,
call the function get _ urlconf with an argument urlconf .
call the function get _ resolver with an argument urlconf , on the result call the method resolve with an argument path , return it .
define the function reverse with 6 arguments : viewname , urlconf set to None , args set to None , kwargs set to None ,
prefix set to None , current _ app set to None. if urlconf is None ,
call the function get _ urlconf with an argument urlconf .
call the function get _ resolver with an argument urlconf , substitute the result for resolver .
if args in None of boolean False , substitute it for an empty list .
if args in None of boolean False , substitute it for an empty dictionary .
if prefix is None ,
call the function get _ script _ prefix , substitute the result for prefix .
if viewname is not an instance of the six.string _ types object ,
substitute viewname for view .
if not ,
call the method viewname.split , with an argument &apos; : &apos; , substitute the result for parts .
call the method parts.reverse.
substitute first element of parts for view .
substitute parts , without the first element , for path .
resolved _ path is an empty list .
ns _ pattern is an empty string .
while path is true ,
pop the element form the path as substitute the result for ns .
try ,
get the value under the ns key of the resolver.app _ dict dictionary , substitute it for app _ list .
if current _ app and is true and current _ app is contained in app _ list ,
substitute current _ app for ns .
otherwise if ns is not contained in app _ list ,
substitute first element of app _ list for ns .
if KeyError exception is caught ,
do nothing .
try ,
substitute the value under the ns key of the resolver.namespace _ dict dictionary for extra and resolver , respectively .
call the method resolved _ path.append with an argument ns .
add ns _ pattern and extra , substitute the result for ns _ pattern .
if KeyError , renamed to key , exception is caught ,
if resolved _ path is true ,
raise an NoReverseMatch exception with an argument string &quot; % s is not a registered namespace inside &apos; % s &apos; &quot; ,
respectively replace &apos; % s &apos; with key and elements of the resolved _ path joined into a string , separated by &apos; : &apos; . if not ,
raise an NoReverseMatch exception with an argument string &quot; % s is not a registered namespace &quot; , with &apos; % s &apos; replaced with key .
if ns _ pattern is true ,
call the function get _ ns _ resolver with arguments ns _ pattern and resolver , substitute the result for resolver .
call the method resolver . _ reverse _ with _ prefix with 4 arguments : view , prefix , unpacked list args , unpacked dictionary kwargs ,
use the result as an argument for the call to the function iri _ to _ uri , return the result. call the function lazy with arguments reverse and str , substitute the results for reverse _ lazy .
define the function clear _ url _ caches .
call the function get _ callable.cache _ clear .
call the function get _ resolver.cache _ clear .
call the function get _ ns _ resolver.cache _ clear .
define the function set _ script _ prefix with an argument prefix .
if prefix doesnt end with character &apos; / &apos; ,
append &apos; / &apos; to prefix .
substitute prefix for _ prefixes.values.
define the function get _ script _ prefix .
get &apos; value &apos; attribute of the _ prefixes , if it exists , return it , otherwise return &apos; / &apos; .
define the function clear _ script _ prefix .
try ,
delete _ prefixes.values.
if AttributeError exception is caught ,
do nothing .
define the function set _ urlconf with an argument urlconf _ name .
if urlconf _ name is true ,
substitute urlconf _ name for _ urlconfs.value.
if not ,
if _ urlconfs has an attribute &apos; value &apos; ,
delete _ urlconfs.value.
define the function get _ urlconf with an argument default set to None .
get the &apos; value &apos; attribute of the _ urlconfs , if it exists return it , otherwise return defaults .
define the function is _ valid _ path with arguments path and urlconf set to None .
try ,
call the function resolve with arguments path and urlconf .
return boolean True .
if Resolver404 exception is caught ,
return boolean False .
from _ _ future _ _ import unicode _ literals into default name space .
import module re .
from django.core.exceptions import ValidationError into default name space .
from django.utils.deconstruct import deconstructible into default name space .
from django.utils.translation import ugettext _ lazy as _ and ungettext _ lazy into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils.ipv6 import is _ valid _ ipv6 _ address into default name space .
from django.utils import six into default name space .
from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space .
EMPTY _ VALUES is a tuple containing 5 initial elements : None , empty string , empty list , empty tuple and an empty dictionary .
decorator deconstructible ,
derive the class RegexValidator form the object base class .
regex is an empty string .
call a function _ with a string &apos; Enter a valid value . &apos; as an argument , substitute the result for message .
code is a string &apos; invalid&apos;
inverse _ match is boolean False .
flags is a integer 0 .
define the method _ _ init _ _ with 6 arguments : self , regex set to None , message set to None , code set to None ,
inverse _ match set to None and flags set to None. if regex is not None ,
substitute regex for self.regex.
if message is not None ,
substitute message for self.message.
if code is not None ,
substitute code for self.code.
if inverse _ match is not None ,
substitute inverse _ match for self.inverse _ match .
if flags is not None ,
substitute flags for self.flags.
if self.flags is true and self.regex is not an instance of a six.string _ types type ,
raise an TypeError exception with an argument string &quot; If the flags are set , regex must be a regular expression string . &quot; .
if self.regex is not an instance of a six.string _ types type ,
call the re.compile function with self.regex and self.flags as arguments , substitute the result for self.regex.
define the method _ _ call _ _ with arguments self and value .
if self.inverse _ match equals to return value of the self.regex.search method converted to boolean , called with argument force _ text ( value ) ,
raise a ValidationError exception with arguments self.message and code set to self.code.
define the method _ _ eq _ _ with arguments self and other .
evaluate the logical expression , if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern ,
and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code , and self.inverse _ match equals to other.inverse _ match , return the result. define the method _ _ ne _ _ with arguments self and other .
if self equals to other return boolean False , otherwise return boolean True .
decorator deconstructible ,
derive the class URLValidator form the RegexValidator base class .
call the re.compile function with 2 arguments : raw string &quot; ^ ( ? : &#91; a-z0-9 \ . \ - &#93; * ) : / / ( ? : ( ? : &#91; A-Z0-9 &#93; ( ? : &#91; A-Z0-9- &#93; { 0,61 } &#91; A-Z0-9 &#93; ) ? \ . ) + &quot; ,
&quot; ( ? : &#91; A-Z &#93; { 2,6 } \ . ? &#124; &#91; A-Z0-9- &#93; { 2 , } ( ? &lt; ! - ) \ . ? ) &#124; \ d { 1,3 } \ . \ d { 1,3 } \ . \ d { 1,3 } \ . \ d { 1,3 } &#124; \ &#91; ? &#91; A-F0-9 &#93; * : &#91; A-F0-9 : &#93; + \ &#93; ? ) ( ? : : \ d + ) ? ( ? : : \ d + ) ? ( ? : / &quot; , &quot; ? &#124; &#91; / ? &#93; \ S + ) $ &quot; and re.IGNORECASE , substitute the result for regex. call a function _ with a string &apos; Enter a valid value . &apos; as an argument , substitute the result for message .
schemes is a list containing 4 initial elements : &apos; http &apos; , &apos; https &apos; , &apos; ftp &apos; and &apos; ftps &apos; .
define the method _ _ init _ _ with 3 arguments : self , schemes set to None and unpacked dictionary kwargs .
call the _ _ init _ _ method of the base class of the class URLValidator , with unpacked dictionary kwargs as argument .
if schemes is not None ,
substitute schemes for self.schemes.
define the method _ _ call _ _ with arguments self and value .
call the function force _ text with an argument value , substitute the result for value .
call the value.split method with &apos; : / / &apos; as argument , convert first element of the result to lower case , substitute the result for scheme .
if scheme is not contained in self.schemes ,
raise a ValidationError exception with arguments self.message and code set to self.code.
try ,
call the _ _ call _ _ method from the base class of the class URLValidator , with an argument value .
if ValidationError , renamed to e , is caught ,
if value is true ,
call the function urlsplit with an argument value , assign the result to scheme , netloc , path , query and fragment , respectively .
try ,
call the method netloc.encode with an argument string &apos; idna &apos; , on the return value call the decode method with string &apos; ascii &apos; as argument , substitute the result for netloc .
if UnicodeError exception is caught ,
raise an exception e .
call the function urlunsplit with a tuple containing 5 elements : scheme , netloc , path , query and fragment , as an argument , substitute the result for url .
call the _ _ call _ _ method from the base class of the URLValidator class , with an argument url .
if not ,
raise an exception .
if not ,
substitute value for url .
define the function validate _ integer with an argument value .
try ,
convert value into an integer .
if ValueError or TypeError exceptions are caught ,
raise a ValidationError exception with 2 arguments : return value of the function _ with an string argument &apos; Enter a valid integer . &apos; ,
and code set to string &apos; invalid &apos; . decorator deconstructible ,
derive the class EmailValidator form the object base class .
call a function _ with a string &apos; Enter a valid value . &apos; as an argument , substitute the result for message .
code is a string &apos; invalid &apos; .
call the re.compile function with 2 arguments : raw string &quot; ( ^ &#91; - ! # $ % &amp; &apos; * + / = ? ^ _ ` { } &#124; ~ 0-9A-Z &#93; + ( \ . &#91; - ! # $ % &amp; &apos; * + / = ? ^ _ ` { } &#124; ~ 0-9A-Z &#93; + ) * $ &quot; ,
&quot; &#124; ^ &quot; ( &#91; \ 001- \ 010 \ 013 \ 014 \ 016- \ 037 ! # - \ &#91; \ &#93; - \ 177 &#93; &#124; \ \ &#91; \ 001- \ 011 \ 013 \ 014 \ 016- \ 177 &#93; ) * &quot; $ ) &quot; and re.IGNORECASE , substitute the result for user _ regex. call the re.compile function with 2 arguments : raw string &apos; ( ? : &#91; A-Z0-9 &#93; ( ? : &#91; A-Z0-9- &#93; { 0,247 } &#91; A-Z0-9 &#93; ) ? \ . ) + ( ? : &#91; A-Z &#93; { 2,6 } &#124; &#91; A-Z0-9- &#93; { 2 , } ( ? &lt; ! - ) ) $ &apos; ,
and re.IGNORECASE , substitute the result for domain _ regex. call the re.compile function with 2 arguments : raw string &apos; \ &#91; ( &#91; A-f0-9 : \ . &#93; + ) \ &#93; $ &apos; and re.IGNORECASE , substitute the result for literal _ regex .
domain _ whitelist is a list containing string &apos; localhost &apos; .
define the _ _ init _ _ method with 4 arguments : self , message set to None , code set to None and whitelist set to None .
if message is not None
substitute message for self.message.
if code is not None
substitute code for self.code.
if whitelist is not None
substitute whitelist for self.domain _ whitelist .
define the method _ _ call _ _ with arguments self and value .
call the function force _ text with an argument value , substitute the result for value .
if value is false or character &apos; @ &apos; is not contained in value ,
raise a ValidationError exception with arguments self.message and code set to self.code.
call the method value.rsplit with arguments character &apos; @ &apos; and integer 1 , assign the result to user _ part and domain _ part , respectively .
call the self.user _ regex.match method with an argument user _ part , if it evaluates to false ,
raise a ValidationError exception with arguments self.message and code set to self.code.
if domain _ part is not contained in self.domain _ whitelist and method self.validate _ domain _ part with an argument domain _ part evaluates to false ,
try ,
call the method domain _ part.encode with an argument string &apos; idna &apos; , on the return value call the decode method with string &apos; ascii &apos; as argument , substitute the result for domain _ part .
if method self.validate _ domain _ part with an argument domain _ part evaluates to true ,
return nothing .
if UnicodeError exception is caught ,
do nothing .
raise a ValidationError exception with arguments self.message and code set to self.code.
define the method validate _ domain _ part with arguments self and domain _ part .
call the self.domain _ regex.match method with an argument domain _ part , if it evaluates to true ,
return boolean True .
evaluate method self.literal _ regex.match with an argument domain _ part , substitute the result for literal _ match .
if literal _ match is true ,
call the method literal _ match.group with an integer 1 , substitute the result for ip _ address .
try ,
call the function validate _ ipv46 _ address with an argument ip _ address .
return boolean True .
if ValidationError exception is caught ,
do nothing .
return boolean False .
define the method _ _ eq _ _ with arguments self and other .
if other is instance of EmailValidator and , self.domain _ whitelist equals to other.domain _ whitelist ,
and self.message equals to other.message , and self.code equals to other.code , return boolean True , otherwise return boolean False. validate _ email is an instance of EmailValidator class .
call the re.compile function with an argument raw string &apos; ^ &#91; -a-zA-Z0-9 _ &#93; + $ &apos; , substitute the result for slug _ re .
validate _ slug is a instance of a RegexValidator class , created with 3 arguments : slug _ re , return value of the call to the function ,
_ with an argument string &quot; Enter a valid &apos; slug &apos; consisting of letters , numbers , underscores or hyphens . &quot; , and string &apos; invalid &apos; . call the re.compile function with an argument raw string &apos; ^ ( 25 &#91; 0-5 &#93; &#124; 2 &#91; 0-4 &#93; \ d &#124; &#91; 0-1 &#93; ? \ d ? \ d ) ( \ . ( 25 &#91; 0-5 &#93; &#124; 2 &#91; 0-4 &#93; \ d &#124; &#91; 0-1 &#93; ? \ d ? \ d ) ) { 3 } $ &apos; ,
substitute the result for ipv4 _ re. validate _ ipv4 _ address is a instance of a RegexValidator class , created with 3 arguments : ipv4 _ re ,
return value of the call to the function _ with an argument string &apos; Enter a valid IPv4 address . &apos; and string &apos; invalid &apos; . define the function validate _ ipv6 _ address with an argument value .
call the function is _ valid _ ipv6 _ address with an argument value , if it evaluates to false ,
raise a ValidationError exception with 2 arguments : return value of the function _ called with an argument string &apos; Enter a valid IPv6 address . &apos; , and code set to string &apos; invalid &apos; .
define the function validate _ ipv46 _ address with an argument value .
try ,
call the function validate _ ipv4 _ address with an argument value .
if ValidationError exception is caught ,
try ,
call the function validate _ ipv6 _ address with an argument value .
if ValidationError exception is caught ,
raise a ValidationError exception with 2 arguments : return value of the function _ called with an argument string &apos; Enter a valid IPv4 or IPv6 address . &apos; , and code set to string &apos; invalid &apos; .
ip _ address _ validator _ map is a dictionary containing 3 initial entries : tuple containing 2 elements : list with an element , validate _ ipv46 _ address and return value of the function _ with an argument string &apos; Enter a valid IPv4 or IPv6 address . &apos; for &apos; both &apos; ,
tuple containing 2 elements : list with an element validate _ ipv4 _ address and return value of the function _ with an argument string , &apos; Enter a valid IPv4 address . &apos; for &apos; ipv4 &apos; and tuple containing 2 elements : list with an element validate _ ipv6 _ address , and return value of the function _ with an argument string &apos; Enter a valid IPv6 address . &apos; for &apos; ipv6 &apos; . define the function ip _ address _ validators with arguments protocol and unpack _ ipv4 .
if protocol is not equal to string &apos; both &apos; and unpack _ ipv4 is true ,
raise a ValueError exception with an argument &quot; You can only use `unpack _ ipv4` if `protocol` is set to &apos; both &apos; &quot; .
try ,
convert protocol to lowercase , use it as a key to get a value from the ip _ address _ validator _ map dictionary , return it .
if KeyError exception is caught ,
raise a ValueError exception with an argument &quot; The protocol &apos; % s &apos; is unknown . Supported : % s &quot; , replace &apos; % s &apos; with protocol ,
and ip _ address _ validator _ map converted to a list , respectively. call the re.compile function with an argument raw string &apos; ^ &#91; \ d , &#93; + $ &apos; , substitute the result for comma _ separated _ int _ list _ re .
validate _ comma _ separated _ integer _ list is a instance of a RegexValidator class , created with 3 arguments : comma _ separated _ int _ list _ re ,
return value of the call to the function _ with an argument string &apos; Enter only digits separated by commas . &apos; and string &apos; invalid &apos; . decorator deconstructible ,
derive the class BaseValidator form the object base class .
compare is a lambda function with arguments self , a and b , return value is boolean True if a is not b , otherwise it is False .
clean is a lambda function with arguments self and x , return value is x .
call the function _ with the argument string &apos; Ensure this value is % ( limit _ value ) s ( it is % ( show _ value ) s ) . &apos; , substitute the result for message .
code is a string &apos; limit _ value&apos;
define the method _ _ init _ _ with self and limit _ value as arguments .
substitute the limit _ value for self.limit _ value .
define the method _ _ call _ _ with arguments self and value .
call the method self.clean with value as argument , substitute the result for cleaned .
params is a dictionary with 2 initial entries : self.limit _ value for &apos; limit _ value &apos; and cleaned for &apos; show _ value &apos; .
call the self.compare method with arguments cleaned and self.limit _ value , if it evaluates to true ,
raise a ValidationError exception with arguments self.message , code set to self.code and params set to params .
define the method _ _ eq _ _ with arguments self and other .
if other is an instance of self . _ _ class _ _ and , self.limit _ value equals to other.limit _ value , and self.message equals to other.message ,
and self.code equals to other.code , return boolean True , otherwise return boolean False. decorator deconstructible ,
derive the class MaxValueValidator form the BaseValidator base class .
compare is a lambda function with arguments self , a and b , return value is boolean true if a is greater than b , otherwise is false .
call the function _ with an argument string &apos; Ensure this value is less than or equal to % ( limit _ value ) s . &apos; , substitute the result for message .
code is a string &apos; max _ value&apos;
decorator deconstructible ,
derive the class MinValueValidator form the BaseValidator base class .
compare is a lambda function with arguments self , a and b , return value is boolean true if a is lesser than b , otherwise is false .
call the function _ with an argument string &apos; Ensure this value is greater than or equal to % ( limit _ value ) s . &apos; , substitute the result for message .
code is a string &apos; min _ value&apos;
decorator deconstructible ,
derive the class MinLengthValidator form the BaseValidator base class .
compare is a lambda function with arguments self , a and b , return value is boolean true if a is lesser than b , otherwise is false .
clean is a lambda function with self and x as arguments , return value is length of x .
call the function ungettext _ lazy with 3 arguments : string &apos; Ensure this value has at least % ( limit _ value ) d character ( it has % ( show _ value ) d ) ,
string &apos; Ensure this value has at least % ( limit _ value ) d characters ( it has % ( show _ value ) d ) . &apos; and string &apos; limit _ value &apos; , substitute the result for message. code is a string &apos; min _ length&apos;
decorator deconstructible ,
derive the class MaxLengthValidator form the BaseValidator base class .
compare is a lambda function with arguments self , a and b , return value is boolean true if a is greater than b , otherwise is false .
clean is a lambda function with self and x as arguments , return value is length of x .
call the function ungettext _ lazy with 3 arguments : string &apos; Ensure this value has at most % ( limit _ value ) d character ( it has % ( show _ value ) d ) ,
string &apos; Ensure this value has at most % ( limit _ value ) d characters ( it has % ( show _ value ) d ) . &apos; and string &apos; limit _ value &apos; , substitute the result for message. code is a string &apos; max _ length&apos;
import module django .
from django.core.handlers.wsgi import WSGIHandler into default name space .
define the function get _ wsgi _ application .
call the django.setup method .
return WSGIHandler object .
from django.core.exceptions import ValidationError into default name space .
from django.forms.fields import everything into default name space .
from django.forms.forms import everything into default name space .
from django.forms.formsets import everything into default name space .
from django.forms.models import everything into default name space .
from django.forms.widgets import everything into default name space .
from django.forms.extras.widgets import SelectDateWidget into default name space .
_ _ all _ _ is an list containing string &apos; SelectDateWidget &apos; .
from _ _ future _ _ import unicode _ literals into default name space .
import module datetime .
import module re .
from django.forms.widgets import Widget and Select into default name space .
from django.utils import datetime _ safe into default name space .
from django.utils.dates import MONTHS into default name space .
from django.utils.encoding import force _ str into default name space .
from django.utils.safestring import mark _ safe into default name space .
from django.utils.formats import get _ format into default name space .
from django.utils import six into default name space .
from django.conf import settings into default name space .
_ _ all _ _ is an tuple containing string &apos; SelectDateWidget &apos; .
compile regex from the raw string &apos; ( \ d { 4 } ) - ( \ d \ d ? ) - ( \ d \ d ? ) $ &apos; , substitute it for RE _ DATE .
define the function _ parse _ date _ fmt .
call the function get _ format with an argument string &apos; DATE _ FORMAT &apos; , substitute it for fmt .
escaped is boolean False .
for every char in fmt ,
if escaped is true ,
escaped is boolean False .
otherwise if cahr equals a string &apos; \ \ &apos; ,
escaped is boolean True .
otherwis if char is contained in string &apos; Yy &apos; ,
yield string &apos; year &apos; as an return value of the generator .
otherwise if char is contained in string &apos; bEFMmNn &apos; ,
yield string &apos; month &apos; as an return value of the generator .
otherwise if char is contained in string &apos; dj &apos; ,
yield string &apos; day &apos; as an return value of the generator .
derive the class SelectDateWidget for the Widget base class .
none _ value is a tuple containing 2 elements : integer 0 and string &apos; --- &apos; .
month _ field is a string &apos; % s _ month &apos; .
day _ field is a string &apos; % s _ day &apos; .
year _ field is a string &apos; % s _ year &apos; .
define the method _ _ init _ _ with 5 arguments : self , attrs set to None , years set to None , months set to None and empty _ label set to None .
if attrs is not None substitute it for self.attrs , or if not self.attrs is an empty dictionary .
if years is true ,
substitute years for self.years.
if not ,
call the function datetime.date.today , substitute the year field of the result for this _ year .
self.years is list containing 10 successive integers from this _ year .
if months is true ,
substitute months for self.months.
if not ,
substitute MONTHS for self.months.
if empty _ label is an instance of list or tuple type ,
if length of empty _ label is not equal to integer 3 .
raise an ValueError with an argument string &apos; empty _ label list / tuple must have 3 elements . &apos; .
self.year _ none _ value is a tuple containing 2 elements : integer 0 and first element of empty _ label .
self.month _ none _ value is a tuple containing 2 elements : integer 0 and second element of empty _ label .
self.day _ none _ value is a tuple containing 2 elements : integer 0 and third element of empty _ label .
if not ,
if empty _ label is not None ,
self.none _ value is a tuple containing 2 elements : integer 0 and empty _ label .
substitute self.none _ value for self.year _ none _ value .
substitute self.none _ value for self.month _ none _ value .
substitute self.none _ value for self.day _ none _ value .
define the method render with 4 arguments : self , name , value and attrs set to None .
try ,
substitute value.year , value.month and value.day for year _ val , month _ val and day _ val , respectively .
if AttributeError exception is caught ,
year _ val and month _ val and day _ val are set to None .
if value is an instance of six.string _ types ,
if settings.USE _ L10N is true ,
try ,
call the function get _ format with an argument string &apos; DATE _ INPUT _ FORMATS &apos; , substitute the first element of the result for input _ format .
call the method datetime.datetime.strptime with 2 arguments : return value of the function force _ str called with an argument value ,
and input _ format , substitute the result for v. substitute v.year , v.month and v.day for year _ val , month _ val and day _ val , respectively .
if ValueError exception is caught ,
do nothing .
if not ,
call the method RE _ DATE.match with an argument value , substitute the result for match .
if match is true ,
for v in return value of the function match.groups , convert v into an integer and append i to a list ,
assign the result for year _ val , month _ val and day _ val , respectively. html is an empty dictionary .
for every i in self.years append tuple containing i and i elements into a list , substitute the resulting string for choices .
call the method self.create _ select with 6 arguments : name , self.year _ field , value , year _ val , choices and self.year _ none _ value ,
substitute the result for the value under the &apos; year &apos; key of the html dictionary. call the function six.iteritems with an argument self.months , convert the result to a list and substitute it for choices .
call the method self.create _ select with 6 arguments : name , self.month _ field , value , month _ val , choices and self.month _ none _ value ,
substitute the result for the value under the &apos; month &apos; key of the html dictionary. for every i in successive list of integers from 1 to 30 , append tuple containing i and i elements into a list ,
substitute the resulting string for choices. call the method self.create _ select with 6 arguments : name , self.year _ field , value , day _ val , choices and self.day _ none _ value ,
substitute the result for the value under the &apos; day &apos; key of the html dictionary. output is an empty list .
for every field in return value of the function _ parse _ date _ fmt ,
get the value under the field key of the html dictionary , append it to output .
join output into a string , separated by newline characters , use it as an argument for the call to the mark _ safe , return the result .
define the method id _ for _ label with arguments self and id .
for every first _ select in return value of the function _ parse _ date _ fmt .
substitute &apos; % s &apos; in string &apos; % s _ % s &apos; with id _ and first _ select , return it .
if not ,
convert if into a string append to it a string &apos; _ month &apos; , return the result .
define the method id _ for _ label with arguments self , data , files and name .
format self.year _ field string with name , use it as the key for the data dictionary , substitute the result for y .
format self.month _ field string with name , use it as the key for the data dictionary , substitute the result for m .
format self.day _ field string with name , use it as the key for the data dictionary , substitute the result for d .
if y , m and d are all equal to string &apos; 0&apos; ,
return None .
if y and m and d are all true ,
if settings.USE _ L10N is true ,
call the function get _ format with an argument string &apos; DATE _ INPUT _ FORMATS &apos; , substitute the first element of the result for input _ format .
try ,
call the function datetime.date with 3 arguments : y , m and d all converted into a integers , substitute the result for date _ value .
if ValueError exception is caught ,
substitute &apos; % s &apos; in string &apos; % s- % s- % s &apos; with y , m and d , return the result .
if not ,
call the method datetime _ safe.new _ date with an argument date _ value , substitute the result for date _ value .
call the method date _ value.strftime with an argument input _ format , return the result .
if not ,
substitute &apos; % s &apos; in string &apos; % s- % s- % s &apos; with y , m and d , return the result .
get the name key of the data dictionary , if the key exists return it , if not return None .
define the method id _ for _ label with arguments self , name , field , value , val , choices and none _ value .
if &apos; id &apos; is contained in self.attrs ,
get the value under the &apos; id &apos; key of the attrs dictionary , substitute the return value field of the self object for id _ .
if not ,
substitute &apos; % s &apos; in string &apos; id _ % s &apos; with name , return it .
if self.is _ required is false ,
insert none _ value at the beginning of the choices list .
call the method self.build _ attrs with an argument id set to field modulus id _ , substitute the result for local _ attrs .
s is an instance of the Select class , created with choices set to choices .
call the method s.render with 3 arguments : field string formated with name , val and local _ attrs , substitute the result for select _ html .
return select _ html .
from _ _ future _ _ import unicode _ literals into default name space .
import module copy .
import module datetime .
import module os .
import module re .
import module sys .
import module warnings .
from decimal import Decimal and DecimalException into default name space .
from io import BytesIO into default name space .
from django.core import validators into default name space .
from django.core.exceptions import ValidationError into default name space .
from django.forms.utils import from _ current _ timezone and to _ current _ timezone into default name space .
from django.forms.widgets import TextInput , NumberInput , EmailInput , URLInput , HiddenInput , MultipleHiddenInput , ClearableFileInput ,
CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget and FILE _ INPUT _ CONTRADICTION. from django.utils import formats into default name space .
from django.utils.encoding import smart _ text , force _ str and force _ text into default name space .
from django.utils.ipv6 import clean _ ipv6 _ address into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
from django.utils import six into default name space .
from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space .
from django.utils.translation import ugettext _ lazy as _ and ungettext _ lazy into default name space .
from django.core.validators import EMPTY _ VALUES into default name space .
_ _ all _ _ a tuple containing strings : &apos; Field &apos; , &apos; CharField &apos; , &apos; IntegerField &apos; , &apos; DateField &apos; , &apos; TimeField &apos; , &apos; DateTimeField &apos; , &apos; RegexField &apos; ,
&apos;EmailField &apos; , &apos; FileField &apos; , &apos; ImageField &apos; , &apos; URLField &apos; , &apos; BooleanField &apos; , &apos; NullBooleanField &apos; , &apos; ChoiceField &apos; , &apos; MultipleChoiceField &apos; , &apos; ComboField &apos; , &apos; MultiValueField &apos; , &apos; FloatField &apos; , &apos; DecimalField &apos; , &apos; SplitDateTimeField &apos; , &apos; IPAddressField &apos; , &apos; GenericIPAddressField &apos; , &apos; FilePathField &apos; , &apos; SlugField &apos; , &apos; TypedChoiceField &apos; , &apos; TypedMultipleChoiceField &apos; . derive the class Field from the base class object .
substitute substitute TextInput for widget .
substitute HiddenInput for hidden _ widget .
default _ validators is an empty list .
default _ error _ messages is an dictionary containing entry : return value of the function _ called with an string &apos; This field is required . &apos; for &apos; required &apos; .
put elements of validators.EMPTY _ VALUES to a list , substitute the result for empty _ values .
creation _ counter is an integer 0 .
define the function _ _ init _ _ with 11 arguments : self , required set to boolean True , widget set to None , label set to None ,
initial set to None , help _ text set to an empty string , error _ messages set to None , show _ hidden _ initial set to boolean False , validators is an empty , localize set to boolean False , label _ suffix set to None. substitute required , label and initial for self.required , self.label and self.initial.
substitute show _ hidden _ initial for self.show _ hidden _ initial .
substitute help _ text for self.help _ text .
substitute label _ suffix for self.label _ suffix .
substitute self.widget if the widget is false , otherwise substitute widget for widget .
if widget is an instance of type class ,
call the function widget , substitute the result for widget .
substitute localize for self.localize.
if self.localize is true ,
widget.is _ localized is boolean True .
substitute self.required for widget.is _ required .
call the method self.widget _ attrs with an argument widget , substitute the result for extra _ attrs .
if extra _ attrs is true ,
update widget.attrs dictionary with extra _ attrs .
substitute widget for self.widget.
substitute Field.creation _ counter for self.creation _ counter .
increment Field.creation _ counter by one .
messages is an empty dictionary .
for every c in reversed order of self . _ _ class _ _ . _ _ mro _ _ ,
get &apos; default _ error _ messages &apos; from the c object , if it doesnt exists return an empty dictionary ,
use the result as the argument for the call to the messages.update function. update messages dictionary with error _ messages , if it exists , if not don &apos;t update it .
substitute messages for self.error _ messages .
add self.default _ validators and validators , substitute the result for self.validators.
call the method _ _ init _ _ from the base class of the Field class .
define the method prepare _ value with arguments : self and value .
return value .
define the method to _ python with arguments self and value .
return value .
define the method to _ python with arguments self and value .
if value is contained in self.empty _ values and self.required is true ,
raise an ValidationError with 2 arguments : value under the &apos; required &apos; key of the self.error _ messages dictionary and code set to string &apos; required &apos; .
define the method run _ validators with arguments self and value .
if value is contained in self.empty _ values ,
return nothing ,
errors is an empty list .
for every v in self.validators ,
try
call the function v with an argument value .
if ValidationError , substituted for e , exception is caught ,
if e has an attribute &apos; code &apos; and e.code is contained in self.error _ messages ,
get the value under the e.code key of the self.error _ messages dictionary , substitute the result for e.message.
extend errors list with e.error _ list .
if errors is true ,
raise an ValidationError exception with an argument errors ,
define the method clean with arguments self and value .
call the method self.to _ python with an argument value , substitute it for value .
call the method self.validate with an argument value .
call the method self.run _ validators with an argument value .
return value .
define the method bound _ data with arguments self , data and initial .
return data .
define the method widget _ attrs with arguments self and widget .
return is empty dictionary .
define the method get _ limit _ choices _ to with arguments self .
if self.limit _ choices _ to object is callable ,
call the method self.limit _ choices _ to , return the result ,
return self.limit _ choices _ to .
define the method _ has _ changed with arguments self , initial and data .
substitute initial for initial _ value , if initial is not None , if not , initial _ value is an empty string .
try ,
call the function self.to _ python with an argument data , substitute the result for data .
if self has an attribute &apos; _ coerce &apos; ,
call the method self . _ coerce with an argument data , substitute the result for data .
if ValidationError exception is caught ,
return boolean True .
substitute data for data _ value if data is not None , otherwise data _ value is an empty list .
if initial _ value is not equal to data _ value , return boolean True , otherwise return boolean False .
define the method _ _ deepcopy _ _ with arguments self and memo .
call the method copy.copy with an argument self , substitute the result for result .
substitute result for the value of the memo dictionary , with identity of the self object as an key .
call the method copy.deepcopy with arguments self.widget and memo , substitute the result for result.widget.
substitute elements of self.validators list for result.validators.
return result .
derive the class CharField from the base class Field class .
define the method _ _ init _ _ with 5 arguments : self , max _ length set to None , min _ length set to None , unpacked list args ,
and unpacked dictionary kwargs. substitute max _ length and min _ length for self.max _ length for self.min _ length .
call the method _ _ init _ _ from the base class of the class CharField , with arguments unpacked list args and unpacked dictionary kwargs .
if min _ length is not None ,
call the method validators.MinLengthValidator with min _ length converted into an integer , append the result to list self.validators.
if max _ length is not None ,
call the method validators.MaxLengthValidator with max _ length converted into an integer , append the result to list self.validators.
define the method to _ python with arguments self and value .
if value in self.empty _ values ,
return an empty string .
evaluate the function smart _ text with an argument value , return the result .
define the method widget _ attrs with arguments self and widget .
call the method widget _ attrs from the base class of the class CharField , with an argument widget , substitute the result for attrs .
if self.max _ length is not None ,
update attrs dictionary with entry : self.max _ length converted into a string for &apos; maxlength &apos; .
return attrs .
derive the class IntegerField from the base class Field class .
substitute NumberInput for widget .
default _ error _ messages is an dictionary with an initial entry : result of the function _ called with an argument string ,
&apos;Enter a whole number . &apos; for &apos; invalid &apos; . define the method _ _ init _ _ with 5 arguments : self , max _ value set to None , min _ value set to None , unpacked list args and unpacked dictionary kwargs .
substitute max _ value and min _ value for self.max _ value and self.min _ value .
get the value under the &apos; localize &apos; key of the kwargs dictionary , if it is true and self.widget equals to NumberInput ,
if &apos; widget &apos; key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value .
call the method _ _ init _ _ from the base class of the class IntegerField , with arguments unpacked list args and unpacked dictionary kwargs .
if max _ value is not None ,
call the method validators.MaxValueValidator with max _ value converted into an integer , append the result to list self.validators.
if min _ value is not None ,
call the method validators.MinValueValidator with min _ value converted into an integer , append the result to list self.validators.
define the method to _ python with arguments self and value .
call the method to _ python with an argument value , from the base class of the IntegerField class , substitute the result for value .
if value is contained in self.empty _ values ,
return None .
if self.localize is true ,
call the method formats.sanitize _ separators with an argument value , substitute the result for value .
try ,
convert value into an string , convert the result into an integer and substitute it for value .
if ValueError or TypeError exceptions are caught ,
raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
return value
define the method widget _ attrs with arguments self and widget .
call the method widget _ attrs with an argument widget , from the base class of the class IntegerField , substitute it for attrs .
if widget is an instance of the NumberInput ,
if self.min _ value is not None ,
substitute self.min _ value for the value under the &apos; min &apos; key of the attrs dictionary .
if self.max _ value is not None ,
substitute self.max _ value for the value under the &apos; max &apos; key of the attrs dictionary .
return attrs .
derive the class FloatField from the base class IntegerField class .
default _ error _ messages is an dictionary with an initial entry : result of the function _ called with an argument string ,
&apos;Enter a number . &apos; for &apos; invalid &apos; . define the method to _ python with arguments self and value .
call the method to _ python with an argument value , from the base class of the IntegerField class , substitute the result for value .
if value is contained in self.empty _ values ,
return None .
if self.localize is true ,
call the method formats.sanitize _ separators with an argument value , substitute the result for value .
try ,
convert value into an floating point number , substitute it for value .
if ValueError or TypeError exceptions are caught ,
raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
return value .
define the method validate with arguments self and value .
call the method validate with an argument value , from the base class of the FloatField class .
if value is Nan , or value is contained in return value of the Decimal called twice with string &apos; Inf &apos; and with string &apos; -Inf &apos; ,
raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
return value .
define the method widget _ attrs with arguments self and widget .
call the method widget _ attrs with an argument widget , from the base class of the FloatField class , substitute the result for attrs .
if widget is an instance of the NumberInput class , and string &apos; step &apos; is not contained in widget.attrs ,
if &apos; step &apos; attribute of attrs dictionary does not exists , set it to to string &apos; any &apos; .
return attrs .
derive the class DecimalField from the base class IntegerField class .
default _ error _ messages is a dictionary with 4 initial entries : return value of the function _ called with string as an argument ,
&apos;Enter a number . &apos; for &apos; invalid &apos; , return value of the function ungettext _ lazy called with 3 string arguments : &apos; Ensure that there are no more than % ( max ) s digit in total . &apos; , &apos; Ensure that there are no more than % ( max ) s digits in total . &apos; , and &apos; max &apos; for &apos; max _ digits &apos; , return value of the function ungettext _ lazy called with 3 string arguments : &apos; Ensure that there are no more than % ( max ) s decimal place . &apos; , &apos; Ensure that there are no more than % ( max ) s decimal places . &apos; and &apos; max &apos; , for &apos; max _ decimal _ places &apos; and return value of the function ungettext _ lazy called with 3 string arguments : &apos; Ensure that there are no more than % ( max ) s digit before the decimal point . &apos; , &apos; Ensure that there are no more than % ( max ) s digits before the decimal point . &apos; and &apos; max &apos; for &apos; max _ whole _ digits &apos; . define the method _ _ init _ _ with 7 arguments : self , max _ value set to None , min _ value set to None , max _ digits set to None ,
decimal _ places set to None , unpacked list args and unpacked dictionary kwargs. substitute max _ digits and decimal _ places for self.max _ digits and self.decimal _ places .
call the method _ _ init _ _ from the base class of the class DecimalField , with 4 arguments : max _ value , min _ value ,
unpacked list args and unpacked dictionary kwargs. define the method to _ python with arguments self and value .
if value is contained in self.empty _ values ,
return None .
if self.localize is true ,
call the method formats.sanitize _ separators with an argument value , substitute the result for value .
call the function smart _ text with an argument value , strip the result of whitespaces from both ends and substitute it for value .
try ,
value is an instance of a class Decimal created with value as an argument .
if DecimalException exception is caught ,
raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
return value .
define the method validate with arguments self and value .
call the method validate with an argument value from the base class of the DecimalField class .
if value is contained in self.empty _ values ,
return nothing .
if value is not equal to value or value equals return value of the call to Decimal with argument &apos; Inf &apos; ,
or value equals return value of the call to Decimal with argument &apos; -Inf &apos; raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
call the method value.as _ tuple , assign the result to sign , digittuple and exponent , respectively .
substitute absolute value of the exponent for decimals .
substitute length of digittuple for digits .
if decimals is greater than digits ,
substitute decimals for digits .
subtract decimals from digits , substitute the result for whole _ digits .
if self.max _ digits is not None and digits is grater than self.max _ digits ,
raise an ValidationError with 3 arguments : value under the &apos; max _ digits &apos; key of the self.error _ messages dictionary ,
code set to string &apos; max _ digits &apos; and params set to a dictionary with an entry : self.max _ digits for &apos; max &apos; . if self.decimal _ places is not None and decimals is grater than self.decimal _ places :
raise an ValidationError with 3 arguments : value under the &apos; max _ decimal _ places &apos; key of the self.error _ messages dictionary ,
code set to string &apos; max _ decimal _ places &apos; and params set to a dictionary with an entry : self.decimal _ places for &apos; max &apos; . if self.max _ digits is not None and self.decimal _ places is not None and whole _ digits is grater than the difference of ,
self.max _ digits and self.decimal _ places , raise an ValidationError with 3 arguments : value under the &apos; max _ whole _ digits &apos; key of the self.error _ messages dictionary ,
code set to string &apos; max _ whole _ digits &apos; and params set to a dictionary with an entry : difference of the self.max _ digits and self.decimal _ places , for &apos; max &apos; . return value .
define the method widget _ attrs with arguments self and widget .
call the method widget _ attrs with an argument widget , from the base class of the DecimalField class , substitute the result for attrs .
if widget is an instance of NumberInput and string &apos; step &apos; is not contained in widget.attrs.
if self.decimal _ places is not None ,
call the object Decimal with string &apos; 1&apos; as an argument , divide it by 10 , bring the result to the power of self.decimal _ places ,
convert the result to a lowercase string , substitute it for step. if not ,
step is an string &apos; any &apos; .
if &apos; step &apos; key of the attrs dictionary doesnt exists assign it step as an value .
return attrs .
derive the class BaseTemporalField from the base class Field class .
define the method _ _ init _ _ with arguments self , input _ formats set to None , unpacked list args and unpacked dictionary kwargs .
call the method _ _ init _ _ from the base class of the BaseTemporalField class , with arguments : unpacked list args and unpacked dictionary kwargs .
if input _ formats is not None ,
substitute input _ formats for self.input _ formats .
define the method to _ python with arguments self and value .
call the function force _ text with arguments value and strings _ only set to boolean True , substitute the result for unicode _ value .
if unicode _ value is an instance of six.text _ type ,
strip whitespaces from both ends of unicode _ value , substitute the result for value .
if value is an instance of six.text _ type class ,
for every format in self.input _ formats ,
try ,
call the method self.strptime with arguments value and format , return the result .
if ValueError or TypeError exceptions are caught ,
skip this loop iteration .
raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
define the method strptime with arguments self , value and format .
raise an NotImplementedError with an argument string &apos; Subclasses must define this method . &apos; .
derive the class DateField from the base class BaseTemporalField class .
substitute DateInput for widget .
call the method formats.get _ format _ lazy with an argument string &apos; DATE _ INPUT _ FORMATS &apos; , substitute the result for input _ formats .
default _ error _ messages is an dictionary with an entry : return value of the function _ called with an argument string &apos; Enter a valid date . &apos; for &apos; invalid &apos; .
define the method to _ python with arguments self and value .
if value is contained in self.empty _ values ,
return None .
if value is an instance of datetime.datetime class ,
call the method value.date , return the result .
if value is an instance of datetime.date class ,
return value .
call the method to _ python with an argument value from the base class of the DateField class , return the result .
define the method strptime with arguments self , value and format .
call the method datetime.datetime.strptime with 2 arguments : result of the function force _ str called with an argument value ,
and format , call the method date on the result , return the result. derive the class TimeField from the base class BaseTemporalField class .
substitute TimeInput for widget .
call the method formats.get _ format _ lazy with an argument string &apos; TIME _ INPUT _ FORMATS &apos; , substitute the result for input _ formats .
default _ error _ messages is an dictionary with an entry : return value of the function _ called with an argument string &apos; Enter a valid time . &apos; for &apos; invalid &apos; .
define the method to _ python with arguments self and value .
if value is contained in self.empty _ values ,
return None .
if value is an instance of datetime.time ,
return value ,
call the method to _ python with an argument value from the base class of the TimeField class , return the result .
define the method strptime with arguments self , value and format .
call the method datetime.datetime.strptime with 2 arguments : result of the function force _ str called with an argument value ,
and format , call the method time on the result , return the result. derive the class DateTimeField from the base class BaseTemporalField class .
substitute DateTimeInput for widget .
call the method formats.get _ format _ lazy with an argument string &apos; DATETIME _ INPUT _ FORMATS &apos; , substitute the result for input _ formats .
default _ error _ messages is an dictionary with an entry : return value of the function _ called with an argument string &apos; Enter a valid date / time . &apos; for &apos; invalid &apos; .
define the method prepare _ value with arguments self and value .
if value is an instance of datetime.datetime ,
call the function to _ current _ timezone with an argument value , substitute the result for value .
return value .
define the method to _ python with arguments self and value .
if value is contained in self.empty _ values ,
return None .
if value is an instance of datetime.datetime ,
call the function _ _ current _ timezone with an argument value , return the result .
if value is an instance of datetime.date ,
call the function datetime.datetime with 3 arguments : value.year , value.month and value.day , substitute the result for result .
call the function from _ current _ timezone with an argument result , return the result .
if value is an instance of list type ,
call the function warnings.warn with 3 arguments : string &apos; Using SplitDateTimeWidget with DateTimeField is deprecated . &apos;
&apos;Use SplitDateTimeField instead . &apos; , RemovedInDjango19Warning and stacklevel set to integer 2. if length of value is not equal to integer 2 ,
raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
if first and second elements of value are contained in self.empty _ values ,
return None .
substitute &apos; % s &apos; in string &apos; % s % s &apos; with the elements of value converted into a tuple , substitute the result for value .
call the method to _ python with an argument value from the base class of the DateTimeField class , substitute the result for result .
call the function from _ current _ timezone with an argument , return the result .
define the method strptime with arguments self , value and format .
call the method datetime.datetime.strptime with 2 arguments : result of the function force _ str called with an argument value ,
and format , return the result. derive the class RegexField from the base class CharField class .
define the method _ _ init _ _ with 7 arguments : self , regex , max _ length set to None , min _ length set to None , error _ message set to None ,
if error _ message is not None ,
get the value under the &apos; error _ messages &apos; key of the kwargs dictionary , if it exists substitute it for error _ messages , if not ,
error _ messages is an empty dictionary. substitute error _ message for value under the &apos; invalid &apos; key of the error _ messages dictionary .
substitute error _ messages for value under the &apos; &apos; error _ messages &apos; key of the kwargs dictionary .
call the method _ _ init _ _ from the base class of the class RegexField , with 4 arguments : max _ length , min _ length , unpacked list args ,
unpacked dictionary kwargs. call the method self . _ set _ regex with an argument regex .
define the method _ get _ regex an argument self .
return self . _ regex .
define the method _ set _ regex with arguments self and regex .
if regex is an instance of six.string _ types class ,
call the function re.compile with 2 arguments regex , re.UNICODE and substitute the result for regex .
substitute regex for self . _ regex .
if self has an &apos; _ regex _ validator &apos; attribute and self . _ regex _ validator is contained in self.validators ,
remove self . _ regex _ validator from self.validators.
call the method validators.RegexValidator with an argument regex set to regex , substitute it for self . _ regex _ validator .
append self . _ regex _ validator to self.validators.
regex is an property object of this class , with _ get _ regex getter and _ set _ regex setter function .
derive the class EmailField from the base class CharField class .
substitute EmailInput for widget .
default _ validators is a list with an element validators.validate _ email .
define the method clean with 2 arguments self and value .
call the method self.to _ python with an argument value , strip the whitespaces from the both ends of the result and substitute it for value .
call the method clean with an argument value from the base class of the EmailField class .
derive the class FileField from the base class Field class .
substitute ClearableFileInput for widget .
default _ error _ messages is an dictionary with 5 initial entries : return value of the function _ called with an argument string ,
&quot; No file was submitted . Check the encoding type on the form . &quot; for &apos; invalid &apos; , return value of the function _ called with an argument , string &quot; No file was submitted . &quot; for &apos; missing &apos; , return value of the function _ called with an argument &quot; The submitted file is empty . &quot; , for &apos; empty &apos; , return value of the function ungettext _ lazy called with 3 arguments : string &apos; Ensure this filename has at most % ( max ) d character ( it has % ( length ) d ) . &apos; , string &apos; Ensure this filename has at most % ( max ) d characters ( it has % ( length ) d ) . &apos; and string &apos; max &apos; for &apos; max _ length &apos; , and return value of the function _ called with an argument string , &apos; Please either submit a file or check the clear checkbox , not both . &apos; for &apos; contradiction &apos; . define the method _ _ init _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
remove the value under &apos; max _ length &apos; key from the kwargs dictionary and if the key exists substitute it for self.max _ length ,
if not self.max _ length is None. remove the value under &apos; allow _ empty _ file &apos; key from the kwargs dictionary and if the key exists ,
substitute it for self.allow _ empty _ file , if not self.allow _ empty _ file is boolean False. call the method _ _ init _ _ from the base class of the FileField class , with 2 arguments : unpacked list args and unpacked dictionary .
define the method to _ python with arguments self and data .
if data in self.empty _ values is true ,
return None .
try ,
substitute data.name for file _ name .
substitute data.size for file _ name .
if AttributeError exception is caught ,
raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
if self.max _ length is not None and length of file _ name is grater than self.max _ length ,
params is a dictionary with 2 initial entries : self.max _ length for &apos; max &apos; and length of file _ name for &apos; length &apos; .
raise an ValidationError with 2 arguments : value under the &apos; max _ length &apos; key of the self.error _ messages dictionary and code set to &apos; max _ length &apos; .
if file _ name is false ,
raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
if self.allow _ empty _ file and file _ size are both false ,
raise an ValidationError with 2 arguments : value under the &apos; empty &apos; key of the self.error _ messages dictionary and code set to &apos; empty &apos; .
return data .
define the method clean with arguments self , data and initial set to None .
if data is bound to the same object as FILE _ INPUT _ CONTRADICTION ,
raise an ValidationError with 2 arguments : value under the &apos; contradiction &apos; key of the self.error _ messages dictionary and code set to &apos; contradiction &apos; .
if data is boolean False ,
if self.required is false ,
return boolean False .
data is None .
if data is false and initial is true ,
return initial .
call the method clean with an argument data from the base class of the class FileField , return the result .
define the method bound _ data with arguments self , data and initial .
if data is not None or FILE _ INPUT _ CONTRADICTION ,
return initial .
return data .
define the method _ has _ changed with arguments self , data and initial .
if data is None ,
return is boolean False .
return is boolean True .
derive the class ImageField from the base class FileField class .
default _ error _ messages is an dictionary with an entry : return value of the function _ called with an argument string ,
&apos; &quot; Upload a valid image . The file you uploaded was either not an image or a corrupted image . &quot; &apos; for &apos; invalid _ image &apos; . define the method to _ python with arguments self and data .
call the method to _ python with an argument data from the base class of the class ImageField , substitute the result for f .
if f is None ,
return None .
from PIL import Image into default namespace .
if data has an &apos; temporary _ file _ path &apos; attribute ,
substitute the result of the function data.temporary _ file _ path for file .
if not ,
if data has an attribute &apos; read &apos; ,
file is an instance of BytesIO class created with an argument : return value of the method data.read.
if not ,
file is an instance of BytesIO class created with an argument : value under the &apos; content &apos; key of the data dictionary .
try ,
call the method Image.open with an argument file , on the result call the verify method
if Exception exception is caught ,
call the function six.reraise with 3 arguments : ValidationError , ValidationError created with 2 arguments :
value under the &apos; invalid _ image &apos; key of the self.error _ messages dictionary and code set to a string &apos; invalid _ image &apos; , and third element of the return value of the function sys.exc _ info. if f has an attribute &apos; seek &apos; and if f.seek is an callable object ,
call the method f.seek with an argument integer 0 .
return f .
derive the class URLField from the base class CharField class .
substitute URLInput for widget .
default _ error _ messages is an dictionary with an entry : return value of the function _ called with an argument string &apos; Enter a valid URL . &apos; for &apos; invalid &apos; .
default _ validators is a list with an element , return value of the validators.URLValidator method .
define the method to _ python with arguments self and data .
define the function split _ url with an argument url .
try ,
call the urlsplit with an argument url , convert the result into a list and return it .
if ValueError exception is caught ,
raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
call the method to _ python with an argument data from the base class of the class URLField , substitute the result for value .
if value is true ,
call the function split _ url with an argument value , substitute the result for url _ fields .
if first element of the url _ fields is false ,
first element of url _ fields is string &apos; http &apos; .
if second element of url _ fields is false ,
substitute third element of url _ fields for second element of url _ fields .
third element of url _ fields is an empty string .
call the function urlunsplit with an argument url _ fields , use the result as an argument for the call to the function split _ url ,
substitute the result for url _ fields. call the function urlunsplit with an argument url _ fields , substitute the result for value .
return value .
define the method clean with arguments self and value .
call the method self.to _ python with an argument value , strip the whitespaces from the result , substitute it for value .
call the method clean with an argument data from the base class of the class URLField , return the result .
derive the class BooleanField from the base class Field class .
substitute CheckboxInput for widget .
define the method to _ python with arguments self and value .
if value is an instance of six.string _ types and value converted to lowercase is not equal to strings &apos; false &apos; or &apos; 0&apos; ,
value is boolean False .
if not ,
convert value into boolean and substitute it for value .
call the method to _ python with an argument data from the base class of the class BooleanField , return the result .
define the method validate with arguments self and value .
if value is false and self.required is true ,
raise an ValidationError with 2 arguments : value under the &apos; required &apos; key of the self.error _ messages dictionary and code set to &apos; required &apos; .
define the method _ has _ changed with arguments self , initial and data .
if initial equals a string &apos; False &apos; ,
initial is boolean False .
convert initial and data into boolean , if they are not equal return boolean True , if they are return boolean False .
derive the class NullBooleanField from the base class BooleanField class .
substitute NullBooleanSelect for widget .
define the method to _ python with arguments self and value .
if value is boolean True , string &apos; True &apos; or string &apos; 1&apos; ,
return boolean True .
otherwise if value is boolean False , string &apos; False &apos; or string &apos; 0&apos;
return boolean False ,
if not ,
return None .
define the method validate with arguments self and value .
do nothing .
define the method _ has _ changed with arguments self , initial and data .
if initial is not None ,
convert initial into boolean and substitute it for initial .
if data is not None ,
convert data into boolean and substitute it for data .
if initial is not equal to data , return boolean True , if it is return boolean False .
derive the class ChoiceField from the base class Field class .
substitute Select for widget .
default _ error _ messages is an dictionary with an entry : return value of the function _ called with an argument string ,
&apos;Select a valid choice . % ( value ) s is not one of the available choices . &apos; for &apos; invalid _ choice &apos; . define the method _ _ init _ _ with 9 arguments : self , choices set to an empty tuple , required set to boolean True , widget set to None ,
label set to None , initial set to None , help _ text set to an empty string , unpacked list args and unpacked dictionary kwargs. call the _ _ init _ _ method of the base class of the class ChoiceField , called with 7 arguments : required set to required ,
widget set to widget , label set to label , initial set to initial , help _ text set to help _ text , unpacked list args , and unpacked dictionary kwargs. substitute choices for self.choices.
define the method _ _ deepcopy _ _ with arguments self and memo .
call the method _ _ deepcopy _ _ with an argument memo from the base class of the class ChoiceField , substitute the result for result .
call the method copy.deepcopy with arguments self . _ choices and memo , substitute the result for result . _ choices .
return result .
define the method _ get _ choices with an argument self .
return self . _ choices .
define the method _ set _ choices with arguments self and value .
self . _ choices and self.widget.choices are assigned value converted into a list .
choices is an property object of this class where _ get _ choices is a getter and _ set _ choices is a setter function .
define the method to _ python with arguments self and value .
if value is contained in self.empty _ values ,
return an empty string .
call the function smart _ text with an argument value , return the result .
define the method validate with arguments self and value .
call the method validate with an argument value from the base class of the class ChoiceField .
if value is true and method self.valid _ value called with an argument value evaluates to false ,
raise an ValidationError with 3 arguments : value under the &apos; invalid _ choice &apos; key of the self.error _ messages dictionary ,
code set to an string &apos; invalid _ choice &apos; and dictionary params with an entry : value for &apos; value &apos; . define the method valid _ value with arguments self and value .
call the function force _ text with an argument value , substitute the result for text _ value .
for every k and v in self.choices ,
if v is an instance of list or tuple type ,
for every k2 and v2 in v ,
if value equals k2 or text _ value equals return value of the function force _ text called with argument k2 ,
return boolean True .
if not ,
if value equals k or text _ value equals return value of the function force _ text called with argument k ,
return boolean True .
return boolean False .
derive the class TypedChoiceField from the base class ChoiceField class .
define the method _ _ init _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
if &apos; coerce &apos; key of the kwargs dictionary exists remove it and substitute its value for self.coerce ,
if not , self.coerce is an identity lambda function with an argument val. if &apos; empty _ value &apos; key of the kwargs dictionary exists remove it and substitute its value for self.empty _ value ,
if not , sself.empty _ value is an empty string. call the method _ _ init _ _ with 2 arguments : unpacked list args and unpacked dictionary kwargs ,
from the base class of the class TypedChoiceField. define the method _ coerce with arguments self and value .
if value equals self.empty _ value or value is contained in self.empty _ values ,
return self.empty _ value .
try ,
call the function self.coerce with an argument value , substitute it for value .
if ValueError , TypeError or ValidationError exception is caught ,
raise an ValidationError with 3 arguments : value under the &apos; invalid _ choice &apos; key of the self.error _ messages dictionary ,
code set to an string &apos; invalid _ choice &apos; and dictionary params with an entry : value for &apos; value &apos; . return value .
define the method clean with arguments self and value .
call the method clean with an argument value from the base class of the class TypedChoiceField , substitute the result for value .
call the method self . _ coerce with an argument value , return the result .
derive the class MultipleChoiceField from the base class ChoiceField class .
substitute MultipleHiddenInput for hidden _ widget .
substitute SelectMultiple for widget .
default _ error _ messages is an dictionary with an entry : return value of the function _ called with an argument string ,
&apos;Select a valid choice . % ( value ) s is not one of the available choices . &apos; for &apos; invalid _ choice &apos; , and return value of the function _ called with an argument string &apos; Enter a list of values . &apos; for &apos; invalid _ list &apos; . define the method to _ python with arguments self and value .
if value is false ,
return an empty list .
otherwise if value is not an instance of list ot tuple type ,
raise an ValidationError with 2 arguments : value under the &apos; invalid _ list &apos; key of the self.error _ messages dictionary and code set to &apos; invalid _ list &apos; .
for every val in value call the function smart _ text with an argument val , return the results in a lit .
define the method validate with arguments self and value .
if self.required is true and value is false ,
raise an ValidationError with 3 arguments : value under the &apos; required &apos; key of the self.error _ messages dictionary ,
and code set to an string &apos; required &apos; . for every val in value ,
call the method self.valid _ value with an argument val , if it evaluates to false ,
raise an ValidationError with 3 arguments : value under the &apos; invalid _ choice &apos; key of the self.error _ messages dictionary ,
code set to an string &apos; invalid _ choice &apos; and dictionary params with an entry : val for &apos; value &apos; . define the method _ has _ changed with arguments self , initial and data .
if initial is None ,
initial is an empty list .
if data is None ,
data is an empty list .
if lengths of initial and data are not the same ,
return boolean True .
for every value in initial call the function force _ text with an argument value , add the results into a set , substitute the resulting set for initial _ set .
for every value in data call the function force _ text with an argument value , add the results into a set , substitute the resulting set for data _ set .
if data _ set is not equal to initial _ set , return boolean True , otherwise return boolean False .
derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class .
define the method _ _ init _ _ with 3 arguments : self unpacked list args and unpacked dictionary kwargs .
if &apos; coerce &apos; key of the kwargs dictionary exists remove it and substitute its value for self.coerce ,
if not , self.coerce is an identity lambda function with an argument val. if &apos; empty _ value &apos; key of the kwargs dictionary exists remove it and substitute its value for self.empty _ value ,
if not , self.empty _ value is an empty list. call the method _ _ init _ _ with 2 arguments : unpacked list args and unpacked dictionary kwargs ,
from the base class of the class TypedMultipleChoiceField. define the method _ coerce with arguments self and value .
if value equals self.empty _ value or value is contained in self.empty _ values ,
return self.empty _ value .
new _ value is an empty list .
for every choice in value ,
try ,
call the method self.coerce with an argument choice , append the result to new _ value .
if ValueError , TypeError or ValidationError exception is caught ,
raise an ValidationError with 3 arguments : value under the &apos; invalid _ choice &apos; key of the self.error _ messages dictionary ,
code set to an string &apos; invalid _ choice &apos; and dictionary params with an entry : choice for &apos; value &apos; . return new _ value .
define the method clean with arguments self and value .
call the method clean with an argument value from the base class of the class TypedMultipleChoiceField , substitute the result for value .
call the method self . _ coerce with an argument value , return the result .
define the method validate with arguments self and value .
if value is not equal self.empty _ value ,
call the method validate with an argument value from the base class of the class TypedMultipleChoiceField .
otherwise if self.required is true ,
raise an ValidationError with 2 arguments : value under the &apos; required &apos; key of the self.error _ messages dictionary and code set to &apos; required &apos; .
derive the class ComboField from the base class Field class .
define the method _ _ init _ _ with arguments : self , fields set to an empty tuple , unpacked list args and unpacked dictionary kwargs .
call the method _ _ init _ _ with 2 arguments : unpacked list args and unpacked dictionary kwargs , from the base class of the class ComboField .
for every f in fields ,
f.required is boolean False .
substitute fields for self.fields.
define the method clean with arguments self and value .
call the method clean with an argument value from the base class of the class ComboField .
for every field in self.fields ,
call the method field.clean with an argument value , substitute the result for value .
return value .
derive the class MultiValueField from the base class Field class .
default _ error _ messages is an dictionary with 2 entries : return value of the function _ called with an argument string ,
&apos;Enter a list of values . &apos; for &apos; invalid &apos; and return value of the function _ called with an argument string , &apos; Enter a complete value . &apos; for &apos; incomplete &apos; . define the method _ _ init _ _ with arguments self , fields set to an empty ilst , unpacked list args and unpacked dictionary kwargs .
if &apos; require _ all _ fields &apos; key of the kwargs dictionary exists remove it and substitute its value for self.require _ all _ fields ,
if not , self.require _ all _ fields is boolean True. call the method _ _ init _ _ with 2 arguments : unpacked list args and unpacked dictionary kwargs , from the base class of the class MultiValueField .
for every f in fields ,
if &apos; incomplete &apos; key of the f.error _ messages doesnt exists , assign it the value under the &apos; incomplete &apos; key of the self.error _ messages dictionary .
if self.require _ all _ fields is true ,
f.required is boolean False .
substitute fields for self.fields.
define the method _ _ deepcopy _ _ with arguments self and memo .
call the method _ _ deepcopy _ _ with an argument memo , from the base class of the class MultiValueField , substitute the result for result .
for every x in self.fields call the method x . _ _ deepcopy _ _ with an argument memo , put the result into a tuple , substitute it for result.fields.
return result .
define the method validate with arguments self and value .
do nothing .
define the method clean with arguments self and value .
clean _ data is an empty list .
errors is an empty list .
if value is false or value is not an instance of list or tuple types ,
if value is false or for every v in value every v is contained in self.empty _ values ,
if self.required is true ,
raise an ValidationError with 2 arguments : value under the &apos; required &apos; key of the self.error _ messages dictionary and code set to &apos; required &apos; .
if not ,
call the function self.compress with empty list as an argument , return the result .
if not ,
raise an ValidationError with 2 arguments : value under the &apos; invalid &apos; key of the self.error _ messages dictionary and code set to &apos; invalid &apos; .
for every i and field in enumerated iterable self.fields ,
try ,
substitute i-th element of value for field _ value .
if IndexError exception is caught ,
field _ value is None .
if field _ value is cotained in self.empty _ values ,
if self.require _ all _ fields is boolean true ,
if self.required is boolean true ,
raise an ValidationError with 2 arguments : value under the &apos; required &apos; key of the self.error _ messages dictionary and code set to &apos; required &apos; .
otherwise if field.required is true ,
get the value under the &apos; incomplete &apos; key of the field.error _ messages dictionary , if it is not contained in errors ,
get the value under the &apos; incomplete &apos; key of the field.error _ messages dictionary , append it to errors .
skip this loop iteration ,
try ,
call the method field.clean with an argument field _ value , append the result to clean _ data .
if ValidationError , renamed to e , is caught ,
extend errors list with m for every m in e.error _ list , only if m is not in errors .
if errors is true ,
raise an ValidationError with an argument errors .
call the method self.compress with an argument clean _ data , substitute the result for out .
call the method self.validate with an argument out .
call the method self.run _ validators with an argument out .
return out .
define the method compress with arguments self and data _ list .
raise an NotImplementedError with an argument string &apos; Subclasses must implement this method . &apos; .
define the method has _ changed with arguments self , initial and data .
if initial is None ,
for every x in sequence of integer from integer 0 to length of data , append an empty string to a list , substitute the resulting list for initial .
if not ,
if initial is not an instance of the list type ,
call the method self.widget.decompress with an argument initial , substitute the result for initial .
for every field , initial and data in list of tuples tuple containing elements of self.fields , initial and data , respectively ,
call the method field . _ has _ changed with 2 arguments : return value of the function field.to _ python called with an argument initial ,
and data , if it evaluates to true , return boolean True .
return boolean False .
derive the class FilePathField from the base class ChoiceField class .
define the method _ _ init _ _ with 13 arguments : self , path , match set to None , recursive set to boolean False ,
allow _ files set to boolean True , allow _ folders set to boolean False , required set to boolean True , widget set to None , label set to None , initial set to None , help _ text set to an empty string , unpacked list args , unpacked dictionary kwargs. substitute path , match and recursive for self.path , self.match and self.recursive.
substitute allow _ files and allow _ folders for self.allow _ files and self.allow _ folders .
call the _ _ init _ _ method of the base class of the class FilePathField , with arguments : choices set to an empty tuple , 4
required set to required , widget set to widget , label set to label , initial st to initial , help _ text set to help _ text , unpacked list args , unpacked dictionary kwargs. if self.required is true ,
self.choices is an empty list .
if not ,
self.choices is an list containing an tuple with 2 elements : an empty string and string &quot; --------- &quot; .
if self.match is not None ,
compile self.match regular expression , substitute it for self.match _ re .
if recursive is true ,
for root , dirs and files in sorted list of the directory tree starting from the directory self.path ,
if self.allow _ files is true ,
for every f in files ,
if self.match is None or call to the method self.match _ re.search with an argument f , evaluated to true ,
join root and f into a file , substitute it for f .
append a tuple with 2 elements : f and f with first occurrence of the path replaced with an empty string , to self.choices.
if self.allow _ folders is true ,
for every f in files ,
if f equals to string &apos; _ _ pycache _ _ &apos; ,
skip this loop execution .
if self.match is None or call to the method self.match _ re.search with an argument f , evaluated to true ,
join root and f in path , substitute the result for f .
append a tuple with 2 elements : f and f with first occurrence of the path replaced with an empty string , to self.choices.
if not ,
try ,
for f in sorted list of the files in the self.path directory ,
if f equals to string &apos; _ _ pycache _ _ &apos; ,
skip this loop execution .
join self.path and f in path , substitute the result for full _ file .
if self.allow _ files is true and full _ file is a file , or if self.allow _ folders is true and full _ file is an directory ,
and only if self.match is None or return value of the method self.match _ re.search called with an argument f is true. append a tuple containing 2 elements : full _ file and f to self.choices list .
if OSError exception is caught ,
do nothing .
substitute self.choices for self.widgetchoices.
derive the class SplitDateTimeField from the base class MultiValueField class .
substitute SplitDateTimeWidget for widget .
substitute SplitHiddenDateTimeWidget for hidden _ widget .
default _ error _ messages is an dictionary with 2 entries : return value of the function _ called with an string &apos; Enter a valid date . &apos; ,
for &apos; invalid _ date &apos; and return value of the function _ called with an string &apos; Enter a valid time . &apos; , for &apos; invalid _ time. define the method _ _ init _ _ with 3 arguments : self , input _ date _ formats set to None , input _ time _ formats set to None ,
and errors set to the result of self.default _ error _ messages.copy.
if &apos; error _ messages &apos; is contained in kwargs ,
get the value under the &apos; error _ messages &apos; key of the kwargs dictionary , update errors dictionary with it .
get the value under the &apos; localize &apos; key of the kwargs dictionary , substitute it for localize , if the key doesnt exists , substitute the result for localize .
fields is an tuple containing instances of the class DateField , created with 3 arguments : input _ formats set to input _ date _ formats ,
error _ messages as an dictionary with an entry : value under the &apos; invalid _ date &apos; of errors dictionary for &apos; invalid &apos; , localize set to localize , and an instance of the class TimeField created with 3 arguments : input _ formats set to input _ time _ formats , error _ messages as an dictionary with an entry : value under the &apos; invalid _ time &apos; of errors dictionary for &apos; invalid &apos; , localize set to localize call the _ _ init _ _ method with fields , unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class .
define the method compress with arguments self and data _ list .
if data _ list is true ,
if first element of data _ list is contained in self.empty _ values ,
raise an ValidationError with 2 arguments : value under the &apos; invalid _ date &apos; key of the self.error _ messages dictionary and code set to string &apos; invalid _ date &apos; .
if second element of data _ list is contained in self.empty _ values ,
raise an ValidationError with 2 arguments : value under the &apos; invalid _ time &apos; key of the self.error _ messages dictionary and code set to string &apos; invalid _ time &apos; .
call the method datetime.datetime.combine with unpacked list data _ list , substitute the result for result .
call the method from _ current _ timezone with an argument result , return the result .
return None .
derive the class IPAddressField from the base class CharField class .
default _ validators is an list containing validators.validate _ ipv4 _ address .
define the method _ _ init _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
call the function warnings.warn with 2 arguments string &quot; IPAddressField has been deprecated . Use GenericIPAddressField instead . &quot; ,
and RemovedInDjango19Warning. call the _ _ init _ _ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class .
define the method to _ python with arguments self and value .
if value is contained in self.empty _ values ,
return an empty string .
strip whitespaces from both sides of the value , return the result .
derive the class GenericIPAddressField from the base class CharField class .
define the method _ _ init _ _ with 5 arguments : self , protocol set to string &apos; both &apos; , unpack _ ipv4 set to boolean False ,
unpacked list args , unpacked dictionary kwargs. substitute unpack _ ipv4 for self.unpack _ ipv4 .
call the method validators.ip _ address _ validators with arguments protocol , unpack _ ipv4 , substitute first element of the result for self.default _ validators .
call the _ _ init _ _ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class .
define the method to _ python with arguments self and value .
if value is contained in self.empty _ values ,
return an empty string .
strip whitespaces from both sides of the value , substitute it for value .
if value is true and character &apos; : &apos; is contained in value ,
call the function clean _ ipv6 _ address with arguments value and self.unpack _ ipv4 , return the result .
return value .
derive the class SlugField from the base class CharField class .
default _ validators is an list containing validators.validate _ slug .
define the method clean with arguments self and value .
call the self.to _ python method with an argument value , strip the result of the whitespaces from the sides , substitute the result for value .
call the clean method wiht value argument from the base class of the SlugField class , return the result .
from _ _ future _ _ import unicode _ literals into default name space .
from collections import OrderedDict into default name space .
import module copy .
import module datetime .
import module warnings .
from django.core.exceptions import ValidationError and NON _ FIELD _ ERRORS into default name space .
from django.forms.fields import Field and FileField into default name space .
from django.forms.utils import flatatt , ErrorDict and ErrorList into default name space .
from django.forms.widgets import Media , MediaDefiningClass , TextInput and Textarea into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
from django.utils.encoding import smart _ text , force _ text and python _ 2 _ unicode _ compatible into default name space .
from django.utils.html import conditional _ escape and format _ html into default name space .
from django.utils.safestring import mark _ safe into default name space .
from django.utils.translation import ugettext as _ into default name space .
from django.utils import six into default name space .
_ _ all _ _ is an tuple with 2 elements : strings &apos; BaseForm &apos; and &apos; Form &apos; .
define the function pretty _ name with an argument name .
if name is false ,
return an empty string .
replace all the occurrences of character &apos; _ &apos; in name with a whitespace , capitalize the first letter and return the result .
define the function get _ declared _ fields with 3 arguments : bases , attrs and with _ base _ fields set to boolean True .
call the function warnings.warn with 3 arguments : string &quot; get _ declared _ fields is deprecated and will be removed in Django 1.9 . &quot; ,
RemovedInDjango19Warning , stacklevel set to integer 2. for field _ name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs .
if obj is an instance of Field , append to a list a tuple with 2 elements : field _ name , and poped value under the field _ name key of the attrs dictionary , substitute the resulting list for fields. sort fields elements with key being a lambda function with argument x and return value creation _ counter filed of first element of x .
if with _ base _ fields is true ,
for every base in reversed order of bases ,
if base has an attribute &apos; base _ fields &apos; .
call the method six.iteritems with an argument base.base _ fields , convert it to a list and append fields to it , substitute the result for fields .
if not ,
for every base in reversed order of bases ,
if base has an &apos; declared _ fields &apos; attribute ,
call the method six.iteritems with an argument base.declared _ fields , convert it to a list and append fields to it , substitute the result for fields .
return an instance of OrderedDict class , created with an argument fields .
derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass .
define the method _ _ new _ _ with 4 arguments : mcs , name , bases and attrs .
current _ fields is an empty list .
for every key and value in list created out of the elements of the result of the call to the method attrs.items ,
if value is an instance of Field class ,
append a tuple with elements key and value to current _ fields .
remove entry at the key key of the attrs dictionary .
sort current _ fields elements with key being a lambda function with argument x and return value creation _ counter filed of first element of x .
value under the &apos; declared _ fields &apos; key of the attrs dictionary is an instance of OrderedDict class , created with an argument current _ fields .
call the method _ _ new _ _ from the base class of the class DeclarativeFieldsMetaclass , with 4 arguments : mcs , name , bases and attrs .
declared _ fields is an instance of OrderedDict class .
for every base in new _ class . _ _ mro _ _ in reversed order ,
if base has an attribute &apos; declared _ fields &apos; ,
update declared _ fields dictionary with entry base.declared _ fields .
call the method base . _ _ dict _ _ .items , for every attr and value in the result ,
if value is None and attr is contained in declared _ fields ,
remove entry at the attr key of the declared _ fields dictionary .
substitute declared _ fields for new _ class.base _ fields .
substitute declared _ fields for new _ class.declared _ fields .
return new _ class .
python _ 2 _ unicode _ compatible decorator ,
derive the class BaseForm from the base class object .
define the method _ _ init _ _ with 4 arguments : self , data set to None , files set to None , auto _ id is an string &apos; id _ % s &apos; , prefix is None ,
initial set to None , error _ class set to ErrorList , label _ suffix set to None , empty _ permitted set to boolean False. if data is not None or files is not None , self.is _ bound is boolean True , otherwise it is boolean False .
if data is true , substitute it for self.data , if not self.data is an empty dictionary .
if files is true , substitute it for self.files , if not self.files is an empty dictionary .
substitute auto _ id for self.auto _ id .
substitute prefix for self.prefix.
if initial is true , substitute it for self.initial , if not self.files is an empty dictionary .
substitute .error _ class for self.error _ class .
if label _ suffix is not None substitute label _ suffix for self.label _ suffix ,
otherwise substitute return value of the function _ called with an argument &apos; : &apos; for self.label _ suffix. substitute empty _ permitted for self.empty _ permitted .
self . _ errors is None .
self . _ changed _ data is None .
call the function copy.deepcopy with an argument self.base _ fields , substitute the result for self.fields.
define the method _ _ str _ _ with an argument self .
call the method self.as _ table , return the result .
define the method _ _ iter _ _ with an argument self .
for every name in self.fields ,
get the value under the name key of the self dictionary , yield it as the return value of the generator .
define the method _ _ getitem _ _ with 2 arguments : self and name .
try ,
get the value under the name key of the self.fields dictionary , substitute it for field .
if KeyError exception is caught ,
raise an KeyError with an argument string &quot; Key % r not found in &apos; % s &apos; &quot; , substitute &apos; % s &apos; with name and self . _ _ class _ _ . _ _ name _ _ .
return an instance of BoundField class , created with arguments self , field and name .
property decorator ,
define the method errors with an argument self .
if self . _ errors is None ,
call the method self.full _ clean .
return self . _ errors .
define the method is _ valid with an argument self .
if self.is _ bound is true and self.errors is false , return boolean True , otherwise return boolean False .
define the method add _ prefix with 2 arguments : self and field _ name .
substitute &apos; % s &apos; in string &apos; % s- % s &apos; with self.prefix and field _ name and return it , if self.prefix is true , if not return field _ name .
define the method add _ initial _ prefix with 2 arguments : self and field _ name .
return string &apos; initial- % s &apos; where &apos; % s &apos; is replaced with return value of the self.add _ prefix method called with an argument field _ name .
define the method _ html _ output with 6 arguments : self , normal _ row , error _ row , row _ ender , help _ text _ html and errors _ on _ separate _ row .
call the method self.non _ field _ errors , substitute the result for top _ errors .
output and hidden _ fields are both empty lists .
call the method self.fields.items , for every name and field in return value ,
html _ class _ attr is an empty string .
substitute value under the name key for bf .
call the method self.error _ class with an argument list containing results of the function conditional _ escape ,
called with an argument error , for every error in bf.errors , substitute the result for bf _ errors. if bf.is _ hidden is true ,
if bf _ errors is true ,
call the function _ with an argument string &apos; ( Hidden field % ( name ) s ) % ( error ) s &apos; , where &apos; % ( name ) s &apos; is replaced with name ,
and &apos; % ( error ) s &apos; is replaced with return value of the force _ text function called with an argument e , extend the top _ errors with the result. call the function six.text _ type with an argument bf , append the result to hidden _ fields .
if not ,
call the method bf.css _ classes , substitute the result for css _ classes .
if css _ classes is true ,
replace &quot; % s &quot; from the string &apos; class = &quot; % s &quot; &apos; with css _ classes , substitute it for html _ class _ attr .
if errors _ on _ separate _ row and bf _ errors are both true ,
call the function force _ text with an argument bf _ errors , format the error _ row string with the result , append it to the output .
if bf.label is true ,
call the function force _ text with an argument bf.label , use the result as an argument for the call to the function conditional _ escape , substitute the result label .
call the function bf.label _ tag with an argument label , if the result is true substitute it for label , otherwise label is an empty string .
if not ,
label is an empty string .
if field.help _ text is true ,
call the function force _ text with an argument field.help _ text , format help _ text _ html with it , substitute the result for help _ text .
if not ,
label is an empty string .
format string normal _ row with an dictionary containing 6 entries : return value of the function force _ text with an argument bf _ errors ,
for &apos; errors &apos; , return value of the function force _ text with an argument label for &apos; label &apos; , return value of the function six.text _ type , with an argument bf , for &apos; field &apos; , help _ text for help _ text , html _ class _ attr for &apos; html _ class _ attr &apos; and bf.html _ name for &apos; field _ name &apos; . if top _ errors is true ,
call the function force _ text with an argument top _ errors , format error _ row with it , insert it at the beginning of output .
if hidden _ fields is true ,
join hidden _ fields elements into a string , without separation , substitute the result for str _ hidden .
if output is true ,
substitute last element of output for last _ row .
if last _ row doesnt ends with row _ ender ,
format string normal _ row with an dictionary containing 5 entries : an empty string for &apos; errors &apos; , empty string for &apos; label &apos; ,
empty string for &apos; field &apos; , empty string for &apos; help _ text &apos; and html _ class _ attr for html _ class _ attr. append last _ row to output .
create list out of last _ row elements from the start to the last length of row _ ender element , append str _ hidden and row _ ender to it ,
substitute the result for last element of output. if not ,
append str _ hidden to output .
join elements of output into a string with newline as separator , use it as an argument for the call to the function mark _ safe , return it .
define the method as _ table with an argument self .
return the result of the method self . _ html _ output , called with 5 arguments : normal _ row to a string ,
&apos; &lt; tr % ( html _ class _ attr ) s &gt; &lt; th &gt; % ( label ) s &lt; / th &gt; &lt; td &gt; % ( errors ) s % ( field ) s % ( help _ text ) s &lt; / td &gt; &lt; / tr &gt; &apos; , error _ row set to a a string , &apos; &lt; tr &gt; &lt; td colspan = &quot; 2 &quot; &gt; % s &lt; / td &gt; &lt; / tr &gt; &apos; , row _ ender set to a string &apos; &lt; / td &gt; &lt; / tr &gt; &apos; , help _ text _ html set to a string , &apos; &lt; br / &gt; &lt; span class = &quot; helptext &quot; &gt; % s &lt; / span &gt; &apos; and errors _ on _ separate _ row set to boolean False. define the method as _ ul with an argument self .
return the result of the method self . _ html _ output , called with 5 arguments : normal _ row to a string ,
&apos; &lt; li % ( html _ class _ attr ) s &gt; % ( errors ) s % ( label ) s % ( field ) s % ( help _ text ) s &lt; / li &gt; &apos; , error _ row set to a a string &apos; &lt; li &gt; % s &lt; / li &gt; &apos; , row _ ender set to a string &apos; &lt; / li &gt; &apos; , help _ text _ html set to a string , &apos; &lt; span class = &quot; helptext &quot; &gt; % s &lt; / span &gt; &apos; , and errors _ on _ separate _ row set to boolean False. define the method as _ p with an argument self .
return the result of the method self . _ html _ output , called with 5 arguments : normal _ row to a string ,
&apos; &lt; p % ( html _ class _ attr ) s &gt; % ( label ) s % ( field ) s % ( help _ text ) s &lt; / p &gt; &apos; , error _ row set to a a string &apos; % s &apos; , row _ ender set to a string &apos; &lt; / p &gt; &apos; , help _ text _ html set to a string , &lt; span class = &quot; helptext &quot; &gt; % s &lt; / span &gt; &apos; and errors _ on _ separate _ row set to boolean True. define the method non _ field _ errors with an argument self .
return the result of the method self.errors.get called with 2 arguments : NON _ FIELD _ ERRORS and return value of the method ,
self.error _ class called with an argument error _ class set to string &apos; nonfield &apos; . define the method _ raw _ value with 2 arguments : self and fieldname .
substitute the value under the fieldname key of the self.fields dictionary for field .
call the method self.add _ prefix with an argument fieldname , substitute it for prefix .
return the result of the method field.widget.value _ from _ datadict called with 3 arguments : self.data , self.files and prefix .
define the method add _ error with 3 arguments : self , field and errors .
if error is not an instance of ValidationError ,
error is an instance of ValidationError created with an argument error .
if error has an attribute &apos; error _ dict &apos; ,
if field is not None ,
raise an TypeError with an argument string &quot; The argument `field` must be `None` when the `error`argument contains errors for multiple fields . &quot; .
if not ,
substitute error.error _ dict for error .
if not ,
error is an dictionary with an initial entry error.error _ list for filed if true , or NON _ FIELD _ ERRORS if not .
call the method error.items , for every field and error _ list in the result ,
if field is not contained in self.errors ,
if field is not equal to NON _ FIELD _ ERRORS and field is not contained in self.fields ,
raise an ValueError with an argument string &quot; &apos; % s &apos; has no field named &apos; % s &apos; . &quot; , with &apos; % s &apos; replaced with self . _ _ class _ _ . _ _ name _ _ and field , respectively .
if field equals NON _ FIELD _ ERRORS ,
call the method self.error _ class with an argument error _ class as an string &apos; nonfield &apos; ,
substitute the result for value under the field key of the self . _ errors dictionary. if not ,
call the method self.error _ class , substitute the result for value under the field key of the self . _ errors dictionary .
extend the value under the field key of the self . _ errors dictionary with error _ list .
if field is contained in self.cleaned _ data ,
delete the entry of self.cleaned _ data dictionary under the key field .
define the method has _ error with 3 arguments : self , field and code set to None .
if code is None ,
if field is contained in self.errors return boolean True , if not , return boolean False .
if field is contained in self.errors ,
call the method self.errors.as _ data , for every error for value under the filed key of the returned dictionary ,
if error.code equals code ,
return boolean True .
return boolean False .
define the method full _ clean with an argument self .
self . _ errors is an instance of ErrorDict .
if self.is _ bound is false ,
return nothing .
self.cleaned _ data is an empty dictionary .
if self.empty _ permitted is true and call to the method self.has _ changed evaluates to false ,
return nothing .
call the method self . _ clean _ fields .
call the method self . _ clean _ form .
call the method self . _ post _ clean .
define the method _ clean _ fields with an argument self .
call the method self.fields.items , for every name and field in result ,
call the method field.widget.value _ from _ datadict with 3 arguments : self.data , self.files and return value of the method ,
self.add _ prefix called with an argument name , substitute the result for value. try ,
if field is an instance of FileField ,
get the value under the name key of the self.initial dictionary , if it exists substitute it for initial ,
if not substitute field.initial for initial. call the method filed.clean with arguments value and initial , substitute the result for value .
if not ,
call the method field.clean with an argument value , substitute the result for value .
substitute value for the value under the name key of the self.cleaned _ data dictionary .
if self has an attribute &apos; clean _ % s &apos; , where &apos; % s &apos; is replaced with name ,
get &apos; clean _ % s &apos; , where &apos; % s &apos; is replaced with name &apos; attribute of the self object , call the result as an function ,
substitute the result for value. substitute value for the value under the name key of the self.cleaned _ data dictionary .
if ValidationError renamed to e , exception is caught ,
call the method self.add _ error with 2 arguments name and e .
define the method _ clean _ form with an argument self .
try ,
call the method self.clean , substitute the result for cleaned _ data .
if ValidationError renamed to e , exception is caught ,
call the method self.add _ error with 2 arguments None and e .
if not ,
if cleaned _ data is not None ,
substitute cleaned _ data for self.cleaned _ data .
define the method _ post _ clean with an argument self .
do nothing .
define the method clean with an argument self .
return self.cleaned _ data .
define the method has _ changed with an argument self .
convert self.changed _ data into boolean , return it .
property decorator ,
define the method changed _ data with an argument self .
if self . _ changed _ data is None ,
self . _ changed _ data is an empty list .
call the method self.fields.items , for every name and field in the result ,
call the method self.add _ prefix with an argument name , substitute the result for prefixed _ name .
call the method field.widget.value _ from _ datadict with 3 arguments : self.data , self.files , prefixed _ name , substitute the result for data _ value .
if field.show _ hidden _ initial is false ,
get the value under the name key of the self.initial dictionary , if it exists substitute it for initial _ value ,
if not substitute field.initial for initial _ value. if initial _ value is an callable object ,
call the function initial _ value , substitute the result for initial _ value .
if not ,
call the method self.add _ initial _ prefix with an argument name , substitute the result for initial _ prefixed _ name .
call the method field.hidden _ widget , substitute the result for field.hidden _ widget .
try ,
call the method ( hidden _ widget.value _ from _ datadict with 3 arguments : self.data , self.files and initial _ prefixed _ name ,
use the result as an argument for the call to the field.to _ python method , substitute the result for initial _ value. if ValidationError exception is caught ,
append name to self . _ changed _ data .
skip this loop iteration .
call the method field . _ has _ changed with 2 arguments : initial _ value and data _ value , if it evaluates to true ,
append name to self . _ changed _ data list .
return self . _ changed _ data .
property decorator ,
define the method media with an argument self .
media is an instance of Media class .
call the method self.fields.values , for every field in result ,
append field.widget.media to media , substitute the result for media .
return media .
define the method is _ multipart with an argument self .
call the method self.fields.values , for every field in result ,
if field.widget.needs _ multipart _ form is true ,
return boolean True .
return boolean False .
define the method hidden _ fields with an argument self .
for field in self if field.is _ hidden is true , append field to a list , return the resulting list .
define the method visible _ fields with an argument self .
for field in self if field.is _ hidden is false , append field to a list , return the resulting list .
derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm .
decorator python _ 2 _ unicode _ compatible ,
derive the class BoundField from the base class object .
define the method _ _ init _ _ with 4 arguments : self , form , field and name .
substitute form for self.form.
substitute field for self.field.
substitute name for self.name.
call the method form.add _ prefix with an argument self , substitute the result for self.html _ name .
call the method form.add _ initial _ prefix with an argument name , substitute the result for self.html _ initial _ name .
call the method form.add _ initial _ prefix with an argument self.auto _ id , substitute the result for self.html _ initial _ id .
if self.field.label is None ,
call the method pretty _ name with an argument name , substitute the result for self.label.
if not ,
substitute self.field.label for self.label.
if field.help _ text is true , substitute field.help _ text for self.help _ text , if not self.help _ text is an empty string .
define the method _ _ str _ _ with an argument self .
if self.field.show _ hidden _ initial is true ,
call the method self.as _ hidden with an argument only _ initial set to boolean True ,
append the result to the result of the method , self.as _ widget , return the resulting string. call the method self.as _ widget , return the result .
define the method _ _ iter _ _ with an argument self .
get the value under the &apos; id &apos; key of the self.field.widget.attrs dictionary , if the key exists substitute it for id _ ,
if not , substitute self.auto _ id for id _ . if if _ is true attrs is an dictionary with initial entry : id _ for &apos; id &apos; , if not , attrs is an empty dictionary .
call the method self.field.widget.subwidgets with 3 arguments : self.html _ name , return value of the method self.value and attrs ,
for every subwidget in the result , yield subwidget , as the result of the generator .
define the method _ _ len _ _ with an argument self .
convert result of the method self . _ _ iter _ _ into a list , return its length .
define the method _ _ getitem _ _ with 2 arguments : self and idx .
convert result of the method self . _ _ iter _ _ into a list , return element at the idx index .
property decorator ,
define the method errors with an argument self .
get the value under the self.name key of the self.form.errors dictionary , if the key exists , return it ,
if not evaluate the method self.form.error _ class and return the result. define the method as _ widget with 4 arguments : self , widget set to None , attrs set to None , only _ initial set to boolean False .
if widget is false ,
substitute self.field.widget for widget .
if self.field.localize is true ,
widget.is _ localized is boolean True .
if attrs is false , make it an empty dictionary .
substitute self.auto _ id for auto _ id .
if auto _ id is true and &apos; id &apos; is not contained in attrs and &apos; id &apos; is not contained in widget.attrs ,
if only _ initial is false ,
substitute auto _ id for value under the &apos; id &apos; key of the attrs dictionary .
if not ,
substitute self.html _ initial _ id for value under the &apos; id &apos; key of the attrs dictionary .
if only _ initial is false ,
substitute self.html _ name for name .
if not ,
substitute self.html _ initial _ name for name .
call the method widget.render with 3 arguments : name , return value of the method self.value , attrs set to attrs ,
use it as an argument for the call to the function force _ text , return the result. define the method as _ text with 3 arguments : self , attrs set to None and unpacked dictionary kwargs .
call the method self.as _ widget with 3 arguments : instance of a class TextInput , attrs and unpacked dictionary kwargs , return the result .
define the method as _ textarea with 3 arguments : self , attrs set to None and unpacked dictionary kwargs .
call the method self.as _ widget with 3 arguments : instance of a class Textarea , attrs and unpacked dictionary kwargs , return the result .
define the method as _ hidden with 3 arguments : self , attrs set to None and unpacked dictionary kwargs .
call the method self.as _ widget with 3 arguments : return value of the method self.field.hidden _ widget , attrs ,
and unpacked dictionary kwargs , return the result. property decorator ,
define the method data with an argument self .
call the method self.field.widget.value _ from _ datadict with 3 arguments : self.form.data , self.form.files , self.html _ name , return the result .
define the method value with an argument self .
if self.form.is _ bound is false ,
get the value under the self.name key of the self.form.initial dictionary , if it exists , substitute it for data ,
if not , substitute self.field.initial for data. if data is an callable object ,
call the method data , substitute the result for data .
if data is an instance of datetime.datetime or datetime.time classes , and supports _ microseconds field of self.field.widget is false ,
call the method data.replace with an argument microsecond set to integer 0 , substitute the result for data .
if not ,
call the method self.field.bound _ data with 2 arguments : self.data and value under the self.name key of the dictionary ,
self.form.initial , if it exists , or self.field.initial if not , substitute the result for data. call the method self.field.prepare _ value with an argument data , return the result .
define the method label _ tag with 4 arguments : self , contents set to None , attrs set to None and label _ suffix set to None .
if contents is false , substitute self.label for contents .
if label _ suffix is None ,
if self.field.label _ suffix is not None , substitute self.field.label _ suffix for label _ suffix ,
otherwise substitute self.form.label _ suffix for label _ suffix. if label _ suffix and contents are both true and last element of contents is not contained in the result of the function _ ,
called with an argument string &apos; : ? . ! &apos; . call the method format _ html with 3 arguments : string &apos; { 0 } { 1 } &apos; , contents and label _ suffix , substitute the result for contents .
substitute self.field.widget for widget .
get the value under the &apos; id &apos; key of the widget.attrs dictionary , if the key exists substitute it for id _ ,
if not , substitute self.auto _ id for id _ . if id _ is true ,
call the method widget.id _ for _ label with an argument id _ , substitute the result for id _ for _ label .
if id _ for _ label is true ,
unpack a dictionary with an entry id _ for _ label for &apos; for &apos; , map it through attrs mapping if attrs is true ,
and convert it again to the dictionary , if attrs is false , leave it alone , substitute the result for attrs. if self.field.required is true and self.form has an attribute &apos; required _ css _ class &apos; ,
if attrs is false , make attrs an empty dictionary .
if &apos; class &apos; is contained in attrs ,
append self.form.required _ css _ class to a whitespace character , append it to the value under the &apos; class &apos; key of the attrs dictionary .
if not ,
substitute self.form.required _ css _ class for the value under the &apos; class &apos; key of the attrs dictionary .
if attrs is true , call the function flatatt with an argument attrs , substitute the result for attrs , if not attrs is an empty string .
call the function format _ html with 3 arguments string &apos; &lt; label { 0 } &gt; { 1 } &lt; / label &gt; &apos; , attrs and contents , substitute the result for contents .
if not ,
call the function conditional _ escape with an argument contents , substitute the result for contents .
call the function mark _ safe with an argument contents , return the result .
define the method css _ classes with 2 arguments : self and extra _ classes set to None .
if extra _ classes has an attribute &apos; split &apos; ,
split extra _ classes into words , by whitespaces , substitute the result for extra _ classes .
if extra _ classes is not empty put its elements into a set , substitute it for extra _ classes , if not extra _ classes is an empty set .
if self.errors is true and self.form has an attribute &apos; error _ css _ class &apos; ,
add self.form.error _ css _ class to extra _ classes set .
if self.field.required is true and self.form has an attribute &apos; required _ css _ class &apos; ,
add self.form.required _ css _ class to extra _ classes set .
join elements of extra _ classes into a string separated by whitespaces , return it .
property decorator ,
define the method is _ hidden with an argument self .
return self.field.widget.is _ hidden ,
property decorator ,
define the method auto _ id with an argument self .
substitute self.form.auto _ id for auto _ id .
if auto _ id is true and &apos; % s &apos; is contained in result of the call to the function smart _ text with an argument auto _ id ,
call the function smart _ text with an argument auto _ id , format the result with self.html _ name , return it .
otherwise if auto _ id is true ,
return self.html _ name .
return an empty string .
property decorator ,
define the method id _ for _ label with an argument self .
substitute self.field.widget for widget .
get the value under the &apos; id &apos; key of the widget.attrs dictionary , if the key exists substitute it for id _ ,
if not , substitute self.auto _ id for id _ . call the method widget.id _ for _ label with an argument id _ , return the result .
from _ _ future _ _ import unicode _ literals into default name space .
from django.core.exceptions import ValidationError into default name space .
from django.forms import Form into default name space .
from django.forms.fields import IntegerField and BooleanField into default name space .
from django.forms.utils import ErrorList into default name space .
from django.forms.widgets import HiddenInput into default name space .
from django.utils.encoding import python _ 2 _ unicode _ compatible into default name space .
from django.utils.functional import cached _ property into default name space .
from django.utils.safestring import mark _ safe into default name space .
from django.utils import six into default name space .
from django.utils.six.moves import xrange into default name space .
from django.utils.translation import ungettext and ugettext as _ into default name space .
_ _ all _ _ is a tuple containing strings &apos; BaseFormSet &apos; , &apos; formset _ factory &apos; and &apos; all _ valid &apos; .
TOTAL _ FORM _ COUNT is a string &apos; TOTAL _ FORMS &apos; .
INITIAL _ FORM _ COUNT is a string &apos; INITIAL _ FORMS &apos; .
MIN _ NUM _ FORM _ COUNT is a string &apos; MIN _ NUM _ FORMS &apos; .
MAX _ NUM _ FORM _ COUNT is a string &apos; MAX _ NUM _ FORMS &apos; .
ORDERING _ FIELD _ NAME is a string &apos; ORDER &apos; .
DELETION _ FIELD _ NAME is a string &apos; DELETE &apos; .
DEFAULT _ MIN _ NUM is an integer 0 .
DEFAULT _ MAX _ NUM is an integer 1000 .
derive the class ManagementForm from the Form base class .
define the method _ _ init _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
value under the TOTAL _ FORM _ COUNT of the self.base _ fields dictionary is an instance of IntegerField class ,
created with an argument widget set to HiddenInput. value under the INITIAL _ FORM _ COUNT of the self.base _ fields dictionary is an instance of IntegerField class ,
created with an argument widget set to HiddenInput. value under the MIN _ NUM _ FORM _ COUNT of the self.base _ fields dictionary is an instance of IntegerField class ,
created with 2 arguments : required as boolean False and widget set to HiddenInput. value under the MAX _ NUM _ FORM _ COUNT of the self.base _ fields dictionary is an instance of IntegerField class ,
created with 2 arguments : required as boolean False and widget set to HiddenInput. call the method _ _ init _ _ from the base class of the class ManagementForm , called with 2 arguments : unpacked list args ,
and unpacked dictionary kwargs. python _ 2 _ unicode _ compatible decorator ,
derive the class BaseFormSet from the object base class .
define the method _ _ init _ _ with 7 arguments : self , data set to None , files set to None , auto _ id set to an string &apos; id _ % s &apos; ,
if data is not None or files is not None , self.is _ bound is boolean True , otherwise it is boolean False .
if prefix is true , substitute it for self.prefix , otherwise call the method self.get _ default _ prefix ,
and substitute the result for self.prefix. substitute auto _ id for self.auto _ id .
if data is true , substitute it for self.data , otherwise self.data is an empty dictionary .
if data is true , substitute it for self.files , otherwise self.files is an empty dictionary .
substitute initial _ id for self.auto _ id .
substitute error _ class for self.error _ class .
self . _ errors is None .
self . _ non _ form _ errors is None .
define the method _ _ str _ _ with an argument self .
call the method self.as _ table , return the result .
define the method _ _ iter _ _ with an argument self .
convert self.forms into an iterable , return it .
define the method _ _ getitem _ _ with an argument self .
return self.forms element at the index index .
define the method _ _ len _ _ with an argument self .
return the length of self.forms.
define the method _ _ bool _ _ with an argument self .
return boolean True .
define the method _ _ nonzero _ _ with an argument self .
get the type of self object , call the _ _ bool _ _ method on the result with an argument self , return the result .
property decorator ,
define the method management _ form with an argument self .
if self.is _ bound is true ,
form is an instance of ManagementForm class , created with 3 arguments : self.data , auto _ id as self.auto _ id and prefix as self.prefix.
call the form.is _ valid method , if it evaluates to false ,
raise ValidationError with 2 arguments : return value of the function _ called with an argument string ,
&apos;ManagementForm data is missing or has been tampered with &apos; and code as a string &apos; missing _ management _ form &apos; . if not ,
form is an instance of ManagementForm class , created with 3 arguments : auto _ id as self.auto _ id , prefix as self.prefix ,
and initial as a dictionary with 4 entries : result of self.total _ form _ count method for TOTAL _ FORM _ COUNT , result of self.initial _ form _ count method for INITIAL _ FORM _ COUNT , self.min _ num for MIN _ NUM _ FORM _ COUNT and self.max _ num for MAX _ NUM _ FORM _ COUNT. return form .
define the method total _ form _ count with an argument self .
if self.is _ bound is true ,
get the element with minimal value between the value under the TOTAL _ FORM _ COUNT key of self.management _ form.cleaned _ data dictionary ,
and self.absolute _ max , return the result. if not ,
call the method self.initial _ form _ count , return the result initial _ forms .
get the element with maximal value between initial _ forms and self.min _ num , add self.extra to it , substitute the result for total _ forms .
if initial _ forms is grater than self.max _ num is grater or equal to integer 0 ,
substitute initial _ forms for total _ forms .
otherwise if total _ forms is grater than self.max _ num is grater or equal to integer 0 ,
substitute self.max _ num for total _ forms .
return total _ forms .
define the method initial _ form _ count with an argument self .
if self.is _ bound is true ,
return the value under the INITIAL _ FORM _ COUNT key of the self.management _ form.cleaned _ data dictionary .
if not ,
if self.initial is true , substitute the length of self.initial for initial _ forms , if not , initial _ forms is integer 0 .
return initial _ forms .
cached _ property decorator ,
define the method forms with an argument self .
for every i in sequence of integers from 0 to result of the method self.total _ form _ count , call the method self . _ construct _ form ,
with an argument i , append the result to a list , substitute the resulting list for forms. return forms .
define the method _ construct _ form with 3 arguments : self , i and unpacked dictionary kwargs .
defaults is an dictionary with 3 initial entries : self.auto _ id for &apos; auto _ id &apos; , result of the call to the method self.add _ prefix ,
with an argument i , for &apos; prefix &apos; and self.error _ class for &apos; error _ class &apos; . if self.is _ bound is true ,
substitute self.data for value under the &apos; data &apos; key of the defaults dictionary .
substitute self.files for value under the &apos; files &apos; key of the defaults dictionary .
if self.initial is true and &apos; initial &apos; key is not contained in kwargs ,
try ,
substitute i-th element of self.initial for value under the &apos; initial &apos; key of the defaults dictionary .
if IndexError exception is caught ,
do nothing .
if i is greater than , or equal to the result of the call to the method self.initial _ form _ count ,
and i is greater than or equal to self.min _ num , value under the &apos; empty _ permitted &apos; key of the defaults dictionary is boolean True .
update defaults dictionary with kwargs .
call the method self.form with unpacked dictionary defaults as an argument , substitute it for form .
call the method self.add _ fields with arguments form and i ) .
return form .
property decorator ,
define the method initial _ forms with an argument self .
call the self.initial _ form _ count method , return the sublist of self.forms from the beginning to the previous result as the end index .
property decorator ,
define the method extra _ forms with an argument self .
call the self.initial _ form _ count method , return the sublist of self.forms , using previous result as start index to the end .
property decorator ,
define the method empty _ form with an argument self .
call the function empty _ form with 3 arguments : auto _ id as self.auto _ id , prefix set to the return value of the self.add _ prefix method ,
called with string &apos; _ _ prefix _ _ &apos; as an argument and empty _ permitted as boolean True , substitute the result for form. call the method self.add _ fields with arguments form and None .
return form .
property decorator ,
define the method cleaned _ data with an argument self .
call the method self.is _ valid , if it evaluates to false ,
raise an AttributeError exception with an argument string : &quot; &apos; % s &apos; object has no attribute &apos; cleaned _ data &apos; &quot; ,
where &apos; % s &apos; is replaced with self . _ _ class _ _ . _ _ name _ _ . for form in self.forms append form.cleaned _ data to a list , return the resulting list .
property decorator ,
define the method deleted _ forms with an argument self .
if call to the method self.is _ valid , evaluates to false or self.can _ delete is boolean false ,
return an empty list .
if self doesnt have an &apos; _ deleted _ form _ indexes &apos; attribute ,
self . _ deleted _ form _ indexes is an empty list .
call the method self.total _ form _ count , for every i in sequence of integers , from 0 to the previous result ,
substitute i-th element of self.forms for form .
if i is greater than or equal to the result of the method self.initial _ form _ count ,
and call to the method form.has _ changed evaluates to false , skip this loop iteration ,
call the method self . _ should _ delete _ form with an argument form , if it evaluates to true ,
call the method self . _ deleted _ form _ indexes.append with an argument i .
for i in self . _ deleted _ form _ indexes append i-th element of self.forms into a list , return the resulting list .
property decorator ,
define the method ordered _ forms with an argument self .
if call to the self.is _ valid method evaluates to false or self.can _ order is false ,
raise an AttributeError exception with an argument string : &quot; &apos; % s &apos; object has no attribute &apos; ordered _ forms &apos; &quot; ,
where &apos; % s &apos; is replaced with self . _ _ class _ _ . _ _ name _ _ . if self doesnt have an &apos; _ ordering &apos; attribute ,
self . _ ordering is an empty list .
for every i in sequence of integers , from 0 to the result of the method self.total _ form _ count ,
substitute i-th element of self.forms for form .
if i is greater than or equal to the result of the method self.initial _ form _ count ,
and call to the method form.has _ changed evaluates to false , skip this loop iteration ,
if self.can _ delete is true and call to the method self . _ should _ delete _ form with an argument form , evaluates to true ,
skip this loop iteration ,
append tuple with 2 elements : i and value under the ORDERING _ FIELD _ NAME key of form.cleaned _ data dictionary to self . _ ordering .
define the function compare _ ordering _ key with an argument k .
if second element of k is None ,
return a tuple with 2 elements : integers 1 and 0 .
return a tuple with 2 elements : integer 0 and second element of k .
call the method self . _ ordering.sort with an argument key as compare _ ordering _ key .
for i in self . _ ordering append to a list value under the first element of i key of the self.forms dictionary , return resulting list .
classmethod decorator ,
define the method get _ default _ prefix with an argument cls .
return string &apos; form &apos; .
define the method non _ form _ errors with an argument self .
if self . _ non _ form _ errors is None ,
call the method self.full _ clean .
return self . _ non _ form _ errors .
property decorator ,
define the method errors with an argument self .
if self . _ errors is None ,
call the method self.full _ clean .
return self . _ errors .
define the method total _ error _ count with an argument self .
for every form _ errors in self.errors sum length of return value of the method self.non _ form _ errors and length of form _ errors , return the result .
define the method _ should _ delete _ form with an argument self .
get the value under the DELETION _ FIELD _ NAME key of the form.cleaned _ data dictionary , if it exists return it , if not , return boolean False .
define the method is _ valid with an argument self .
if self.is _ bound is false ,
return boolean False .
forms _ valid is True .
call self.errors.
for every i in sequence of integers , from 0 to the result of the method self.total _ form _ count ,
substitute i-th element of self.forms for form .
if self.can _ delete is true ,
call the method self . _ should _ delete _ form with an argument , if it evaluates to true ,
skip this loop iteration ,
call the method form.is _ valid , perform bitwise and with the result and forms _ valid as operands , substitute the result for forms _ valid .
if forms _ valid is true and call to the method self.non _ form _ errors , evaluates to false , return boolean True , otherwise return False .
define the method full _ clean with an argument self .
self . _ errors is an empty list .
call the method self.error _ class , substitute the result for self . _ non _ form _ errors .
if self.is _ bound is false ,
return nothing .
for every i in sequence of integers , from 0 to the result of the method self.total _ form _ count ,
substitute i-th element of self.forms for form .
append form.errors to self . _ errors .
try ,
if self.validate _ max is true , and length of self.deleted _ forms subtracted from the return value of the method self.total _ form _ count ,
is greater than self.max _ num , or if value under the TOTAL _ FORM _ COUNT key of the self.management _ form.cleaned _ data dictionary , is grater than self.absolute _ max , raise an ValidationError with 2 arguments : return value of the function ungettext with 3 arguments :
strings &quot; Please submit % d or fewer forms . &quot; , &quot; Please submit % d or fewer forms . &quot; and self.max _ num , where &apos; % d &apos; is replaced with self.max _ num , and code as a string &apos; too _ many _ forms &apos; . if self.validate _ min is true , and length of self.deleted _ forms subtracted from the return value of the method self.total _ form _ count ,
is smaller than self.min _ num , raise an ValidationError with 2 arguments : return value of the function ungettext with 3 arguments :
strings &quot; Please submit % d or more forms . &quot; , &quot; Please submit % d or more forms . &quot; and self.min _ num , where &apos; % d &apos; is replaced with self.min _ num , and code as a string &apos; too _ few _ forms &apos; . call the method self.clean.
if ValidationError , renamed to e , exception is caught ,
call the method self.error _ class with an argument e.error _ list , substitute the result for self . _ non _ form _ errors .
define the method clean with an argument self .
do nothing .
define the method has _ changed with an argument self .
for every form in self call the method form.has _ changed if any of the results evaluates to true , return boolean True ,
if not return boolean False. define the method add _ fields with 3 arguments : self , form and index .
if self.can _ order is true ,
if index is not None and index is smaller than return value of the method self.initial _ form _ count ,
value under the ORDERING _ FIELD _ NAME key of the form.fields is an instance of IntegerField class , created with 3 arguments :
label set to return value of the function _ called with an string &apos; Order &apos; , initial set to index incremented by 1 , and required as boolean False. if not ,
value under the ORDERING _ FIELD _ NAME key of the form.fields is an instance of IntegerField class , created with 2 arguments :
label set to return value of the function _ called with an string &apos; Order &apos; and required as boolean False. if self.can _ delete is true ,
value under the DELETION _ FIELD _ NAME key of the form.fields is an instance of BooleanField class , created with 2 arguments :
label set to return value of the function _ called with an string &apos; Delete &apos; and required as boolean False. define the method add _ prefix with an argument self .
replace &apos; % s &apos; in sting &apos; % s- % s &apos; with self.prefix and index , return the result .
define the method is _ multipart with an argument self .
if self.forms is true ,
call the method is _ multipart on the first element of self.forms , return it .
if not ,
call the method self.empty _ form.is _ multipart , return the result
property decorator ,
define the method media with an argument self .
if self.forms is true ,
return the media field of the first element of self.forms.
if not ,
return self.empty _ form.media.
define the method as _ table with an argument self .
for every form in self call the form.as _ table method , join the results in a string , separated by an empty string .
join return value of the function six.text _ type called with an argument self.management _ form and forms into a string ,
separated by newline , use it as an argument for the call to the function mark _ safe , return the result. define the method as _ p with an argument self .
for every form in self call the form.as _ p method , join the results in a string , separated by an empty string .
join return value of the function six.text _ type called with an argument self.management _ form and forms into a string ,
separated by newline , use it as an argument for the call to the function mark _ safe , return the result. define the method as _ ul with an argument self .
for every form in self call the form.as _ ul method , join the results in a string , separated by an empty string .
join return value of the function six.text _ type called with an argument self.management _ form and forms into a string ,
separated by newline , use it as an argument for the call to the function mark _ safe , return the result. define the function formset _ factory with 9 arguments : form , formset set to BaseFormSet , extra set to integer 1 ,
if min _ num is None ,
substitute DEFAULT _ MIN _ NUM for min _ num ,
if max _ num is None ,
substitute DEFAULT _ MAX _ NUM for max _ num ,
sum max _ num and DEFAULT _ MAX _ NUM , substitute the result for absolute _ max .
attrs is an dictionary with 9 initial entries : form for &apos; form &apos; , extra for &apos; extra &apos; , can _ order for &apos; can _ order &apos; ,
can _ delete for &apos; can _ delete &apos; , min _ num for &apos; min _ num &apos; , max _ num for &apos; max _ num &apos; , absolute _ max for &apos; absolute _ max &apos; , validate _ min for &apos; validate _ min &apos; for validate _ max for &apos; validate _ max &apos; . create a class class which name is generated by converting &apos; FormSet &apos; into a string and appending it to form . _ _ name _ _ ,
is derived from the formset base class and with fields contained in attrs , return an instance of the obtained class. define the function all _ valid with an argument formsets .
valid is boolean True .
for every formset in formsets ,
call the function formset.is _ valid , if it evaluates to false ,
valid is boolean False .
return valid .
from _ _ future _ _ import unicode _ literals into default name space .
from collections import OrderedDict into default name space .
import module warnings .
django.core.exceptions import ImproperlyConfigured , ValidationError , NON _ FIELD _ ERRORS and FieldError into default namespace .
from django.forms.fields import Field and ChoiceField into default name space .
from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space .
from django.forms.formsets import BaseFormSet and formset _ factory into default name space .
from django.forms.utils import ErrorList into default name space .
from django.forms.widgets import SelectMultiple , HiddenInput , MultipleHiddenInput into default namespace .
from django.utils import six into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
from django.utils.encoding import smart _ text and force _ text into default name space .
from django.utils.text import get _ text _ list and capfirst into default name space .
from django.utils.translation import ugettext _ lazy as _ and ugettext into default name space .
_ _ all _ _ is a tuple containing strings : &apos; ModelForm &apos; , &apos; BaseModelForm &apos; , &apos; model _ to _ dict &apos; , &apos; fields _ for _ model &apos; , &apos; save _ instance &apos; ,
&apos;ModelChoiceField &apos; , &apos; ModelMultipleChoiceField &apos; , &apos; ALL _ FIELDS &apos; , &apos; BaseModelFormSet &apos; , &apos; modelformset _ factory &apos; , &apos; BaseInlineFormSet &apos; , and &apos; inlineformset _ factory &apos; . ALL _ FIELDS is a string &apos; _ _ all _ _ &apos; .
define the function construct _ instance with 4 arguments : form , instance , fields set to None and exclude set to None .
from django.db import models into default namespace .
substitute instance . _ meta for opts .
substitute form.cleaned _ data for cleaned _ data .
file _ field _ list is an empty list .
for every f in opts.fields ,
if f.editable is true and f is an instance of models.AutoField , or f.name is not contained in cleaned _ data ,
skip this loop iteration .
if fields is not None and f.name is not contained in fields ,
skip this loop iteration .
if exclude is true and f.name is contained in exclude ,
skip this loop iteration .
if f is an instance of models.FileField ,
append f to file _ field _ list .
if not ,
call the method f.save _ form _ data with 2 arguments : instance and value under the f.name key of cleaned _ data dictionary .
for every f in file _ field _ list ,
call the method f.save _ form _ data with 2 arguments : instance and value under the f.name key of cleaned _ data dictionary .
return instance .
define the function save _ instance with 7 arguments : form , instance , fields set to None , fail _ message as string &apos; saved &apos; ,
if construct is true ,
call the function construct _ instance with 4 arguments form , instance , fields , exclude and substitute the result for instance .
substitute instance . _ meta for opts .
if form.errors is true ,
raise an ValueError with an argument string &quot; The % s could not be % s because the data didn &apos;t validate . &quot; ,
where &apos; % s &apos; is replaced with opts.object _ name and fail _ message , respectively. define the function save _ m2m .
substitute form.cleaned _ data for cleaned _ data .
append opts.virtual _ fields to opts.many _ to _ many , for every f in the result ,
if f doesnt has an &apos; save _ form _ data &apos; attribute ,
skip this loop iteration .
if fields is true and f.name is not contained in fields ,
skip this loop iteration .
if exclude is true and f.name is contained in exclude ,
skip this loop iteration .
if f.name is contained in cleaned _ data ,
call the method f.save _ form _ data with 2 arguments : instance and value under the f.name key of cleaned _ data dictionary .
if commit is true ,
call the method instance.save.
call the function save _ m2m .
if not ,
substitute save _ m2m for form.save _ m2m .
return instance .
define the function model _ to _ dict with 3 arguments : instance , fields set to None and exclude set None .
from django.db.models.fields.related import ManyToManyField .
substitute instance . _ meta for opts .
data is an empty dictionary .
concatenate opts.concrete _ fields , opts.virtual _ fields and opts.many _ to _ many , for every f in the result ,
get &apos; editable &apos; attribute from object f , if it doesnt exists or its true ,
skip this loop iteration .
if fields is true and f.name is not contained in fields ,
skip this loop iteration .
if exclude is true and f.name is contained in exclude ,
skip this loop iteration .
if f is an instance of ManyToManyField ,
if instance.pk is None ,
value under f.name key of the dta dictionary is an empty list .
if not ,
call the method f.value _ from _ object with an argument instance , substitute the result for qs .
if qs . _ result _ cache is not None ,
for every item in qu append item.pk to a list , substitute resulting list for value under f.name key of the data dictionary .
if not ,
call the method qs.values _ list with 2 arguments : string &apos; pk &apos; and flat set to boolean True , put the results in a list ,
substitute the result for value under the f.name key of data dictionary. if not ,
call the method f.value _ from _ object with an argument instance , substitute the result for value under the f.name key of the data dictionary .
return data .
define the function fields _ for _ model with 9 arguments : model , fields set to None , exclude set to None , widgets set to None ,
field _ list is an empty list .
ignored is an empty list .
substitute model . _ meta for opts .
from django.db.models.fields import Field as ModelField .
if f is an instance of ModelFiled , for every f in opts.virtual _ fields , append f to a list , substitute the resulting list for sortable _ virtual _ fields .
concatenate opts.concrete _ fields , sortable _ virtual _ fields and opts.many _ to _ many , for every f in sorted result ,
get &apos; editable &apos; attribute from object f , if it doesnt exists or its true ,
skip this loop iteration .
if fields is not None and f.name is not contained in fields ,
skip this loop iteration .
if exclude is true and f.name is contained in exclude ,
skip this loop iteration .
kwargs is an empty dictionary ,
if widgets is true and f.name is contained in widgets ,
substitute value under the f.name key of the widgets dictionary for value under the &apos; widget &apos; key of kwargs dictionary .
if localized _ fields equals ALL _ FIELDS , or if localized _ fields is true and f.name is contained in localized _ fields ,
value under &apos; localize &apos; key of kwargs dictionary is boolean True .
if labels is true and f.name is contained in labels ,
substitute value under the f.name key of the labels dictionary for value under the &apos; label &apos; key of kwargs dictionary .
if help _ texts is true and f.name is contained in help _ texts ,
substitute value under the f.name key of the help _ texts dictionary for value under the &apos; help _ text &apos; key of kwargs dictionary .
if error _ messages is true and f.name is contained in error _ messages ,
substitute value under the f.name key of the error _ messages dictionary for value under the &apos; error _ messages &apos; key of kwargs dictionary .
if formfield _ callback is None ,
call the method f.formfield with an argument , unpacked dictionary kwargs , substitute the result for formfield .
otherwise if formfield _ callback is not callable object ,
raise an TypeError with an string &apos; formfield _ callback must be a function or callable &apos; .
if not ,
call the method formfield _ callback with 2 arguments : f and unpacked dictionary kwargs , substitute the result for formfield .
if formfield is true ,
append a tuple with 2 elements : f.name and formfield to field _ list .
if not ,
append f.name to ignored list .
field _ dict is an instance of OrderedDict class , created with an argument field _ list .
if fields is true ,
for every f in fields , if exclude is false , or if exclude is true and f is not contained in exclude , and only if f is not in ignored ,
append to list , a tuple with 2 elements : f and value under the f key of field _ dict dictionary , use the resulting list as an argument , for the creation of the instance of OrderedDict class , substitute it for field _ dict. return field _ dict .
derive the class ModelFormOptions from object base class .
define the method _ _ init _ _ with arguments : self and options set to None .
get &apos; model &apos; attribute from the options object , if it exists substitute it for self.model , if not self.model is None .
get &apos; fields &apos; attribute from the options object , if it exists substitute it for self.fields , if not self.fields is None .
get &apos; exclude &apos; attribute from the options object , if it exists substitute it for self.exclude , if not self.exclude is None .
get &apos; widgets &apos; attribute from the options object , if it exists substitute it for self.widgets , if not self.widgets is None .
get &apos; localized _ fields &apos; attribute from the options object , if it exists substitute it for self.localized _ fields ,
if not self.localized _ fields is None. get &apos; labels &apos; attribute from the options object , if it exists substitute it for self.labels , if not self.labels is None .
get &apos; help _ texts &apos; attribute from the options object , if it exists substitute it for self.help _ texts , if not self.help _ texts is None .
get &apos; error _ messages &apos; attribute from the options object , if it exists substitute it for self.error _ messages ,
if not self.error _ messages is None. derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class .
define the method _ _ new _ _ with 4 arguments : mcs , name , bases and attrs .
remove entry under the &apos; formfield _ callback &apos; key of the attrs dictionary , if it exists substitute if for formfield _ callback ,
if not formfield _ callback is None. call the method _ _ new _ _ from the base class of the class ModelFormMetaclass , with 4 arguments : mcs , name , bases and attrs ,
substitute the result for new _ class. if bases equals a tuple with an element : class BaseModelForm .
return new _ class .
instantiate class ModelFormOptions with argument : attribute &apos; Meta &apos; of the new _ class object. if it exists or None , if not ,
assign the result to opts and new _ class . _ meta. for every opt in list containing 3 elements : strings &apos; fields &apos; , &apos; exclude &apos; and &apos; localized _ fields &apos; ,
get opt attribute of the opts object , substitute it for value .
if value is an instance of six.string _ types and value is not equal to ALL _ FIELDS ,
msg is a string &quot; % ( model ) s.Meta. % ( opt ) s cannot be a string . Did you mean to type : ( &apos; % ( value ) s &apos; , ) ? &quot; , where &apos; % ( model ) s &apos; is replaced ,
with new _ class . _ _ name _ _ , &apos; % ( opt ) s &apos; is replaced with opt and &apos; % ( value ) s &apos; is replaced with value. raise an TypeError exception with an argument msg .
if opts.model is true ,
if opts.fields is None and opts.exclude is None ,
raise an ImproperlyConfigured exception with an argument string &quot; Creating a ModelForm without either the &apos; fields &apos; attribute ,
&quot; or the &apos; exclude &apos; attribute is prohibited ; form % s needs updating . &quot; , where &apos; % s &apos; is replaced with name. if opts.fields equals ALL _ FIELDS ,
opts.fields is None .
call the function fields _ for _ model with 9 arguments : opts.model , opts.fields , opts.exclude , opts.widgets , formfield _ callback ,
opts.localized _ fields , opts.labels , opts.help _ texts and opts.error _ messages , substitute the result for fields. for every k and v in return value of the function six.iteritems called with an argument fields , if n is false , append it to a list ,
substitute the resulting list for none _ model _ fields. missing _ fields is difference between set containing none _ model _ fields and set containing result of the method ,
new _ class.declared _ fields.keys. if missing _ fields is true ,
message is an string &apos; Unknown field ( s ) ( % s ) specified for % s &apos; .
join missing _ fields into a string separated by string &apos; , &apos; , use it and opts.model. _ _ name _ _ to format message , substitute the result for message .
raise an FieldError exception with an argument message .
update fields dictionary with new _ class.declared _ fields .
if not ,
substitute new _ class.declared _ fields for fields .
substitute fields for new _ class.base _ fields .
return new _ class .
derive the class BaseModelForm from the BaseForm base class .
define the method _ _ init _ _ with 10 arguments : self , data set to None , files set to None , auto _ id set to string &apos; id _ % s &apos; ,
prefix set to None , initial set to None , error _ class set to ErrorList , label _ suffix set to None , empty _ permitted set to boolean False , instance set to None. substitute self . _ meta for opts .
if opts.model is None .
raise an ValueError with an argument string &apos; ModelForm has no model class specified . &apos; .
if instance is None ,
call the method opts.model , substitute the result for self.instance.
object _ data is an empty dictionary .
if not ,
substitute instance for self.instance.
call the method model _ to _ dict with 3 arguments : instance , opts.fields , opts.exclude and substitute the result for object _ data .
if initial is not None ,
update object _ data dictionary with initial .
self . _ validate _ unique is boolean False .
call the method _ _ init _ _ from the base class of the class BaseModelForm , with 8 arguments : data , files , auto _ id , prefix , object _ data ,
error _ class , label _ suffix and empty _ permitted. for every field _ name in self.fields ,
substitute value under the field _ name key of the self.fields dictionary for formfield .
if formfield has an attribute &apos; queryset &apos; ,
substitute formfield.limit _ choices _ to for limit _ choices _ to .
if limit _ choices _ to is not None ,
if limit _ choices _ to is callable object ,
call the function limit _ choices _ to , substitute the result for limit _ choices _ to .
call the method formfield.queryset.complex _ filter with an argument limit _ choices _ to , substitute the result for formfield.queryset.
define the method _ get _ validation _ exclusions with an argument self .
exclude is an empty list .
for every f in self.instance. _ meta.fields ,
substitute f.name for field .
if field is not contained in self.fields ,
append f.name to exclude .
otherwise if self . _ meta.fields is true and field is not contained in self . _ meta.fields ,
append f.name to exclude .
otherwise if self . _ meta.exclude is true and field is not contained in self . _ meta.exclude ,
append f.name to exclude .
otherwise if field is contained in the result of the call to the method self . _ errors.keys ,
append f.name to exclude .
if not ,
substitute value under the field key of the self.fields dictionary for form _ field .
get the value under the field key of the self.cleaned _ data dictionary , if it exists substitute it for field _ value ,
if not field _ value is None. if f.blank is false and form _ field.required is false and field _ value is contained in form _ field.empty _ values ,
append f.name to exclude .
return exclude .
define the method clean with an argument self .
self . _ validate _ unique is boolean True .
return self.cleaned _ data .
define the method _ update _ errors with 2 arguments : self and errors .
substitute self . _ meta for opts .
call the function errors.error _ dict.items , for every field and messages in the result ,
if field equals NON _ FIELD _ ERRORS and opts.error _ messages is true and NON _ FIELD _ ERRORS is contained in opts.error _ messages ,
substitute value under the NON _ FIELD _ ERRORS key of opts.error _ messages dictionary for error _ messages .
otherwise if field is contained in self.fields ,
get the value under the field key of self.fields dictionary , substitute error _ messages field of the result for error _ messages .
if not ,
skip this loop iteration .
for every message in messages ,
if message is an instance of ValidationError class and message.code is contained in error _ messages ,
substitute error _ messages under the message.code key of error _ messages dictionary for message.message.
call the method self.add _ error with 2 arguments : None and errors .
define the method _ post _ clean with an argument self .
substitute self . _ meta for opts .
call the method self . _ get _ validation _ exclusions , substitute the result for exclude .
convert exclude elements to list , substitute it for construct _ instance _ exclude .
call the method self.fields.items , for every name and field in result ,
if field is an instance of InlineForeignKeyField class ,
if value under the name key of self.cleaned _ data dictionary is not None ,
and field _ state.adding of value under the name key of self.cleaned _ data dictionary is true , append name to construct _ instance _ exclude list .
append name to exclude .
call the function construct _ instance with 4 arguments : self , self.instance , opts.fields and construct _ instance _ exclude ,
substitute the result for self.instance. try ,
call the method self.instance.full _ clean with 2 arguments : exclude set to exclude and validate _ unique set to boolean False .
if ValidationError , renamed to e , exception is caught ,
call the method self . _ update _ errors with an argument e .
if self . _ validate _ unique is true ,
call the method self.validate _ unique .
define the method validate _ unique with an argument self .
call the method self . _ get _ validation _ exclusions , substitute the result for exclude .
try ,
call the method self.instance.validate _ unique with an argument exclude set to exclude .
if ValidationError , renamed to e , exception is caught ,
call the method self . _ update _ errors with an argument e .
define the method save with 2 arguments : self and commit set to boolean True .
if self.instance.pk is None ,
fail _ message is a string &apos; created &apos; .
if not ,
fail _ message is a string changed &apos; .
call the function with 7 arguments : self , self.instance , self . _ meta.fields , fail _ message , commit , self . _ meta.exclude ,
and construct as boolean False , return the result. save.alters _ data is boolean True .
derive the class ModelForm from the base class in the return value of the method six.with _ metaclass , called with 2 arguments :
ModelFormMetaclass and BaseModelForm. do nothing .
define the function modelform _ factory with 10 arguments : model , form set to ModelForm , fields set to None , exclude set to None ,
attrs is a dictionary with model for &apos; model &apos; .
if fields is not None ,
substitute fields for value under the &apos; fields &apos; key of attrs dictionary .
if exclude is not None ,
substitute exclude for value under the &apos; exclude &apos; key of attrs dictionary .
if widgets is not None ,
substitute widgets for value under the &apos; widgets &apos; key of attrs dictionary .
if localized _ fields is not None ,
substitute localized _ fields for value under the &apos; localized _ fields &apos; key of attrs dictionary .
if labels is not None ,
substitute labels for value under the &apos; labels &apos; key of attrs dictionary .
if help _ texts is not None ,
substitute help _ texts for value under the &apos; help _ texts &apos; key of attrs dictionary .
if error _ messages is not None ,
substitute error _ messages for value under the &apos; error _ messages &apos; key of attrs dictionary .
parent is a tuple with 1 element , object .
if form has an attribute &apos; Meta &apos; ,
parent is a tuple with 2 arguments : form.Meta and object .
Meta is an instance of class with name &apos; Meta &apos; , parent base class and fields attrs .
append string &apos; Form &apos; to model . _ _ name _ _ , substitute the result for class _ name .
form _ class _ attrs is a dictionary with 2 entries : Meta for &apos; Meta &apos; and formfield _ callback for &apos; formfield _ callback &apos; .
if &apos; fields &apos; attribute of Meta object is None and &apos; exclude &apos; attribute of Meta object is None ,
raise an ImproperlyConfigured with an argument string &quot; Calling modelform _ factory without defining &apos; fields &apos; or &apos; exclude &apos; explicitly is prohibited . &quot;
get the type of form object , return an instance of resulting class created with 3 arguments : class _ name , tuple with an element form ,
and form _ class _ attrs. derive the class BaseModelFormSet from the BaseFormSet base class .
model is None .
define the method _ _ init _ _ with 7 arguments : self , data set to None , files set to None , auto _ id set to string &apos; id _ % s &apos; ,
prefix set to None , queryset set to None and unpacked dictionary kwargs. substitute queryset for self.queryset.
remove entry under &apos; initial &apos; key of the kwargs dictionary , substitute it for self.initial _ extra if it exists ,
if not self.initial _ extra is None. defaults is a dictionary with 4 entries : data for &apos; data &apos; , files for &apos; files &apos; , auto _ id for &apos; auto _ id &apos; and prefix for &apos; prefix &apos; .
update defaults dictionary with kwargs .
call the method _ _ init _ _ from the base class of the class BaseModelFormSet , with an argument unpacked dictionary defaults .
define the method initial _ form _ count with an argument self .
if self.data and self.files are both False ,
call the method self.get _ queryset , return the length of the result .
call the method initial _ form _ count from the base class of the class BaseModelFormSet , return the result .
define the method _ existing _ object with 2 arguments : self and pk .
if self has an attribute &apos; _ object _ dict &apos; ,
call the function dict with an argument tuple with 2 elements : o.pk and o , for every o in result of the method self.get _ queryset ,
substitute the result for self . _ object _ dict. return the value under the pk key of self . _ object _ dict dictionary .
define the method _ get _ to _ python with 2 arguments : self and field .
while field.rel is not None ,
call the method field.rel.get _ related _ field , substitute the result for field .
return field.to _ python .
define the method _ construct _ form with 3 arguments : self , i and unpacked dictionary kwargs .
if self.is _ bound is true and i is smaller than self.initial _ form _ count ,
pk _ key is a string &quot; % s- % s &quot; , where &apos; % s &apos; is replaced with : result of the method self.add _ prefix called with an argument i ,
and self.model. _ meta.pk.name. substitute the value under the pk _ key key of the self.data dictionary for pk .
substitute self.model. _ meta.pk for pk _ field .
call the method self . _ get _ to _ python with an argument pk _ field , substitute the result for to _ python .
call the function to _ python with an argument pk , substitute the result for pk .
call the method self . _ existing _ object with an argument pk , substitute the result for value under the &apos; instance &apos; key of kwargs .
if i is smaller than result of the method self.initial _ form _ count and key &apos; instance &apos; is not contained in kwargs ,
call the method self.get _ queryset , substitute i-th element of the result for value under the &apos; instance &apos; key of kwargs dictionary .
if i is greater or equal to the result of the method self.initial _ form _ count and self.initial _ extra is true ,
try ,
subtract result of the method self.initial _ form _ count from i , use the result as an index to get the element from self.initial _ extra ,
substitute it for value under the &apos; initial &apos; key of kwargs dictionary. if IndexError exception is caught ,
do nothing .
call the method _ construct _ form from the base class of the class BaseModelFormSet , with 2 arguments : i and unpacked dictionary kwargs .
define the method get _ queryset with an argument self .
if self doesnt have &apos; _ queryset &apos; attribute ,
if self.queryset is not None ,
substitute self.queryset for qs .
if not ,
call the method self.model. _ default _ manager.get _ queryset with an argument qs .
if qs.ordered is false ,
call the method qs.order _ by with argument self.model. _ meta.pk.name , substitute the result for qs .
substitute qs for self . _ queryset .
return self . _ queryset .
define the method save _ new with 3 arguments : self , form and commit set to boolean True .
call the method form.save with an argument commit as commit , return the result .
define the method save _ existing with 4 arguments : self , form , instance and commit set to boolean True .
call the method form.save with an argument commit as commit , return the result .
define the method save with 2 arguments : self and commit set to boolean True .
if commit is true ,
self.saved _ forms is an empty list .
define the function save _ m2m .
for every form in self.saved _ forms ,
call the function form.save _ m2m .
substitute save _ m2m for self.save _ m2m .
sum results of method self.save _ existing _ objects called with an argument commit and of method self.save _ new _ objects ,
called with an argument commit , return the result. save.alters _ data is boolean True .
define the method clean with an argument self .
call the method self.validate _ unique .
define the method validate _ unique with an argument self .
all _ unique _ checks is an empty set .
all _ date _ checks is an empty set .
substitute self.deleted _ forms for forms _ to _ delete .
for every form in self.forms append form to a list , if function form.is _ valid evaluates to true ,
and form is not contained in forms _ to _ delete , substitute the resulting list for valid _ forms. for every form in valid _ forms ,
call the method form . _ get _ validation _ exclusions , substitute the result for exclude .
call the method form.instance. _ get _ unique _ checks with an argument exclude as exclude , substitute the result for unique _ checks , and date _ checks , respectively .
all _ unique _ checks is union of all _ unique _ checks set and unique _ checks set .
all _ date _ checks is union of all _ date _ checks set and date _ checks set .
errors is an empty list .
for every uclass , unique _ check in all _ unique _ checks ,
seen _ data is an empty set .
for every form in valid _ forms ,
row _ data is an generator object that returns value under the field key of form.cleaned _ data dictionary ,
for every field in unique _ check , if field is contained in form.cleaned _ data. create a generator that for every d in row _ data , if d has an &apos; _ get _ pk _ val &apos; attribute ,
returns the result of the call the method d . _ get _ pk _ val , if not return d , put all the generator items into a tuple row _ data. if row _ data is true and None is not contained in row _ data ,
if row _ data is contained in seen _ data ,
call the method self.get _ unique _ error _ message with an argument unique _ check , append the result to errors .
call the method self.error _ class with an argument list with a element : result of the method self.get _ form _ error ,
substitute the result for value under the NON _ FIELD _ ERRORS key of the form . _ errors dictionary. for every field in unique _ check ,
if field is contained in form.cleaned _ data ,
delete the form.cleaned _ data dictionary entry under the field key .
add row _ data to seen _ data set .
for every date _ check in all _ date _ checks ,
seen _ data is an empty set .
substitute date _ check elements to uclass , lookup , field and unique _ for , respectively .
for every form in valid _ forms ,
if form.cleaned _ data is true and value under the field key of form.cleaned _ data dictionary is not None ,
and value under the unique _ for key of form.cleaned _ data dictionary is not None , if lookup equals a string &apos; date &apos; ,
substitute value under the unique _ for key of form.cleaned _ data dictionary for date .
date _ data is a tuple with 3 elements : date.year , date.month and date.day.
if not ,
date _ data is a tuple with an entry : attribute lookup from the value under the unique _ for key of the form.cleaned _ data dictionary .
create a tuple out of elements under the key field of the form.cleaned _ data dictionary , add elements of date _ data to it ,
substitute it for data. if data is contained in seen _ data ,
call the method self.get _ date _ error _ message with an argument date _ check , append the result to errors .
call the method self.error _ class with an argument list with one element , return value of the method self.get _ form _ error ,
substitute the result for the value under the NON _ FIELD _ ERRORS key of form . _ errors dictionary. delete entry from form.cleaned _ data dictionary under the field key .
add data to seen _ data set .
if errors is true ,
raise an ValidationError exception with an argument errors .
define the method get _ unique _ error _ message with 2 arguments : self and unique _ check .
if length of unique _ check equals integer 1 ,
call the function ugettext with an argument string &quot; Please correct the duplicate data for % ( field ) s . &quot; ,
where &apos; % ( field ) s &apos; is replaced with first element of unique _ check , return the result. if not ,
call the function ugettext with an argument string &quot; Please correct the duplicate data for % ( field ) s , which must be unique . &quot; ,
where &apos; % ( field ) s &apos; is replaced with return value of the get _ text _ list function called with 2 arguments : unique _ check and return value of the function six.text _ type called with return value of the function _ with an argument string &apos; and &apos; , return the result. define the method get _ date _ error _ message with 2 arguments : self and date _ check .
call the function ugettext with an argument string &quot; Please correct the duplicate data for % ( field _ name ) s which must be unique for ,
the % ( lookup ) s in % ( date _ field ) s . &quot; , where &apos; % ( field _ name ) s &apos; is replaced with third element of data _ check , &apos; % ( date _ field ) s &apos; is replaced with fourth element of date _ check and &apos; % ( lookup ) s &apos; is replaced with result of the function , six.text _ type called with second element of date _ check as an argument , return the result. define the method get _ form _ error with an argument self .
call the function ugettext with an argument string &quot; Please correct the duplicate values below . &quot; , return the result .
define the method save _ existing _ objects with 2 arguments : self and commit set to boolean True .
self.changed _ objects is an empty list .
self.deleted _ objects is an empty list .
if self.initial _ forms is false ,
return an empty list .
saved _ instances is an empty list .
substitute self.deleted _ forms for forms _ to _ delete .
for every form in self.initial _ forms ,
substitute form.instance for obj .
if form is contained in forms _ to _ delete ,
if obj.pk is None ,
skip this loop iteration .
append obj to self.deleted _ objects list .
if commit is true ,
call the method obj.delete.
otherwise if form.has _ changed method evaluates to true ,
append a tuple with 2 elements : obj and form.changed _ data to self.changed _ objects .
call the method self.save _ existing with 3 arguments : form , obj and commit as commit , append the result to saved _ instances .
if commit is false ,
append form to self.saved _ forms .
return saved _ instances .
define the method save _ new _ objects with 2 arguments : self and commit set to boolean True .
self.new _ objects is an empty list .
for every form in self.extra _ forms ,
if function form.has _ changed evaluates to false ,
skip this loop iteration .
if self.can _ delete is true and call to the function self . _ should _ delete _ form with an argument form evaluates to true ,
skip this loop iteration .
call the method self.save _ new with 2 arguments : form and commit as commit , append the result to self.new _ objects .
if commit is false ,
append form to self.saved _ forms .
return self.new _ objects .
define the method add _ fields with 2 arguments : self , form and index .
from django.db.models import AutoField , OneToOneField and ForeignKey .
assign self.model. _ meta.pk to self . _ pk _ field and pk .
define the method pk _ is _ not _ editable with an argument pk .
if pk.editable is true , or pk.auto _ created is true or pk is an instance of AutoField class , or if pk.rel is true ,
and pk.rel.parent _ link is true and function pk _ is _ not _ editable called with an argument pk.rel.to. _ meta.pk evaluates to true , if function pk _ is _ not _ editable called with an argument pk evaluates to true , or pk.name is not contained in form.fields ,
if form.is _ bound is true ,
substitute form.instance.pk for pk _ value .
if not ,
try ,
if index is not None ,
call the method self.get _ queryset , substitute field pk under the result at the index index for pk _ value .
if not ,
pk _ value is None .
if IndexError exception is caught ,
pk _ value is None .
if pk is an instance of OneToOneField or ForeignKey classes ,
call the method pk.rel.to. _ default _ manager.get _ queryset , substitute the result for qs .
if not ,
call the method self.model. _ default _ manager.get _ queryset with an argument qs .
call the method qs.using with an argument form.instance. _ state.db , substitute the result for qs .
if form . _ meta.widgets is true ,
get the value under self . _ pk _ field.name key of form . _ meta.widgets dictionary , if it exists substitute it for widget , if not ,
widget is an instance of HiddenInput class. if not ,
widget is an instance of HiddenInput class
value under the self . _ pk _ field.name key of form.fields dictionary is an instance of ModelChoiceField class ,
created with 4 arguments : qs , initial as pk _ value , required as boolean False and widget as widget. call the method add _ fields from the base class of the class BaseModelFormSet , with 2 arguments : form and index .
define the function modelformset _ factory with 18 arguments : model , form set to ModelForm , formfield _ callback set to None ,
get &apos; Meta &apos; attribute from form object , if it exists substitute it for meta , if not meta is None .
if meta is None ,
meta is an instance of a class named &apos; Meta &apos; , derived from the object base class , without any fields .
if &apos; fields &apos; attribute of meta is None , or if it doesnt exists if fields is None and if &apos; exclude &apos; attribute of meta is None ,
or if it doesnt exists if exclude is None. raise an ImproperlyConfigured with an argument string &quot; Calling modelformset _ factory without defining &apos; fields &apos; or &apos; exclude &apos; ,
explicitly is prohibited . &quot; call the function modelform _ factory with 10 arguments : model , form as form , fields as fields , exclude as exclude ,
formfield _ callback as formfield _ callback , widgets as widgets , localized _ fields as localized _ fields , labels as labels , help _ texts as help _ texts and error _ messages as error _ messages , substitute the result for form. call the function formset _ factory with 10 arguments : form , formset , extra as extra , min _ num as min _ num , max _ num as max _ num ,
can _ order as can _ order , can _ delete as can _ delete , validate _ min as validate _ min , validate _ max as validate _ max , substitute the result for form. substitute model for FormSet.model.
return FormSet .
derive the class BaseInlineFormSet from the BaseModelFormSet base class .
define the method _ _ init _ _ with 8 arguments : self , data set to None , files set to None , instance set to None ,
save _ as _ new set to boolean False , prefix set to None , queryset set to None and unpacked dictionary kwargs. if instance is None ,
call the method self.fk.rel.to , substitute the result for self.instance.
if not ,
substitute instance for self.instance.
substitute save _ as _ new for self.save _ as _ new .
if queryset is None ,
substitute self.model. _ default _ manager for queryset .
if self.instance.pk is not None ,
call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name , substitute the result for qs .
if not ,
call the method queryset.none , substitute it for qs .
call the method _ _ init _ _ from the base class of the class BaseInlineFormSet , with 5 arguments : data , files , prefix set to prefix ,
queryset set to qs and unpacked dictionary kwargs. define the method initial _ form _ count with an argument self .
if self.save _ as _ new is true ,
return integer 0 .
call the method initial _ form _ count from the base class of the class BaseInlineFormSet , return the result .
define the method _ construct _ form with 3 arguments : self , i and unpacked dictionary kwargs .
call the method _ construct _ form from the base class of the class BaseInlineFormSet , with 2 arguments : i ,
and unpacked dictionary kwargs , substitute the result for form. if self.save _ as _ new is true ,
call the method form.add _ prefix with an argument self . _ pk _ field.name ,
use the result as an key to get the value of the form.data dictionary , assign it value None. call the method form.add _ prefix with an argument self.fk.name ,
use the result as an key to get the value of the form.data dictionary , assign it value None. use return value of the self.fk.get _ attname as the name of the attribute of form.instance object to set , set it to self.instance.pk.
return form .
classmethod decorator ,
define the method get _ default _ prefix with an argument cls .
from django.db.models.fields.related import RelatedObject into default namespace .
instantiate RelatedObject class with 3 arguments : cls.fk.rel.to , cls.model and cls.fk ,
call the method get _ accessor _ name on the result , substitute all occurrences of &apos; + &apos; in the result with an empty string , return it. define the method save _ new with 3 arguments : self , form and commit set to boolean True .
call the method form.save , with an argument commit set to boolean False , substitute the result for obj .
get self.instance
get attribute &apos; pk &apos; of the pk _ value object , if it doesnt exists use pk _ value , set to it self.fk.get _ attname return value attribute ,
of the obj object. if commit is true ,
call the method obj.save.
if commit is true and form has an attribute &apos; save _ m2m &apos; ,
call the method form.save _ m2m .
return obj .
define the method add _ fields with 3 arguments : self , form and index .
call the method add _ fields from the base class of the class BaseInlineFormSet , with 2 arguments : form and index .
if self . _ pk _ field equals self.fk ,
substitute self . _ pk _ field.name for name .
kwargs is a dictionary with boolean True for &apos; pk _ field &apos; .
if not ,
substitute self.fk.name for name .
kwargs is a dictionary with an entry : attribute &apos; label &apos; of the object under the name key of the form.fields dictionary for &apos; label &apos; ,
if it doesnt exists return value of the function capfirst with an argument self.fk.verbose _ name for &apos; label &apos; . if self.fk.rel.field _ name is not equal to self.fk.rel.to. _ meta.pk.name ,
substitute self.fk.rel.field _ name for value under the &apos; to _ field &apos; key of the kwargs dictionary .
value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments :
self.instance and unpacked dictionary kwargs. if form . _ meta.fields is true ,
if form . _ meta.fields is an instance of tuple type ,
form . _ meta.fields is a list created out of form . _ meta.fields elements .
append self.fk.name to form . _ meta.fields.
define the method get _ unique _ error _ message with 2 arguments : self and unique _ check .
unique _ check is a list with elements field , for every field in unique _ check if field is not equal to self.fk.name.
call the method get _ unique _ error _ message from the base class of the class BaseInlineFormSet , with an argument unique _ check , return the result .
define the function _ get _ foreign _ key with 4 arguments : parent _ model , model , fk _ name set to None and can _ fail set to boolean False .
from django.db.models import ForeignKey .
substitute model . _ meta for opts .
if fk _ name is true ,
fks _ to _ parent is a list containing f , for every f in opts.fields if f.name equals fk _ name .
if length of fks _ to _ parent equals integer 1 .
substitute first element of fks _ to _ parent for fk .
if fk is not an instance of ForeignKey class , or fk.rel.to is not equal to parent _ model ,
and fk.rel.to is not contained in result of the call to the method parent _ model . _ meta.get _ parent _ list. raise an ValueError with an argument string &quot; fk _ name &apos; % s &apos; is not a ForeignKey to &apos; % s . % &apos; . &quot; , where &apos; % s &apos; is replaced with ,
fk _ name , parent _ model . _ meta.app _ label and parent _ model . _ meta.object _ name , respectively. otherwise if length of fks _ to _ parent is zero ,
raise an ValueError with an argument string &quot; &apos; % s . % s &apos; has no field named &apos; % s &apos; . &quot; , where &apos; % s &apos; is replaced with ,
model . _ meta.app _ label , model . _ meta.object _ name , fk _ name , respectively. if not ,
fks _ to _ parent is a list containing f for every f in opts.fields , only if f is an instance of ForeignKey ,
and , if f.rel.toequals parent _ model or f.rel.to is contained in result of the call to the method parent _ model . _ meta.get _ parent _ list. if length of fks _ to _ parent is integer 1 ,
substitute first element of fks _ to _ parent for fk .
otherwise if length of fks _ to _ parent is zero ,
if can _ fail is true ,
return nothing .
raise an ValueError with an argument string &quot; &apos; % s . % s &apos; has no ForeignKey to &apos; % s . % s &apos; . &quot; , where &apos; % s &apos; is replaced with ,
model . _ meta.app _ label , model . _ meta.object _ name , parent _ model . _ meta.app _ label , parent _ model . _ meta.object _ name , respectively. if not ,
raise an ValueError with an argument string &quot; &apos; % s . % s &apos; has more than one ForeignKey to &apos; % s . % s &apos; . &quot; , where &apos; % s &apos; is replaced with ,
model . _ meta.app _ label , model . _ meta.object _ name , parent _ model . _ meta.app _ label , parent _ model . _ meta.object _ name , respectively. return fk .
define the function inlineformset _ factory with 20 arguments : parent _ model , model , form set to ModelForm ,
call the function _ get _ foreign _ key with 3 arguments : parent _ model , model and fk _ name = fk _ name , substitute the result for fk .
if fk.unique is boolean true ,
max _ num is integer 1 .
kwargs is a dictionary with 17 entries : form for &apos; form &apos; , formfield _ callback for &apos; formfield _ callback &apos; , formset for &apos; formset &apos; ,
extra for &apos; extra &apos; , can _ delete for &apos; can _ delete &apos; , can _ order for &apos; can _ order &apos; , fields for &apos; fields &apos; , exclude for &apos; exclude &apos; , min _ num for &apos; min _ num &apos; , max _ num for &apos; max _ num &apos; , widgets for &apos; widgets &apos; , validate _ min for &apos; validate _ min &apos; , validate _ max for &apos; validate _ max &apos; , localized _ fields for &apos; localized _ fields &apos; , labels for &apos; labels &apos; , help _ texts for &apos; help _ texts &apos; , and error _ messages for &apos; error _ messages &apos; . call the function modelformset _ factory with 2 arguments : model and unpacked dictionary kwargs , substitute the result for FormSet .
substitute fk for FormSet.fk.
return FormSet .
derive the class InlineForeignKeyField from the Field base class .
substitute HiddenInput for widget .
default _ error _ messages is an dictionary with an entry : return value of the function _ called with an argument ,
string &apos; The inline foreign key did not match the parent instance primary key . &apos; for &apos; invalid _ choice &apos; . define the method _ _ init _ _ with 4 arguments : self , parent _ instance , unpacked list args and unpacked dictionary kwargs .
substitute parent _ instance for self.parent _ instance .
remove element from kwargs dictionary under the key &apos; pk _ field &apos; , substitute it for self.pk _ field if it exists ,
if not self.pk _ field is boolean False. remove element from kwargs dictionary under the key &apos; to _ field &apos; , substitute it for self.to _ field if it exists ,
if not self.to _ field is None. if self.parent _ instance is not None ,
if self.to _ field is true ,
get self.to _ field attribute of self.parent _ instance object , substitute it for value under the &apos; initial &apos; key of the kwargs dictionary .
if not ,
substitute self.parent _ instance.pk for value under the &apos; initial &apos; key of the kwargs dictionary .
value under the &apos; required &apos; key of the kwargs dictionary is boolean False .
call the method _ _ init _ _ from the base class of the class InlineForeignKeyField , with 2 arguments unpacked list args ,
and unpacked dictionary kwargs. define the method clean with 2 arguments : self and value .
if value is contained in self.empty _ values ,
if self.pk _ field ,
return None .
return self.parent _ instance .
if self.to _ field is true ,
get self.to _ field attribute of self.parent _ instance , substitute it for orig .
if not ,
substitute self.parent _ instance.pk for orig .
if return values of the function force _ text called two times with 1 argument , with value , and with orig , are equal ,
raise an ValidationError with 2 arguments : self.error _ messages dictionary value under the &apos; invalid _ choice &apos; key ,
and code set to a string &apos; invalid _ choice &apos; . return self.parent _ instance .
define the method _ has _ changed with 3 arguments : self , initial and data .
return boolean False .
derive the class ModelChoiceIterator from object base class .
define the method _ _ init _ _ with 2 arguments : self and field .
substitute field for self.field.
substitute field.queryset for self.queryset.
define the method _ _ iter _ _ with an argument self .
if self.field.empty _ label is not None ,
yield a tuple with 2 elements : an empty string and self.field.empty _ label .
if self.field.cache _ choices is true ,
if self.field.choice _ cache is None ,
self.field.choice _ cache is a list containing results of the method self.choice called with an argument obj ,
for every obj in result of the method self.queryset.all. for every choice in self.field.choice _ cache ,
yield choice .
if not ,
for every obj in result of the call to the method self.queryset.all ,
call the method self.choice with an argument obj , yield the result .
define the method _ _ len _ _ with an argument self .
sum length of self.quertset and integer 1 if self.field.empty _ label is not None , or integer 0 if not , return the result .
define the method choice with 2 arguments : self and obj .
return a tuple with 2 elements : result of the method self.field.prepare _ value called with an argument obj ,
and result of the method self.field.label _ from _ instance , called with an argument obj. derive the class ModelChoiceField from the ChoiceField base class .
default _ error _ messages is a dictionary with an entry , result of the call to the function _ with an argument ,
string &apos; Select a valid choice . That choice is not one of the available choices . &apos; for &apos; invalid _ choice &apos; . define the method _ _ init _ _ with 13 arguments : self , queryset , empty _ label set to a string &quot; --------- &quot; , cache _ choices set to None ,
required set to boolean True , widget set to None , label set to None , initial set to None , help _ text set to an empty string , to _ field _ name set to None , limit _ choices _ to set to None , unpacked list args and unpacked dictionary kwargs. if required is true and initial is not None ,
self.empty _ label is None .
if not ,
substitute empty _ label for self.empty _ label .
if cache _ choices is not None ,
call the function warnings.warn with 3 arguments : string &quot; cache _ choices has been deprecated and will be removed in Django 1.9 . &quot; ,
RemovedInDjango19Warning and stacklevel set to integer 2. if not ,
substitute boolean False for cache _ choices .
substitute cache _ choices for self.cache _ choices .
call the method Field . _ _ init _ _ with 8 arguments : self , required , widget , label , initial , help _ text , unpacked list args ,
and unpacked dictionary kwargs. substitute queryset for self.queryset.
substitute limit _ choices _ to for self.limit _ choices _ to .
self.choice _ cache is None .
substitute to _ field _ name for self.to _ field _ name
define the method _ _ deepcopy _ _ with 2 arguments : self and memo .
call the method _ _ deepcopy _ _ from the base class of the class ChoiceField , with an argument memo , substitute the result for result .
substitute result.queryset for result.queryset.
return result .
define the method _ get _ queryset with an argument self .
return self . _ queryset .
define the method _ set _ queryset with 2 arguments : self and queryset .
substitute queryset for self . _ queryset .
substitute self.choices for self.widget.choices.
queryset is an property object of this class , with _ get _ queryset getter and _ set _ queryset setter functions .
define the method label _ from _ instance with 2 arguments : self and obj .
call the function smart _ text with an argument obj , return the result .
define the method _ get _ choices with an argument self .
if self has an attribute &apos; _ choices &apos; ,
return self . _ choices .
return an instance of ModelChoiceIterator class , created with an argument self .
choices is an property property object of this class , with _ get _ choices getter and ChoiceField . _ set _ choices setter functions .
define the method prepare _ value with 2 arguments : self and value .
if value has an attribute &apos; _ meta &apos; ,
if self.to _ field _ name is true ,
call the method value.serializable _ value with an argument self.to _ field _ name , return the result .
if not ,
return value.pk.
call the method prepare _ value from the base class of the class ModelChoiceField , with an argument value , return the result .
define the method to _ python with 2 arguments : self and value .
if value is contained in self.empty _ values ,
return None .
try ,
substitute self.to _ field _ name , if exists , for key , if not substitute string &apos; pk &apos; for key .
call the method self.queryset.get with an argument , unpacked dictionary with an element : value for key , substitute the result for value .
if ValueError or self.queryset.model.DoesNotExist exception is caught ,
raise an ValidationError exception with 2 arguments : value under the &apos; invalid _ choice &apos; key of the self.error _ messages dictionary ,
code set to a string &apos; invalid _ choice &apos; . return value .
define the method validate with 2 arguments : self and value .
call the method Field.validate with 2 arguments : self and value , return the result .
define the method _ has _ changed with 3 arguments : self , initial and data .
if initial is not None , substitute initial for initial _ value , otherwise initial _ value is an empty string .
if data is not None , substitute data for initial _ value , otherwise data _ value is an empty string .
call the method self.prepare _ value with an argument initial _ value , use it as the argument for the call to the function force _ text ,
if the result is equal to the result of the call to the function force _ text with data _ value as an argument , return boolean True , otherwise return boolean False. derive the class ModelMultipleChoiceField from the ModelChoiceField base class .
substitute SelectMultiple for widget .
substitute MultipleHiddenInput for hidden _ widget .
default _ error _ messages is an dictionary with 3 entries : return value of the function _ called with an argument ,
string &apos; Enter a list of values . &apos; for &apos; list &apos; , return value of the function _ called with an argument , string &apos; Select a valid choice . % ( value ) s is not one of the available choices . &apos; for &apos; invalid _ choice &apos; , and return value of the function _ called with an argument string &apos; &quot; % ( pk ) s &quot; is not a valid value for a primary key . &apos; for &apos; invalid _ pk _ value &apos; . define the method _ _ init _ _ with 10 arguments : self , queryset , cache _ choices set to None , required set to boolean True ,
widget set to None , label set to None , initial set to None , help _ text set to an empty strign , unpacked list args and unpacked dictionary kwargs. call the method _ _ init _ _ from the base class of the class ModelMultipleChoiceField , with 10 arguments : queryset , None ,
cache _ choices , required , widget , label , initial , help _ text , unpacked list args and unpacked dictionary kwargs. define the method to _ python with 2 arguments : self and value .
if value is false ,
return an empty list .
instantiate base class of the class ModelMultipleChoiceField , substitute filed to _ python of the result for to _ py .
return a list containing return values of the function to _ py called with an argument val , for every val in value .
define the method clean with 2 arguments : self and value .
if self.required is true and value is false ,
raise an ValidationError with 2 arguments : dictionary self.error _ messages value under the key &apos; required &apos; ,
and code set to string &apos; required. otherwise if self.required is false and value is false ,
call the method self.queryset.none , return the result .
if value is not an instance of list or tuple types ,
raise an ValidationError with 2 arguments : dictionary self.error _ messages value under the key &apos; list &apos; ,
and code set to string &apos; list. substitute self.to _ field _ name , if true , for key , or if not , substitute string &apos; pk &apos; for key .
for every pk in value ,
try ,
call the method self.queryset.filter with an argument , unpacked dictionary with an entry : pk for key .
if ValueError exception is caught ,
raise an ValidationError with 3 arguments : dictionary self.error _ messages value under the key &apos; invalid _ pk _ value &apos; ,
code set to string &apos; invalid _ pk _ value and params with an entry : pk for &apos; pk &apos; . call the method self.queryset.filter with an argument , unpacked dictionary with an entry : value for string &apos; _ _ in &apos; appended to key ,
substitute the result for qs. pks is a set containing results of the call to the function force _ text with an argument , key attribute of the o object ,
for every o in opts. for every val in value ,
call the function force _ text with an argument val , if the result is not contained in pks ,
raise an ValidationError with 3 arguments : dictionary self.error _ messages value under the key &apos; invalid _ choice &apos; ,
code set to string &apos; invalid _ choice &apos; and params as a dictionary with an entry , val for &apos; value &apos; . call the method self.run _ validators with an argument value .
return qs .
define the method prepare _ value with 2 arguments : self and value .
if value has an attribute &apos; _ _ iter _ _ &apos; and value is not an instance of six.text _ type and value doesnt have an attribute &apos; _ meta &apos; ,
call the method prepare _ value from the base class of the class ModelMultipleChoiceField , with an argument v ,
for every v in value , return the list of results. call the method prepare _ value the base class of the class ModelMultipleChoiceField , with an argument value , return the result .
define the method _ has _ changed with 3 arguments : self , initial and data .
if initial is None ,
initial is an empty list .
if data is None ,
data is an empty list .
if lengths of initial and data are equal ,
return boolean True .
initial _ set is set created out of return values of the function force _ text called with an argument value ,
for every value in result of the method self.prepare _ value called with an argument initial. data _ set is set created out of return values of the function force _ text called with an argument value ,
for every value in data. if data _ set is not equal to initial _ set return boolean True , otherwise return boolean False .
define the function modelform _ defines _ fields with an argument form _ class .
only if form _ class is not None , and if form _ class has an attribute &apos; _ meta &apos; and form _ class . _ meta.fields is not None ,
import module warnings .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
call the function warnings.warn with 3 arguments : string &quot; The django.forms.util module has been renamed . &quot;
&quot; Use django.forms.utils instead . &quot; , RemovedInDjango19Warning and stacklevel set to an integer 2. from django.forms.utils import everything into default name space .
from _ _ future _ _ import unicode _ literals into default name space .
import module json .
import module sys .
try ,
from collections import UserList into default namespace .
if ImportError exception is caught .
from UserList import UserList into default namespace .
from django.conf import settings into default name space .
from django.utils.encoding import force _ text and python _ 2 _ unicode _ compatible into default name space .
from django.utils.html import format _ html , format _ html _ join and escape into default name space .
from django.utils import timezone into default name space .
from django.utils.translation import ugettext _ lazy as _ into default name space .
from django.utils import six into default name space .
from django.core.exceptions import ValidationError into default name space .
define the function flatatt with an argument attrs .
boolean _ attrs is an empty list .
convert items of attrs dictionary to list of tuples , for every attr and value in it ,
if value is boolean True ,
append tuple containing element attr to boolean _ attrs .
delete entry under the attr key of the attrs dictionary .
otherwise if value is boolean False ,
delete entry under the attr key of the attrs dictionary .
call the function format _ html _ join twice , first time with 3 elements : an empty string , string &apos; { 0 } = &quot; { 1 } &quot; &apos;
and sorted return value of the items of the attrs dictionary , and second time with 3 arguments : an empty string , string &apos; { 0 } &apos; , and sorted list of boolean _ attrs elements , concatenate the results and return the resulting list. python _ 2 _ unicode _ compatible decorator ,
derive the class ErrorDict from the dict base class .
define the method as _ data with an argument self .
return a dictionary generated with an expression , return value of the method e.as _ data for f ,
for every f and e in list of tuples of self dictionary key , pair entries. define the method as _ json with 2 argumens self and escape _ html set to boolean False .
call the method json.dumps with a dictionary generate with an expression as an argument , return value of the function e.get _ json _ data ,
with an argument escape _ html for f , for every f and e in list of tuples of self dictionary key , pair entries , return the result. define the method as _ ul with an argument self .
if self is false ,
return an empty string .
call the function format _ html with 2 arguments : string &apos; &lt; ul class = &quot; errorlist &quot; &gt; { 0 } &lt; / ul &gt; &apos; , and return value of the function ,
format _ html _ join , called with 3 arguments : empty string , string &apos; &lt; li &gt; { 0 } { 1 } &lt; / li &gt; &apos; , tuple containing tuples with 2 elements : k and result of the function force _ text with an argument v , for every k and v in items of the dictionary self , return the result. define the method as _ text with an argument self .
output is an empty list .
call the method self.items , for every field and errors in the result .
convert field into a string and concatenate it to a string &apos; * &apos; , append the result to output .
for every e in errors convert e into a string and append it to a string &apos; * &apos; ,
join all the results into a string separated by newlines , append the result to output. join elements of output into a string , separated by newline characters , return the result .
define the method _ _ str _ _ with an argument self .
call the method self.as _ ul , return the result .
python _ 2 _ unicode _ compatible decorator ,
derive the class ErrorList from the UserList and list base classes .
define the method _ _ init _ _ with 3 arguments : self , initlist set to None and error _ class set to None .
call the method _ _ init _ _ with an argument initlist from the base class of the class ErrorList .
if error _ class is None ,
self.error _ class is a string &apos; errorlist &apos; .
if not ,
append error _ class converted into a string to string &apos; errorlist &apos; , substitute the result for self.error _ class .
define the method as _ text with an argument self .
instantiate ValidationError class with an argument self.data , return its field error _ list .
define the method get _ json _ data with 2 arguments self and escape _ html set to boolean False .
errors is an empty list .
call the method self.as _ data , for every error in the result .
convert elements of error into a list , substitute the first element for message .
append to errors list a dictionary created with 2 etries , if escape _ html is true , return value of the function escape
with an argument message for &apos; message &apos; , or if not message for &apos; message &apos; and error.code for &apos; code &apos; in error.code is true , if not , an empty string for &apos; code &apos; . return errors .
define the method as _ json with 2 arguments self and escape _ html set to boolean False .
call the method self.get _ json _ data with an argument escape _ html ,
use the result as an argument for the call to the json.dumps function , return the result. define the method as _ text with an argument self .
if self.data is false ,
return an empty string .
call the function format _ html with 3 arguments : string &apos; &lt; ul class = &quot; { 0 } &quot; &gt; { 1 } &lt; / ul &gt; &apos; , self.error _ class and return value of the function ,
format _ html _ join , called with 3 arguments : empty string , string &apos; &lt; li &gt; { 0 } &lt; / li &gt; &apos; , tuple containing results of the function , force _ text with an argument e , for every e in self , return the result. define the method as _ text with an argument self .
for every e in self , append convert e to an string and append it to string &apos; * &apos; ,
join all of the results into a string separated by newline character , return the result. define the method _ _ str _ _ with an argument self .
call the method self.as _ ul , return the result .
define the method _ _ repr _ _ with an argument self .
convert elements of self into a list , return the its printable representation .
define the method _ _ contains _ _ with an argument self .
if item is contained in the list of the elements of self , return boolean True , otherwise return boolean False .
define the method _ _ eq _ _ with an argument self .
if other equals list containing elements of self , return boolean True , otherwise return boolean False .
define the method _ _ ne _ _ with an argument self .
if other is not equal to list containing elements of self , return boolean True , otherwise return boolean False .
define the method _ _ getitem _ _ with an argument self .
substitute i-th element of self.data for error .
if error is an instance of ValidationError ,
return first element of the list containing elements of error .
call the function force _ text with an argument error , return the result .
define the function from _ current _ timezone with an argument value .
if settings.USE _ TZ is true and value is not None and call to the function timezone.is _ naive with an argument value , evaluates to true ,
call the method timezone.get _ current _ timezone , substitute the result for current _ timezone .
try ,
call the function timezone.make _ aware with arguments value and current _ timezone , return the result .
if Exception exception is caught ,
call the function _ with an argument string &apos; % ( datetime ) s couldn \ &apos; t be interpreted in time zone % ( current _ timezone ) s ; it &apos;
&apos;may be ambiguous or it may not exist . &apos; , substitute the result for message. params is an dictionary containing 2 initial entries : value for &apos; datetime &apos; and current _ timezone for &apos; current _ timezone &apos; .
call the function six.reraise with 3 arguments : class ValidationError , class ValidationError , created with 3 arguments :
message , code as a string &apos; ambiguous _ timezone &apos; and params as params , and third element of the return value of the function sys.exc _ info. return value .
define the function to _ current _ timezone with an argument value .
if settings.USE _ TZ is true and value is not None and call to the function timezone.is _ aware with an argument value , evaluates to true ,
call the function timezone.get _ current _ timezone , substitute the result for current _ timezone .
call the function timezone.make _ naive with 2 arguments value , current _ timezone , return the result .
return value .
from _ _ future _ _ import unicode _ literals into default name space .
import module copy .
from itertools import chain into default name space .
from django.conf import settings into default name space .
from django.forms.utils import flatatt and to _ current _ timezone into default name space .
from django.utils.datastructures import MultiValueDict and MergeDict into default name space .
from django.utils.encoding import force _ text and python _ 2 _ unicode _ compatible into default name space .
from django.utils.html import conditional _ escape and format _ html into default name space .
from django.utils.translation import ugettext _ lazy into default name space .
from django.utils.safestring import mark _ safe into default name space .
from django.utils import formats and six into default name space .
from django.utils.six.moves.urllib.parse import urljoin into default name space .
_ _ all _ _ is a tuple of strings : &apos; Media &apos; , &apos; MediaDefiningClass &apos; , &apos; Widget &apos; , &apos; TextInput &apos; , &apos; EmailInput &apos; , &apos; URLInput &apos; , &apos; NumberInput &apos; ,
&apos;PasswordInput &apos; , &apos; HiddenInput &apos; , &apos; MultipleHiddenInput &apos; , &apos; ClearableFileInput &apos; , &apos; FileInput &apos; , &apos; DateInput &apos; , &apos; DateTimeInput &apos; , &apos; TimeInput &apos; , &apos; Textarea &apos; , &apos; CheckboxInput &apos; , &apos; Select &apos; , &apos; NullBooleanSelect &apos; , &apos; SelectMultiple &apos; , &apos; RadioSelect &apos; , &apos; CheckboxSelectMultiple &apos; , &apos; MultiWidget &apos; , &apos; SplitDateTimeWidget &apos; and &apos; SplitHiddenDateTimeWidget &apos; . MEDIA _ TYPES is a tuple with 2 strings : &apos; css &apos; and &apos; js &apos; .
python _ 2 _ unicode _ compatible decorator ,
derive the class Media from the object base class .
define the method _ _ init _ _ with 3 arguments : self , media set to None and unpacked dictionary kwargs .
if media is true ,
substitute media . _ _ dict _ _ for media _ attrs .
if not ,
substitute kwargs for media _ attrs .
self . _ css is an empty dictionary .
self . _ js is an empty list .
for every name in MEDIA _ TYPES ,
append name to string &apos; add _ &apos; use it as the name of the attribute to get from object self , call the result as an function ,
with an argument : value under the name key of the media _ attrs dictionary , if it exists , if not use None as an argument. define the method _ _ str _ _ with an argument self .
call the method self.render , return the result .
define the method render with an argument self .
call the function chain with an argument unpacked list , append name to string &apos; render _ &apos; ,
and use it as the name of the attribute to get from the self object , call the result and append it to a list for every name in MEDIA _ TYPES , join all the results into a string with newline separator , use the result as an argument for the call to the function mark _ safe , return the result. define the method render _ js with an argument self .
return a list containing results of the function format _ html called with 2 arguments :
string &apos; &lt; script type = &quot; text / javascript &quot; src = &quot; { 0 } &quot; &gt; &lt; / script &gt; &apos; and absolute file path of the path , for every path is self . _ js. define the method render _ css with an argument self .
call the method self . _ css.keys , sort the result and substitute it for media .
return the result of the call to the function chain , with an argument unpacked list , containing the result of the function ,
format _ html called with 3 arguments : string &apos; &lt; link href = &quot; { 0 } &quot; type = &quot; text / css &quot; media = &quot; { 1 } &quot; rel = &quot; stylesheet &quot; / &gt; &apos; , return value of the function self.absolute _ path called with an argument path and medium , for every medium in media and for every path in value under the medium key of the self . _ css dictionary. define the method absolute _ path with 3 arguments self , path and prefix set to None .
if path starts with string &apos; http : / / &apos; or string &apos; https : / / &apos; or with string &apos; / &apos; ,
return path ,
if prefix is None ,
if settings.STATIC _ URL is None ,
substitute settings.MEDIA _ URL for prefix .
if not ,
substitute settings.STATIC _ URL for prefix .
join prefix and path into an url , return it .
define the method _ _ getitem _ _ with arguments self and name .
if name is contained in MEDIA _ TYPES ,
return an instance of the class Media , called with an unpacked dictionary with an entry : name appended to string &apos; _ &apos; ,
attribute of the self object for name converted into a string. raise an KeyError with an argument string &apos; Unknown media type &quot; % s &quot; &apos; , where &apos; % s &apos; is replaced with name .
define the method _ _ getitem _ _ with arguments self and name .
if data is true ,
for every path in data ,
if path is not contained in self . _ js ,
append path to self . _ js .
define the method add _ css with arguments self and data .
if data is true ,
call the method data.items , for every medium and paths in the result .
for every path in paths ,
if call to the method self . _ css.get with an argument medium evaluates to false ,
or path is not contained in the value under the medium key of self . _ css dictionary. call the method self . _ css.setdefault with 2 arguments medium and an empty string , append path to the result .
define the method _ _ add _ _ with arguments self and other .
combined is an instance of Media class .
for every name in MEDIA _ TYPES ,
append name to &apos; add _ &apos; use it as the name of the attribute to get from combined object , call the result with an argument :
name appended to string &apos; _ &apos; , as the name of the attribute to get from self object , or if the previous doesnt exist , None. append name to &apos; add _ &apos; use it as the name of the attribute to get from combined object , call the result with an argument :
name appended to string &apos; _ &apos; , as the name of the attribute to get from other object , or if the previous doesnt exist , None. return combined .
define the function media _ property with an argument cls .
define the method _ media with an argument self .
sup _ cls is base class of the class cls .
try ,
substitute sup _ cls.media for base .
if AttributeError exception is caught ,
base is an instance of Media class .
get the attribute &apos; Media &apos; of the cls object , if it exists substitute it for definition , if not definition is None .
if definition is true ,
get the attribute &apos; extend &apos; of the cls object , if it exists substitute it for extend , if not extend is boolean True .
if extend is true ,
if extend is boolean True ,
substitute base for m .
if not ,
m is an instance of Media class .
for every medium in extend ,
sum m and value under the medium key of the base dictionary , substitute it for m .
sum m and class Media created with definition , return the result .
if not ,
return an instance of Media class , created with definition as an argument .
if not ,
return base .
return property object with _ media as getter function .
derive the class MediaDefiningClass from the type base class .
define the method _ _ new _ _ with 4 arguments mcs , name , bases and attrs .
call the method _ _ new _ _ from the base class of the class MediaDefiningClass , called with 4 arguments : mcs , name , bases and attrs .
if &apos; media &apos; is not contained in attrs ,
call the method media _ property with an argument new _ class , substitute the result for new _ class.media.
return new _ class .
python _ 2 _ unicode _ compatible decorator
derive the class SubWidget from the object base class .
define the method _ _ init _ _ with 6 arguments self , parent _ widget , name , value , attrs and choices .
substitute parent _ widget for self.parent _ widget .
substitute name and value for self.name and self.value.
substitute attrs and choices for self.attrs and self.choices
define the method _ _ str _ _ with an argument self .
args is an list with 3 initial elements self.name , self.value and self.attrs.
if self.choices is true ,
append self.choices to args .
call the method self.parent _ widget.render with unpacked list args as an argument , return the result .
derive the class Widget from the base class in the return value of the six.with _ metaclass called with an argument MediaDefiningClass .
needs _ multipart _ form is boolean False .
is _ localized is boolean False .
is _ required is boolean False .
define the method _ _ init _ _ with arguments self and attrs set to None .
if attrs is not None ,
call the method attrs.copy , substitute the result for self.attrs.
if not ,
self.attrs is an empty dictionary .
define the method _ _ deepcopy _ _ with arguments self and memo .
call the method copy.copy , substitute the result for obj .
call the method self.attrs.copy , substitute the result for obj.attrs.
substitute obj for the value of the memo dictionary at the identity of the self object key .
return obj .
property decorator ,
define the method is _ hidden with an argument self .
if self.input _ type equals string &apos; hidden &apos; and self has an attribute &apos; input _ type &apos; , return boolean True , otherwise return boolean False .
define the method subwidgets with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
yield an instance of SubWidget class created with 5 arguments : self , name , value , attrs and choices .
define the method render with 4 arguments : self , name , value and attrs set to None .
raise an NotImplementedError with an argument string &apos; subclasses of Widget must provide a render ( ) method &apos; .
define the method build _ attrs with 3 arguments : self , extra _ attrs set to None and unpacked dictionary kwargs .
unpack dictionary kwargs , map it through self.attrs and convert to dictionary , substitute the result for attrs .
if extra _ attrs is true ,
update attrs dictionary with extra _ attrs entry .
return attrs .
define the method render with 4 arguments : self , name , value and attrs set to None .
get the value under the name key of the data dictionary , return it , if the previous doesnt exists , return None .
define the method id _ for _ label with 2 arguments : self and id .
return id _ .
derive the class Input from the Widget base class .
input _ type is None .
define the method _ format _ value with 2 arguments : self and value .
if self.is _ localized is true ,
call the method formats.localize _ input with an argument value , return the result .
return value .
define the method render with 4 arguments : self , name , value and attrs set to None .
if value is None ,
value is an empty string .
call the method self.build _ attrs with 3 arguments : attrs , type as self.input _ type , name as name , substitute the result for final _ attrs .
if value is not equal to an empty string ,
call the method self . _ format _ value with an argument value , use the result as an argument for the call to the function force _ text ,
substitute the result for final _ attrs dictionary value under the &apos; value &apos; key. call the function format _ html with 2 arguments : string &apos; &lt; input { 0 } / &gt; &apos; ,
result of the function flatatt called with an argument final _ attrs , return the result. derive the class TextInput from the Input base class .
input _ type is a string &apos; text &apos; .
define the method _ _ init _ _ with 2 arguments : self and attrs set to None .
if attrs is not None ,
remover the entry under the &apos; type &apos; key of the attrs dictionary , substitute it for self.input _ type , if the key doesnt exists ,
substitute self.input _ type for self.input _ type. call the method _ _ init _ _ from the base class of the class TextInput , called with an argument attrs .
derive the class NumberInput from the TextInput base class .
input _ type is a string &apos; number &apos; .
derive the class EmailInput from the TextInput base class .
input _ type is a string &apos; email &apos; .
derive the class URLInput from the TextInput base class .
input _ type is a string &apos; url &apos; .
derive the class PasswordInput from the TextInput base class .
input _ type is a string &apos; password &apos; .
define the method _ _ init _ _ with 3 arguments : self , attrs set to None and render _ value set to boolean False .
call the method _ _ init _ _ from the base class of the class PasswordInput , called with an argument attrs .
substitute render _ value for self.render _ value .
define the method render with 4 arguments : self , name , value and attrs set to None .
if self.render _ value is false ,
value is None .
call the method render from the base class of the class PasswordInput , called with 3 arguments : name , value and attrs ,
return the result. derive the class HiddenInput from the Input base class .
input _ type is a string &apos; hidden &apos; .
derive the class MultipleHiddenInput from the HiddenInput base class .
define the method _ _ init _ _ with 3 arguments : self , attrs set to None and choices set to an empty tuple .
call the method _ _ init _ _ from the base class of the class MultipleHiddenInput , called with an argument attrs .
substitute choices for self.choices.
define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
if value is None ,
value is an empty list .
call the method self.build _ attrs with 3 arguments : attrs , type set to self.input _ type , name set to name ,
substitute the result for final _ attrs. get the value under the &apos; id &apos; key of final _ attrs dictionary , substitute if for id _ if the key doesnt exists , id _ is None .
inputs is an empty list .
for every i and v in enumerated iterable value ,
unpack dictionary final _ attrs , map the values through force _ text function with an argument v and convert it to a dictionary , again ,
substitute the result input _ attrs. if id _ ,
replace &apos; % s &apos; in string &apos; % s _ % s &apos; with id _ and i , substitute the result for input _ attrs dictionary value under the &apos; id &apos; key .
call the function format _ html with 2 arguments : string &apos; &lt; input { 0 } / &gt; &apos; , return value of the function flatatt , called with an argument ,
input _ attrs , append the result to inputs list. join inputs elements into a string , separated with newline character , use it as an argument for the call to the function mark _ safe ,
return the result. define the method value _ from _ datadict with 4 arguments : self , data , files and name .
if data is an instance of MultiValueDict or MergeDict class ,
call the method data.getlist with an argument name , return the result .
return value under the name key of the data dictionary , if it doesnt exists , return None .
derive the class FileInput from the Input base class .
input _ type is a string &apos; file &apos; .
needs _ multipart _ form is boolean True .
define the method render with 4 arguments : self , name , value and attrs set to None .
call the method render from the base class of the class FileInput , called with 3 arguments : name , None and attrs as attrs .
define the method value _ from _ datadict with 4 arguments : self , data , files and name .
return value under the name key of the files dictionary , if it doesnt exists , return None .
FILE _ INPUT _ CONTRADICTION is an instance of object class .
derive the class ClearableFileInput from the FileInput base class .
call the function ugettext _ lazy with an argument string &apos; Currently &apos; , substitute the result for initial _ text .
call the function ugettext _ lazy with an argument string &apos; Change &apos; , substitute the result for input _ text .
call the function ugettext _ lazy with an argument string &apos; Clear &apos; , substitute the result for clear _ checkbox _ label .
template _ with _ initial is a string &apos; % ( initial _ text ) s : % ( initial ) s % ( clear _ template ) s &lt; br / &gt; % ( input _ text ) s : % ( input ) s &apos; .
template _ with _ clear is a string &apos; % ( clear ) s &lt; label for = &quot; % ( clear _ checkbox _ id ) s &quot; &gt; % ( clear _ checkbox _ label ) s &lt; / label &gt; &apos; .
url _ markup _ template is a string &apos; &lt; a href = &quot; { 0 } &quot; &gt; { 1 } &lt; / a &gt; &apos; .
define the method clear _ checkbox _ name with 2 arguments : self and name .
concatenate name and string &apos; -clear &apos; , return it .
define the method clear _ checkbox _ id with 2 arguments : self and name .
concatenate name and string &apos; _ id &apos; , return it .
define the method render with 4 arguments : self , name , value and attrs set to None .
substitutions is a dictionary with 4 initial entries : self.initial _ text for &apos; initial _ text &apos; , self.input _ text for &apos; input _ text &apos; ,
an empty string for &apos; clear _ template &apos; and self.clear _ checkbox _ label for &apos; clear _ checkbox _ label &apos; . template is a string &apos; % ( input ) s &apos; .
call the method render from the base class of the class ClearableFileInput , called with 3 arguments : name , value and attrs ,
substitute the result for value under the &apos; input &apos; key of the substitutions dictionary. if value is true and value has an attribute &apos; url &apos; ,
substitute self.template _ with _ initial for template .
call the function format _ html with 3 arguments : self.url _ markup _ template , value.url and return value of the function force _ text ,
called with an argument value , substitute the result for value under the &apos; initial &apos; key of the substitutions dictionary. if self.is _ required is false ,
call the method self.clear _ checkbox _ name with an argument name , substitute the result for checkbox _ name .
call the method self.clear _ checkbox _ id with an argument checkbox _ name , substitute the result for checkbox _ id .
call the function conditional _ escape with an argument checkbox _ name ,
substitute the result for value under the &apos; clear _ checkbox _ name &apos; key of the substitutions dictionary. call the function conditional _ escape with an argument checkbox _ id ,
substitute the result for value under the &apos; clear _ checkbox _ id &apos; key of the substitutions dictionary. call the method render from the instance of CheckboxInput class , with 3 arguments : checkbox _ name , boolean False ,
attrs as a dictionary with an entry : checkbox _ id for &apos; id &apos; , substitute the result for value under the &apos; clear &apos; key of the substitutions dictionary. format self.template _ with _ clear with substitutions , substitute the result for value under the &apos; clear _ template &apos; key of ,
substitutions dictionary. call the function mark _ safe with an argument template , formated with substitutions , return the result .
define the method value _ from _ datadict with 4 arguments : self , data , files and name .
call the method value _ from _ datadict from the base class of the class ClearableFileInput ,
called with 3 arguments : data , files and name , substitute the result for upload. if self.is _ required is boolean false and call to the method value _ from _ datadict from the instance of CheckboxInput class ,
with 3 arguments : data , files and return value of the function self.clear _ checkbox _ name called with an argument name , evaluates to true , if upload is true ,
return FILE _ INPUT _ CONTRADICTION .
return boolean False .
return boolean upload .
derive the class Textarea from the Widget base class .
define the method _ _ init _ _ with 2 arguments : self and attrs set to None .
default _ attrs is an dictionary with 2 initial entries : string &apos; 40 &apos; for &apos; cols &apos; and string &apos; 10 &apos; for &apos; rows &apos; .
if attrs is true ,
update default _ attrs dictionary with attrs entry .
call the method _ _ init _ _ from the base class of the class Textarea , with an argument default _ attrs .
define the method render with 4 arguments : self , name , value and attrs set to None .
if value is None ,
value is an empty string .
call the method self.build _ attrs with 2 arguments : attrs and name set to name , substitute the result for final _ attrs .
call the function format _ html with 3 arguments : string ( &apos; &lt; textarea { 0 } &gt; \ r \ n { 1 } &lt; / textarea &gt; &apos; , return value of the function flatatt ,
called with an argument final _ attrs and return value of the function force _ text called with an argument value , return the result. derive the class DateTimeBaseInput from the TextInput base class .
format key is an empty string .
supports _ microseconds is boolean False .
define the method _ _ init _ _ with 3 arguments : self , attrs set to None and format is None .
call the method _ _ init _ _ from the base class of the class DateTimeBaseInput , with an argument attrs .
substitute format for self.format if format is true , if not self.format is None .
define the method _ format _ value with 2 arguments : self and value .
call the function formats.localize _ input with 2 arguments : value and self.format if true , if not ,
then the first element of the result of the function formats.get _ format called with an argument self.format _ key , return the result. derive the class DateInput from the DateTimeBaseInput base class .
format _ key is a string &apos; DATE _ INPUT _ FORMATS &apos; .
derive the class DateTimeInput from the DateTimeBaseInput base class .
format _ key is a string &apos; DATETIME _ INPUT _ FORMATS &apos; .
derive the class TimeInput from the DateTimeBaseInput base class .
format _ key is a string &apos; TIME _ INPUT _ FORMATS &apos; .
define the function boolean _ check with an argument v.
if v is boolean False or v is None or v is an empty string , return boolean False , otherwise return boolean True .
derive the class CheckboxInput from the Widget base class .
define the method _ _ init _ _ with 3 arguments : self , attrs set to None and check _ test set to None .
call the method _ _ init _ _ from the base class of the class CheckboxInput , with an argument attrs .
substitute boolean _ check for self.check _ test if check _ test is None , otherwise substitute check _ test for self.check _ test .
define the method render with 4 arguments : self , name , value and attrs set to None .
call the method self.build _ attrs with 3 arguments : attrs , type as a string &apos; checkbox &apos; , name as name , substitute the result for final _ attrs .
call the method self.check _ test with an argument value , if it evaluates to true ,
substitute string &apos; checked &apos; for value under the &apos; checked &apos; key of final _ attrs dictionary .
if value is boolean False or boolean True or value is None or value is an empty string , do not perform the following ,
call the function force _ text with an argument value , substitute the result for value under the &apos; value &apos; key of the final _ attrs .
return the result of the function format _ html called with 2 arguments : string &apos; &lt; input { 0 } / &gt; &apos; ,
and result of the function flatatt , called with an argument final _ attrs. define the method value _ from _ datadict with 4 arguments : self , data , files and name .
if name is not contained in data ,
return boolean False .
get the name key of the data dictionary , substitute it for value .
values is an dictionary with 2 arguments : boolean False for &apos; false &apos; and boolean True for &apos; true &apos; .
if value is an instance of six.string _ types class ,
get the value of the values dictionary under the value converted to lowercase key , substitute it for value , if the key doesnt exists ,
substitute value for value. return value converted into a boolean .
derive the class Select from the Widget base class .
allow _ multiple _ selected is boolean False .
define the method _ _ init _ _ with 3 arguments : self , attrs set to None and choices set to an empty tuple .
call the method _ _ init _ _ from the base class of the class Select , with an argument attrs .
convert elements of choices into a list , substitute it for self.choices.
define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
if value is None ,
value is an empty string .
call the method self.build _ attrs with arguments attrs , name as name , substitute the result for final _ attrs .
output is a list containing an element : result of the function format _ html called with 2 arguments : string &apos; &lt; select { 0 } &gt; &apos; ,
and return value of the function flatatt called with an argument final _ attrs , substitute the result for output. call the method self.render _ options with 2 arguments : choices and list with an entry , value , substitute the result for options .
if options is true ,
append options to output .
append string &apos; &lt; / select &gt; &apos; to output .
join elements of output into a string , separated by newline characters , use it as the argument for the call the function mark _ safe ,
return the result. define the method render _ option with 4 arguments : self , selected _ choices , option _ value and option _ label .
if option _ value is None ,
option _ value is an empty string .
call the function force _ text with an argument option _ value , substitute the result for option _ value .
if option _ value is contained in selected _ choices ,
call the function mark _ safe with an argument string &apos; selected = &quot; selected &quot; &apos; , substitute the result for selected _ html .
if self.allow _ multiple _ selected is false ,
call the method selected _ choices.remove with an argument option _ value .
if not ,
selected _ html is an empty string .
call the function format _ html with 4 arguments : string &apos; &lt; option value = &quot; { 0 } &quot; { 1 } &gt; { 2 } &lt; / option &gt; &apos; , option _ value , selected _ html ,
result of the function force _ text with an argument option _ label , return the result. define the method render _ options with 3 arguments : self , choices and selected _ choices .
call the function force _ text with an argument v , for every v in selected _ choices , add results to a set ,
substitute the resulting set for selected _ choices. output is an empty list .
call the function chain with arguments self.choices and choices , for every option _ value and option _ label in the result ,
if option _ label is an instance of list or tuple ,
call the function format _ html with 2 arguments : string &apos; &lt; optgroup label = &quot; { 0 } &quot; &gt; &apos; and return value of the function force _ text ,
called with an argument option _ value , append the result to output. for every option in option _ label ,
call the method self.render _ option with 2 arguments : selected _ choices and unpacked list option , append the result to output .
append string &apos; &lt; / optgroup &gt; &apos; to output .
if not ,
call the method self.render _ option with 3 arguments : selected _ choices , option _ value and option _ label , append the result to output .
join elements of output in a string , separated by newlines , return it .
derive the class NullBooleanSelect from the Select base class .
define the method _ _ init _ _ with 2 arguments : self and attrs set to None .
choices is a tuple with 3 elements : tuple with 2 elements : string &apos; 1&apos; and return value of the function ugettext _ lazy ,
called with an argument string &apos; Unknown &apos; , tuple with 2 elements : string &apos; 2&apos; and return value of the function ugettext _ lazy , called with an argument string &apos; Yes &apos; and tuple with 2 elements : string &apos; 3&apos; and return value of the function ugettext _ lazy , called with an argument string &apos; No &apos; . call the method _ _ init _ _ from the base class of the class NullBooleanSelect , with arguments attrs and choices .
define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
try ,
get the value under value key of a dictionary with 4 entries : &apos; 2&apos; for boolean True , &apos; 3&apos; for boolean False , &apos; 2&apos; for &apos; 2&apos; ,
and &apos; 3&apos; for &apos; 3&apos; , substitute it for value. if KeyError exception is caught ,
value is an string &apos; 1&apos; .
call the method render from the base class of the class NullBooleanSelect , with 4 arguments : name , value , attrs and choices ,
return the result. define the method value _ from _ datadict with 4 arguments : self , data , files and name .
get the value under the name key of the data dictionary , if it exists substitute it for value , if not , value is None .
get the value under the value key of a dictionary with 6 entries : boolean True for &apos; 2&apos; , boolean True for boolean True ,
boolean True for &apos; True &apos; , boolean False for &apos; 3&apos; , boolean False for &apos; False &apos; and boolean False for boolean False , return it if the key exists , if not return None. derive the class SelectMultiple from the Select base class .
allow _ multiple _ selected is boolean True .
define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
if value is None ,
value is an empty list .
call the method self.build _ attrs with 2 arguments : attrs and name set to name , substitute the result for final _ attrs .
output is a list containing an entry : result of the function format _ html called with 2 arguments :
string &apos; &lt; select multiple = &quot; multiple &quot; { 0 } &gt; &apos; and result of the function flatatt called with an argument final _ attrs. call the method self.render _ options with 2 arguments : choices and value , substitute the result for options .
if options is true ,
append options to output .
append string &apos; &lt; / select &gt; &apos; to output .
join elements of output into a string , separated with newline character ,
use it as an argument for the call to the mark _ safe function , return the result. define the method value _ from _ datadict with 4 arguments : self , data , files and name .
if data is an instance of MultiValueDict or MergeDict ,
call the method data.getlist with an argument name , return the result .
get the value under the name key of the data dictionary , if it exists return it , if not return None .
python _ 2 _ unicode _ compatible decorator ,
derive the class ChoiceInput from the SubWidget base class .
input _ type is None .
define the method _ _ init _ _ with 6 arguments : self , name , value , attrs , choice and index .
substitute name for self.name.
substitute value for self.value.
substitute attrs for self.attrs.
call the function force _ text with first element of choice as an argument , substitute the result for self.choice _ value .
call the function force _ text with second element of choice as an argument , substitute the result for self.choice _ label .
substitute index for self.index.
if string &apos; id &apos; is contained in self.attrs ,
convert self.index into a string and append it to &apos; _ &apos; string , substitute it for value under the &apos; id &apos; key of self.attrs dictionary .
define the method _ _ str _ _ with an argument self .
call the method self.render , return the result .
define the method render with 5 arguments : self , name set to None , value set to None , attrs set to None and choices set to an empty tuple .
self.id _ for _ label is true ,
call the function format _ html with 2 arguments : string &apos; for = &quot; { 0 } &quot; &apos; and self.id _ for _ label , substitute the result for label _ for .
if not ,
label _ for is an empty string .
call the function format _ html with 4 arguments : string &apos; &lt; label { 0 } &gt; { 1 } { 2 } &lt; / label &gt; &apos; , label _ for , result of the method self.tag ,
and self.choice _ label , return the result. define the method is _ checked with an argument self .
if self.value equals self.choice _ value , return boolean True , if not , return boolean False .
define the method tag with an argument self .
call the method dict with 4 : self.attrs , type as self.input _ type , name as self.name , value as self.choice _ value ,
substitute the result for final _ attrs. call the method self.is _ checked , if it evaluates to true ,
substitute string &apos; checked &apos; for value under the &apos; checked &apos; key of final _ attrs dictionary .
call the function format _ html with 2 arguments : string &apos; &lt; input { 0 } / &gt; &apos; and result of the function flatatt ,
called with an argument final _ attrs , return the result. property decorator ,
define the method id _ for _ label with an argument self .
get the value under the &apos; id &apos; key of the self.attrs dictionary , return it , if the key doesnt exists return an empty string .
derive the class RadioChoiceInput from the ChoiceInput base class .
input _ type is a string &apos; radio &apos; .
define the method _ _ init _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
call the method _ _ init _ _ from the base class of the class RadioChoiceInput , with 2 arguments : unpacked list args ,
and unpacked dictionary kwargs. call the function force _ text with an argument self.value , substitute the result for self.value.
derive the class CheckboxChoiceInput from the ChoiceInput base class .
input _ type is a string &apos; checkbox &apos; .
define the method _ _ init _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
call the method _ _ init _ _ from the base class of the class CheckboxChoiceInput , with 2 arguments : unpacked list args ,
and unpacked dictionary kwargs. for every v in self.value call the function force _ text with an argument v , add the result to a set ,
substitute set of the results for self.value. define the method is _ checked with an argument self .
if self.choice _ value is contained in self.value return boolean True , otherwise return boolean False .
python _ 2 _ unicode _ compatible decorator ,
derive the class ChoiceFieldRenderer from the object base class .
choice _ input _ class is None .
outer _ html is a string &apos; &lt; ul { id _ attr } &gt; { content } &lt; / ul &gt; &apos; .
inner _ html is a string &apos; &lt; li &gt; { choice _ value } { sub _ widgets } &lt; / li &gt; &apos; .
define the method _ _ init _ _ with 5 arguments : self , name , value , attrs and choices .
substitute name for self.name.
substitute value for self.value.
substitute attrs for self.attrs.
substitute choices for self.choices.
define the method _ _ getitem _ _ with 2 arguments : self and idx .
substitute idx-th element of self.choices for choice .
call the method self.choice _ input _ class with 5 arguments : self.name , self.value , result of the method self.attrs.copy ,
choice and idx , return the result. define the method _ _ str _ _ with an argument self .
call the method self.render , return the result .
define the method render with an argument self .
get the value under the &apos; id &apos; key of the self.attrs dictionary , substitute it for id _ if the key exists , if not id _ is None .
output is an empty list .
for every i and choice in enumerated iterable self.choices ,
substitute choice for choice _ value and choice _ label , respectively .
if choice _ label is an instance of tuple or list ,
call the method self.attrs.copy , substitute the result for attrs _ plus .
if id _ is true ,
prepend string &apos; _ &apos; to i converted to an string , append the result to the value under the &apos; id &apos; key of the attrs _ plus .
sub _ ul _ renderer is an instance of ChoiceFieldRenderer class , created with 4 arguments : name as self.name , value as self.value ,
attrs as attrs _ plus and choices as choice _ label. substitute self.choice _ input _ class for sub _ ul _ renderer.choice _ input _ class .
call the function format _ html with 3 arguments : self.inner _ html , choice _ value set to choice _ value ,
and sub _ widgets set to return value of the function sub _ ul _ renderer.render , append the result to output. if not ,
call the method self.choice _ input _ class with 5 arguments : self.name , self.value , return value of the method self.attrs.copy ,
choice and i , substitute the result for w. call the function format _ html with 3 arguments : self.inner _ html , choice _ value set to result of the function force _ text ,
called with an argument w , and sub _ widgets as an empty string , append the result to output. call the function format _ html with 3 arguments : self.outer _ html ,
if id _ is true id _ attr set to return value of the function format _ html , if not id _ attr set to an empty string , content set to result of the function mark _ safe with an argument : string created by joining elements of outputs , with &apos; \ n &apos; separator , return the result. derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class .
substitute RadioChoiceInput for choice _ input _ class .
derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class .
substitute CheckboxChoiceInput for choice _ input _ class .
derive the class RendererMixin from the object base class .
renderer is None .
_ empty _ value is None .
define the method _ _ init _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
remove entry under &apos; render &apos; key of the kwargs dictionary and substitute it for renderer , if the key doesnt exists , renderer is None .
if renderer is true ,
substitute renderer for self.renderer.
call the method _ _ init _ _ from the base class of the class RendererMixin , with 2 arguments : unpacked list args ,
and unpacked dictionary kwargs. define the method subwidgets with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
call the method self.get _ renderer with 4 arguments : name , value , attrs and choices , for every widget in result ,
yield widget .
define the method get _ renderer with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
if value is None ,
substitute self . _ empty _ value for value .
call the method self.build _ attrs with an argument attrs , substitute the result for final _ attrs .
call the function chain with 2 arguments : self.choices and choices , convert the result into a list and substitute it for choices .
call the method self.renderer with 4 arguments : name , value , final _ attrs and choices , return the result .
define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
call the method self.get _ renderer with 4 arguments : name , value , attrs and choices , call the render method on the result , return the result .
define the method id _ for _ label with 2 arguments : self and id _ .
if id _ is true ,
append string &apos; _ 0 &apos; to id _ .
return id _ .
derive the class RadioSelect from the RendererMixin and Select base classes .
substitute RadioFieldRenderer for renderer .
_ empty _ value is an empty string .
derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes .
substitute CheckboxFieldRenderer for renderer .
_ empty _ value is an empty list .
derive the class MultiWidget from the Widget base class .
define the method _ _ init _ _ with 3 arguments : self , widgets and attrs set to None .
for every w in widgets , call the function w and append the result to a list , if w is an instance of type class ,
if not append w to the list , substitute the resulting list for self.widgets. call the method _ _ init _ _ from the base class of the class MultiWidget , with an argument attrs .
property decorator ,
define the method is _ hidden with an argument self .
for every w in self.widgets , if all elements w.is _ hidden are true , return boolean True , otherwise return boolean False .
define the method render with 4 arguments : self , name , value and attrs set to None .
if self.is _ localized is true ,
for every bwidget in self.widgets ,
substitute self.is _ localized for widget.is _ localized .
if value is not an instance of list type ,
call the method self.decompress with an argument value , substitute the result for value .
output is an empty list .
call the method self.build _ attrs with an argument attrs , substitute the result for final _ attrs .
get the value under the &apos; id &apos; key of the final _ attrs dictionary , substitute it for id _ , if it doesnt exists , id _ is None .
for every i and widget in enumerated iterable self.widgets ,
try ,
substitute i-th element of value for widget _ value .
if IndexError exception is caught ,
widget _ value is None .
if id _ is true ,
call the dict function with 2 arguments : final _ attrs and id set to string &apos; % s _ % s &apos; , where &apos; % s &apos; is replaced with id _ and i ,
substitute the result for final _ attrs. call the method widget.render with 3 arguments : string created by concatenation from : name , string &apos; _ &apos; and i , widget _ value ,
and final _ attrs , append the result to output. call the method self.format _ output with an argument output , use the result as an argument for the call to the function mark _ safe ,
return the result. define the method id _ for _ label with 2 arguments : self and id _ .
if id _ is true ,
append string &apos; _ 0 &apos; to id _ .
return id _ .
define the method value _ from _ datadict with 2 arguments : self , data , files and name .
for every i and widget in enumerated iterable self.widgets , call the function widget.value _ from _ datadict with 3 arguments : data ,
files and string created with concatenation of : name , string &apos; _ &apos; and i converted into a string , return the results in a list. define the method format _ output with 2 arguments : self and rendered _ widgets .
join rendered _ widgets into a string , return it .
define the method decompress with 2 arguments : self and value .
raise NotImplementedError exception with an argument string &apos; Subclasses must implement this method . &apos; .
define the method _ get _ media with an argument self .
media is an instance of Media class .
for every w in self.widgets ,
sum media and w.media , substitute the result for media .
return media .
media is a property object of the current class , with _ get _ media as getter function .
define the method _ _ deepcopy _ _ with 2 arguments : self and memo .
call the method _ _ deepcopy _ _ from the base class of the class MultiWidget , with an argument memo , substitute the result for obj .
call the method copy.deepcopy with an argument self.widgets , substitute the result for obj.widgets.
return obj .
property decorator ,
define the method needs _ multipart _ form with an argument self .
if any w.needs _ multipart _ form for every w in self.widgets is true , return boolean True , if not return boolean False .
derive the class SplitDateTimeWidget from the MultiWidget base class .
supports _ microseconds is boolean False .
define the method _ _ init _ _ with 4 arguments : self , attrs set to None , date _ format set to None and time _ format set to None .
widgets is a tuple with 2 elements : instance of DateInput class , created with 2 arguments : attrs as attrs and format as date _ format ,
and instance of TimeInput class , created with 2 arguments : attrs set to attrs and format set to date _ format. call the method _ _ init _ _ from the base class of the class SplitDateTimeWidget , with 2 arguments : widgets and attrs .
define the method decompress with 2 arguments : self and value .
if value is true ,
call the function to _ current _ timezone with an argument , substitute the result for value .
return a list containing 2 elements : return value of the value.date method and return value of the replace method ,
called with the argument microseconds set to integer 0 , on the result of the method value.time. return list containing 2 elements : None and None .
derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class .
define the method render with 4 arguments : self , attrs set to None , date _ format set to None and time _ format set to None .
call the method _ _ init _ _ from the base class of the class SplitHiddenDateTimeWidget , with 3 arguments : attrs , date _ format , and time _ format .
for every widget in self.widgets : ,
widget.input _ type is a string &apos; hidden &apos; .
from django.http.cookie import SimpleCookie and parse _ cookie into default name space .
from django.http.request import HttpRequest , QueryDict , RawPostDataException , UnreadablePostError and build _ request _ repr into default name space .
from django.http.response import HttpResponse , StreamingHttpResponse , HttpResponseRedirect , HttpResponsePermanentRedirect ,
HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden , HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone , HttpResponseServerError , Http404 , BadHeaderError , JsonResponse into default name space. from django.http.utils import fix _ location _ header and conditional _ content _ removal into default name space .
_ _ all _ _ is a list of strings , &apos; SimpleCookie &apos; , &apos; parse _ cookie &apos; , &apos; HttpRequest &apos; , &apos; QueryDict &apos; , &apos; RawPostDataException &apos; ,
from _ _ future _ _ import unicode _ literals into default name space .
from django.utils.encoding import force _ st into default name space .
from django.utils import six into default name space .
from django.utils.six.moves import http _ cookies into default name space .
call the function http _ cookies.SimpleCookie , on the return value call the value _ encode method , with the argument character &apos; ; &apos; ,
if the tuple result equals to tuple containing character &apos; ; &apos; and string &apos; &quot; \ \ 073 &quot; &apos; , respectively , assign _ cookie _ encodes _ correctly the boolean True value , otherwise assign it False. assign return value of the call to the http _ cookies.SimpleCookie function to _ tc .
try ,
call the _ tc.load method with the &apos; foo : bar = 1 &apos; converted to string as an argument .
_ cookie _ allows _ colon _ in _ names is a boolean True .
if http _ cookies.CookieError exception is caught ,
_ cookie _ allows _ colon _ in _ names is boolean False .
if _ cookie _ encodes _ correctly and _ cookie _ allows _ colon _ in _ names are boolean True ,
substitute http _ cookies.SimpleCookie for SimpleCookie .
if not ,
substitute http _ cookies.Morsel for Morsel .
derive class SimpleCookie from the base class http _ cookies.SimpleCookie.
if _ cookie _ encodes _ correctly is boolean False ,
define method value _ encode with self class instance and val as arguments .
from the base class of the class SimpleCookie call the value _ encode method with val as the argument , store the result in the val and encoded , respectively .
in encoded , replace all the occurrences of unicode character &quot; \ \ 054 &quot; with &apos; , &apos; character and &quot; \ \ 073 &quot; with &apos; ; &apos; characters .
if encoded contains string &quot; \ \ &quot; and if encoded doesnt start with the double quote symbol ,
put the double qoutes around encoded .
return val and encoded as a tuple .
if _ cookie _ allows _ colon _ in _ names is False ,
define the method load with self class instance and rawdata as arguments .
self.bad _ cookies is an empty set .
if six.PY2 is true and rawdata is an instance of the type six.text _ type .
call the function force _ str with raw data as an argument and substitute it for rawdata .
from the base class of the SimpleCookie class call the method load with rawdata as argument .
for every key is self.bad _ cookies ,
delete self entry under the key key .
define protected method _ BaseCookie _ _ set with self class instance , key , real _ value and coded _ value as arguments .
evaluate the function force _ str with key as the argument , substitute it for key .
try ,
get the value under the key of the dictionary self , if key does not exists return evaluated result of the function Morsel , substitute it for M.
call the M.set method with the key , real _ value , coded _ value as the arguments .
call the private dict . _ _ setitem _ _ method with self class instance , key and M as arguments .
if http _ cookies.CookieError exception is raised .
if self does not have &apos; bad _ cookies &apos; attribute ,
self.bad _ cookies is an empty set .
add key to the self.bad _ cookies set .
call the private dict . _ _ setitem _ _ method with self class instance , key and result of the function http _ cookies.Morsel ( ) as arguments .
define the function parse _ cookie with cookie as the argument .
if cookie is an empty string ,
return an empty dictionary .
if cookie is not an instance of http _ cookies.BaseCookie ,
try ,
c is an instance of the class SimpleCookie .
call the load method on the c class instance , with the cookie argument .
if http _ cookies.CookieError exception is raised ,
return an empty dictionary .
if not ,
substitute cookie for c .
cookiedict is an empty dictionary .
for every key in return value of the method c.keys call ,
get the value filed from the return value of the call to the c.key with the argument key , add the value to the cookiedict under the key key .
return cookiedict .
from _ _ future _ _ import unicode _ literals into default name space .
import module base64 .
import module binascii .
import module cgi .
import module sys .
from django.conf import settings into default name space .
from django.core.exceptions import SuspiciousMultipartF into default name space .
from django.utils.datastructures import MultiValueDict into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils import six into default name space .
from django.utils.text import unescape _ entities into default name space .
from django.core.files.uploadhandler import StopUpload , SkipFile and StopFutureHandlers into default name space .
_ _ all _ _ is an tuple with 3 elements : strings &apos; MultiPartParser &apos; , &apos; MultiPartParserError &apos; and &apos; InputStreamExhausted &apos; .
derive the class MultiPartParserError from the Exception base class .
do nothing .
derive the class InputStreamExhausted from the Exception base class .
do nothing .
RAW is a string &quot; raw &quot; .
FILE is a file &quot; .
FIELD is a field &quot; .
if six.PY2 is true , _ BASE64 _ DECODE _ ERROR is TypeError , if not , _ BASE64 _ DECODE _ ERROR is binascii.Error.
derive the class MultiPartParser from the object base class .
define the method _ _ init _ _ wiht 5 arguments : self , META , input _ data , upload _ handlers and encoding set to None .
get the value from META dictionary , under the &apos; HTTP _ CONTENT _ TYPE &apos; key , if the key doesnt exist ,
return the value under the &apos; CONTENT _ TYPE &apos; of the META dictionary , if it doesnt exist return an empty string , substitute the result for content _ type. if content _ type doesnt start with string &apos; multipart / &apos; ,
raise an MultiPartParserError with an argument string &apos; Invalid Content-Type : % s &apos; , where &apos; % s &apos; is replaced with content _ type .
call the method boundary with an argument string &apos; ascii &apos; , use the result to call to the parse _ header function ,
assign the result to ctypes and opts. get the value under the &apos; boundary &apos; key of the opts dictionary , substitute it for boundary .
if boundary is false or return value of the method cgi.valid _ boundary called with an argument boundary evaluates to false ,
raise an MultiPartParserError with an argument string &apos; Invalid boundary in multipart : % s &apos; is replaced with boundary .
try ,
convert value under the &apos; HTTP _ CONTENT _ LENGTH &apos; key of the META dictionary to an integer of base of value under the &apos; CONTENT _ LENGTH &apos; key of META dictionary , if the key doesnt exists use 0 as the base , substitute the result for content _ length .
if ValueError or TypeError are caught ,
content _ length is integer 0 .
if content _ length is lesser than integer 0 ,
raise an MultiPartParserError with an argument string &quot; Invalid content length : % r &quot; , where &apos; % r &apos; is replaced with content _ length .
if boundary is an instance of six.text _ type class ,
call the method boundary.encode with an argument string &apos; ascii &apos; , substitute the result for boundary .
substitute boundary for self . _ boundary .
substitute input _ data for self . _ input _ data .
for every x in upload _ handlers if x.chunk _ size is true , append x.chunk _ size to a list , substitute the result for possible _ sizes .
bring integer 2 to the power of 31 , subtract the result by 4 , put the result into a list , append possible _ sizes to it ,
substitute minimal element of the resulting list for self . _ chunk _ size. substitute META for self . _ meta .
if encoding is true , substitute it for self . _ encoding , if not substitute settings.DEFAULT _ CHARSET for self . _ encoding .
substitute content _ length for self . _ content _ length .
substitute _ upload _ handlers for self . _ _ upload _ handlers .
define the method parse with an argument self .
from django.http import QueryDict into default namespace .
substitute self . _ encoding for encoding .
substitute self . _ upload _ handlers for handlers .
if self . _ content _ length equals integer 0 ,
instantiate QueryDict class with 2 arguments : an empty string and encoding set to self . _ encoding , instantiate a class MultiValueDict , return them .
for every handler in handlers ,
call the method handler.handle _ raw _ input with 5 arguments : self . _ input _ data , self . _ meta , self . _ content _ length , self . _ boundary ,
and encoding , substitute the result for result. if result is not None ,
return first and second element of result .
self . _ post is an instance of QueryDict class , created with an empty string and mutable set to boolean True .
self . _ files is an instance of MultiValueDict class .
instantiate class ChunkIter with 2 arguments : self . _ input _ data and self . _ chunk _ size , use it to instantiate LazyStream class ,
assign the handle to stream. old _ field _ name is None .
counters is a list containing length of handlers number of zeros .
try ,
call the Parser object with stream and self . _ boundary , for every item _ type , meta _ data and field _ stream in return value ,
if old _ field _ name is true ,
call the method self.handle _ file _ complete with arguments old _ field _ name , counters .
old _ field _ name is None .
try ,
get the value under the &apos; content-disposition &apos; key of the meta _ data dictionary , substitute second element of it for disposition .
get the value under the &apos; name &apos; key of the disposition dictionary , strip it of whitespaces , substitute the result for field _ name .
if KeyError , IndexError and AttributeError exception is caught ,
skip this loop iteration ,
get the value under the &apos; content-transfer-encoding &apos; key of the disposition meta _ data , substitute it for transfer _ encoding .
if transfer _ encoding is not None ,
strip of the whitespaces first element of transfer _ encoding , substitute the result for transfer _ encoding .
call the function force _ text with 3 arguments : field _ name , encoding and errors as a string &apos; replace &apos; , substitute the result for field _ name .
if item _ type equals FIELD ,
if transfer _ encoding equals a string &apos; base64 &apos; ,
call the method field _ stream.read , substitute the result for raw _ data .
try ,
call the function base64.b64decode with an argument raw _ data , substitute the result for data .
if _ BASE64 _ DECODE _ ERROR exception is caught ,
substitute raw _ data for data .
if not ,
call the method field _ stream.read , substitute the result for data .
call the method self . _ post.appendlist with 2 arguments : field _ name and result of the function force _ text called with 3 arguments :
data , encoding and errors as a string &apos; replace &apos; . otherwise if item _ type equals FILE ,
get the value under the &apos; filename &apos; key of the disposition dictionary , substitute it for file _ name .
if file _ name is false ,
skip this loop execution .
call the function force _ text with 3 arguments : file _ name , encoding and errors set to string &apos; replace &apos; ,
substitute the result for file _ name. call the function unescape _ entities with an argument file _ name , use the result as an argument for the call to the self.IE _ sanitize ,
method , substitute the result for file _ name. get the value under the &apos; content-type &apos; of the meta _ data dictionary , if it exists assign it to content _ type , content _ type _ extra ,
if not , content _ type is an empty string and content _ type _ extra is an empty dictionary. strip the content _ type of the whitespaces , substitute it for content _ type .
get the value under the &apos; charset &apos; key of the content _ type _ extra dictionary , substitute it for charset .
try ,
convert to an integer first element of the value under the &apos; content-length &apos; key of the meta _ data dictionary , substitute it for content _ length .
if IndexError , TypeError or ValueError exception is caught ,
content _ length is None .
counters is a list containing length of handlers number of zeros .
try ,
for every handler in handlers ,
try ,
call the method handler.new _ file with 6 arguments : field _ name , file _ name , content _ type , content _ length , charset and content _ type _ extra .
if StopFutureHandlers exception is caught .
break the loop execution .
for every chunk in field _ stream ,
if transfer _ encoding equals string &apos; base64 &apos; ,
calculate length of chunk modulo integer 4 , substitute the result for over _ bytes .
if over _ bytes is true ,
call the method field _ stream.read with an argument : over _ bytes subtracted from integer 4 , substitute the result for over _ chunk .
increment chunk by over _ chunk .
try ,
call the method base64.b64decode with an argument chunk , substitute the result for chunk .
if Exception , renamed to e , exception is caught ,
msg is a string &quot; Could not decode base64 data : % r &quot; , where &apos; % r &apos; is replace with e .
call the method six.reraise with 3 arguments : MultiPartParserError , MultiPartParserError created with msg ,
and third element of the result of the function sys.exc _ info. for every i and handler in enumerated iterable handlers ,
substitute length of chunk for chunk _ length .
call the method handler.receive _ data _ chunk with 2 arguments : chunk and i-th element of counters , substitute the result for chunk .
increment i-th element of counters by chunk _ length .
if chunk is None ,
break the loop execution .
if SkipFile exception is caught ,
call the method self . _ close _ files .
call the function exhaust with an argument field _ stream .
if not ,
substitute field _ name for old _ field _ name .
if not ,
call the function exhaust with an argument stream .
if StopUpload , renamed to e , exception is caught ,
call the method self . _ close _ files .
if e.connection _ reset is false ,
call the function exhaust with an argument self . _ input _ data .
if not ,
call the function exhaust with an argument self . _ input _ data .
for every handler in handlers ,
call the method handler.upload _ complete , substitute the result for retval .
if retval is true ,
break the loop execution .
return self . _ post and self . _ files .
define the method handle _ file _ complete with 3 arguments : self , old _ field _ name and counters .
for every i and handler in enumerated iterator self . _ upload _ handlers ,
call the method handler.file _ complete with i-th element of counters as an argument , substitute the result for file _ obj .
if file _ obj is true ,
call the function force _ text with 3 arguments : old _ field _ name , self . _ encoding and errors as a string &apos; replace &apos; ,
use the result and file _ obj as arguments for the call to the method self . _ files.appendlist. break the loop execution .
define the method IE _ sanitize with arguments self and filename .
call the method filename.rfind with an argument string &quot; \ \ &quot; , increment the result by one ,
slice the filename from the previous result as start index to the end , strip it of white spaces from both ends , if the result is not an empty string and filename is not an empty string , return boolean True , otherwise return boolean False. define the method _ close _ files with an argument self .
for every handler in self . _ upload _ handlers ,
if handler has an attribute &apos; file &apos; ,
call the method handler.file.close.
derive the class LazyStream from the six.Iterator base class .
define the method _ _ init _ _ with 3 arguments : self , producer and length set to None .
substitute producer for self . _ producer .
self . _ empty is boolean False .
self . _ leftover is an empty string .
substitute length for self . _ length .
self.position is an integer 0 .
substitute length for self . _ remaining .
self . _ unget _ history is an empty list .
define the method tell with an argument self .
return self.position.
define the method read with arguments self and size set to None .
define the function parts .
if size is None substitute self . _ remaining for remaining , if not , substitute size for remaining .
if remaining is None ,
join self into a bytes string , yield the result as the return value of the generator .
return nothing .
while remaining is not equal to integer 0 ,
if remaining is not greater than 0 , assert an error with the message string &apos; remaining bytes to read should never go negative &apos; .
get the next element of iterable self , substitute it for chunk .
create list of first remaining elements of chunk , substitute it for emitting .
call the method self.unget with list containing first remaining elements of chunk as an argument .
decrement remaining by length of emitting .
yield emitting as result of the generator .
join result of the parts function into a bytes string , substitute it for out .
return out .
define the method _ _ next _ _ with an argument self .
if self . _ leftover is true ,
substitute self . _ leftover for output .
self . _ leftover is an empty string .
if not ,
get the next element of the self . _ producer iterable , substitute it for output .
self . _ unget _ history is an empty list .
increment self.position by length of output .
return output .
define the method close with an argument self .
self . _ producer is an empty list .
define the method _ iter with an argument self .
return self .
define the method unget with arguments self and bytes .
if bytes is false ,
return nothing .
call the method self . _ update _ unget _ history with length of bytes as an argument .
decrement self.position by length of bytes .
join bytes and self . _ leftover into a bytes string , substitute it for self . _ leftover .
define the method _ update _ unget _ history with arguments self and num _ bytes .
append first 49 elements of self . _ unget _ history to list containing num _ bytes , substitute the result for self . _ unget _ history .
append current _ number to a list for current _ number in self . _ unget _ history , if current _ number is equal to num _ bytes ,
substitute the length of the resulting list for number _ equal. if number _ equal is greater than integer 40 ,
raise SuspiciousMultipartForm exception with an argument string , &quot; The multipart parser got stuck , which shouldn &apos;t happen with &quot;
&quot; normal uploaded files . Check for malicious upload activity ; if there is none , report this to the Django developers . &quot; . derive the class ChunkIter from the six.Iterator base class .
define the method _ _ init _ _ with arguments self , flo and chunk _ size set to integer 64 multiplied by integer 1024 .
substitute flo for self.flo.
substitute chunk _ size for self.chunk _ size .
define the method _ _ next _ _ with an argument self .
try ,
call the method self.flo.read with an argument self.chunk _ size , substitute the result for data .
if InputStreamExhausted exception is caught ,
raise an StopIteration exception .
if data is true ,
return data .
if not ,
raise an StopIteration exception .
define the method _ _ iter _ _ with an argument self .
return self .
derive the class InterBoundaryIter from the six.Iterator base class .
define the method _ _ init _ _ with arguments self , stream and boundary .
substitute stream for self . _ stream .
substitute boundary for self.boundary.
define the method _ _ iter _ _ with an argument self .
return self .
define the method _ _ next _ _ with an argument self .
try ,
instantiate class BoundaryIter with 2 arguments : self . _ stream and self . _ boundary , use it to instantiate LazyStream class , return it .
if InputStreamExhausted exception is caught ,
raise an StopIteration .
derive the class BoundaryIter from the six.Iterator base class .
define the method _ _ init _ _ with arguments self , stream and boundary .
substitute stream for self . _ stream .
substitute boundary for self . _ boundary .
self . _ done is boolean False .
increment length of boundary by integer 6 , substitute the result for self . _ rollback .
call the method self . _ stream.read with an argument integer 1 , substitute the result for unused _ char .
if unused _ char is false ,
raise an InputStreamExhausted exception ,
call the method self . _ stream.unget with an argument unused _ char .
define the method _ _ iter _ _ with an argument self .
return self .
define the method _ _ next _ _ with an argument self .
if self . _ done is true ,
raise an StopIteration exception ,
substitute self . _ stream for stream .
substitute self . _ rollback for rollback .
bytes _ read is integer 0 .
chunks is an empty list .
for every bytes in stream ,
increment bytes _ read by length of bytes .
append bytes to chunks .
if bytes _ read is greater than rollback ,
break the loop execution .
if bytes is false ,
break the loop execution .
if not ,
self . _ done is boolean True .
if chunks is false ,
raise an StopIteration exception .
join chunks into bytes string , substitute it for chunk .
call the method self . _ find _ boundary with 2 arguments : chunk and boolean if length of chunks is lesser than self . _ rollback ,
or boolean False if not , substitute the result for boundary. if boundary is true ,
substitute elements of tuple boundary to end and next , respectively .
call the method stream.unget with elements of list chunk from the index next to the end .
self . _ done is boolean True .
return first end elements of list chunk .
if not ,
slice chunk list to get the last rollback elements , if the new list is not empty ,
self . _ done is boolean True .
return chunk .
if not ,
call the method stream.unget with last rollback elements of chunk as an argument .
return last rollback elements of chunk .
define the method _ find _ boundary with an arguments self , data and eof set to boolean False .
call the method data.find with an argument self . _ boundary , substitute the result for index .
if index is lesser than integer 0 ,
return None .
if not ,
substitute index for end .
sum index and length of self . _ boundary , substitute the result for next .
substitute greater element between integer 0 and end decremented by one for last .
element of data at the index last equals to newline bytes character .
decrement end by one .
substitute greater element between integer 0 and end decremented by one for last .
element of data at the index last equals to carriage return bytes character .
decrement end by one .
return end ans next .
define the function exhaust with an argument stream _ or _ iterable .
iterator is None .
try ,
iterator is iterator created out of stream _ or _ iterable .
if TypeError exception is caught ,
iterator is an instance of ChunkIter class , created with arguments : stream _ or _ iterable and integer 16384 .
if iterator is None ,
raise an MultiPartParserError with an argument string &apos; multipartparser.exhaust ( ) was passed a non-iterable or stream parameter &apos; .
for every _ _ in iterator ,
do nothing .
define the function parse _ boundary _ stream with arguments stream and max _ header _ size .
call the method stream.read with an argument max _ header _ size , substitute the result for chunk .
call the method chunk.find with an argument bytes string &apos; \ r \ n \ r \ n &apos; , substitute the result for header _ end .
define the method _ parse _ header with an argument line .
call the function parse _ header with an argument line , substitute the result for main _ value _ pair and params , respectively .
try ,
split into two parts string main _ value _ pair at character &apos; : &apos; , substitute the parts for name and value , respectively .
if ValueError exception is caught ,
raise an ValueError with an argument string &quot; Invalid header : % r &quot; , where &apos; % s &apos; is replaced with line .
return name and tuple containing 2 elements value and params .
if header _ end equals integer negative 1 ,
call the method stream.unget with an argument chunk .
return tuple containing 3 elements : RAW , an empty dictionary and stream .
substitute first header _ end elements of chunk list for header .
call the method stream.unget with list containing elements of chunk list from the header _ end incremented by integer 4 as a start index to the end as argument .
substitute RAW for TYPE .
outdict is an empty dictionary .
split header string at string &apos; \ r \ n &apos; , for every line in result ,
try ,
call the method _ parse _ header with an argument line , assign the result to name and tuple with 2 elements : value and params , respectively .
if ValueError exception is caught ,
skip this loop iteration .
if name equals a string &apos; content-disposition &apos; ,
substitute FIELD for TYPE ,
get the value under the &apos; filename &apos; key of the params dictionary , if it is true ,
substitute FILE for TYPE .
assign value and params to the value under the name key of the outdict dictionary .
if TYPE equals to RAW ,
call the method stream.unget with an argument chunk .
return a tuple with 3 elements : TYPE , outdict and stream .
derive the class Parser from the base class object .
define the method _ _ init _ _ with arguments self , stream and boundary .
substitute stream for self . _ stream .
append boundary to bytes string &apos; -- &apos; , substitute the result for self . _ separator .
define the method _ _ iter _ _ with an argument self .
boundarystream is an instance of InterBoundaryIter class , created with self . _ stream and self . _ separator as arguments .
for every sub _ stream in boundarystream ,
call the function parse _ boundary _ stream with 2 arguments : sub _ stream and integer 1024 , yield the result as the return value of the generator .
define the function parse _ header with an argument line .
append line to bytes string &apos; ; &apos; , use it as an argument for the call to the function _ parse _ header _ params , substitute the result for plist .
pop the first element from plist , convert it to lowercase , call the method decode on it , with string &apos; ascii &apos; as an argument ,
substitute the result for key. pdict is an empty dictionary .
for every p in plist ,
call the method p.find with bytes string &apos; = &apos; as an argument , substitute the result for i .
if i is greater or equal to integer 0 ,
take the first i elements of string p , strip the whitespaces from the both sides , convert it to lowercase and apply on it the method ,
decode with an argument string &apos; ascii &apos; , substitute the result for name. take elements of p from index i incremented by 1 to the end , strip the result of the whitespaces , substitute it for value .
if length of value is greater or equal to integer 2 and first and last elements of value are an empty string ,
strip value of the first and last element .
replace all the occurrences of &apos; \ \ \ \ &apos; in string value with &apos; \ \ &apos; and all occurrences of &apos; \ \ &quot; &apos; for &apos; &quot; &apos; , substitute the result for value .
substitute value for the vale under the name key of the pdict dictionary .
return key and pdict .
define the function _ parse _ header _ params with an argument s .
plist is an empty list .
while first element of s is equal to bytes string &apos; ; &apos; ,
substitute s without the first element for s .
call the method s.find with an argument bytes string &apos; ; &apos; , substitute the result for end .
while end is greater than integer 0 and return value of the s.count called with 3 arguments : an empty string , integer 0 and end ,
is an even number , call the method s.find with 2 arguments : bytes string &apos; ; &apos; and end incremented by one , substitute the result for end .
if end is lesser than integer 0 ,
substitute length of s for end .
substitute first end elements of s for f .
strip f of whitespaces and append it to plist .
substitute elements of s from the end index to end for s .
return plist .
from _ _ future _ _ import unicode _ literals into default name space .
import module copy .
import module os .
import module re .
import module sys .
from io import BytesIO into default name space .
from itertools import chain into default name space .
from pprint import pformat into default name space .
from django.conf import settings into default name space .
from django.core import signing into default name space .
from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space .
from django.core.files import uploadhandler into default name space .
from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space .
from django.utils import six into default name space .
from django.utils.datastructures import MultiValueDict and ImmutableList into default name space .
from django.utils.encoding import force _ bytes , force _ text , force _ str and iri _ to _ uri into default name space .
from django.utils.six.moves.urllib.parse import parse _ qsl , urlencode , quote , urljoin and urlsplit into default name space .
RAISE _ ERROR is an instance of object class .
compile the regex &quot; ^ https ? : / / &quot; with an argument re.I , substitute it for absolute _ http _ url _ re .
compile the regex &quot; ^ ( &#91; a-z0-9.- &#93; + &#124; \ &#91; &#91; a-f0-9 &#93; * : &#91; a-f0-9 : &#93; + \ &#93; ) ( : \ d + ) ? $ &quot; , substitute it for host _ validation _ re .
derive the class UnreadablePostError from the base class IOError .
do nothing .
derive the class RawPostDataException from the base class Exception .
do nothing .
derive the class HttpRequest from the object base class .
_ encoding is None .
_ upload _ handlers is an empty list .
define the method _ _ init _ _ with an argument self .
self.GET is an instance of QueryDict class created with an argument mutable set to boolean True .
self.POST is an instance of QueryDict class created with an argument mutable set to boolean True .
self.COOKIES is an empty dictionary .
self.META is an empty dictionary .
self.FILES is an instance of MultiValueDict class .
self.path is an empty string .
self.path _ info is an empty string .
self.method is None .
self.resolver _ match is None .
self . _ post _ parse _ error is boolen False .
define the method _ _ repr _ _ with an argument self .
call the method build _ request _ repr with an argument self , return the result .
define the method get _ host with an argument self .
if settings.USE _ X _ FORWARDED _ HOST is true and &apos; HTTP _ X _ FORWARDED _ HOST &apos; is contained in self.META.
get the value under the &apos; HTTP _ X _ FORWARDED _ HOST &apos; key of the self.META dictionary , substitute the result for host .
if &apos; HTTP _ HOST &apos; is contained in self.META ,
substitute the value under the &apos; HTTP _ HOST &apos; key of the self.META dictionary , substitute it for host .
if not ,
substitute the value under the &apos; SERVER _ NAME &apos; key of the self.META dictionary , substitute it for host .
convert the value under the &apos; SERVER _ NAME &apos; key of the self.META dictionary to a string , substitute result for server _ port .
if return value of the self.is _ secure method is true and server _ port is not equal to string &apos; 443 &apos; ,
if return value of the self.is _ secure is false and server port is not equal to string &apos; 80 &apos; , join host and server _ port into a string , separated with &apos; : &apos; , substitute the result for host .
if settings.DEBUG is true ,
return host .
call the function split _ domain _ port with an argument host , assign the result to domain and port , respectively .
if domain is true and return value of the function validate _ host called with 2 arguments : domain and settings.ALLOWED _ HOSTS , evaluates to true ,
return host .
if not ,
msg is a string &quot; Invalid HTTP _ HOST header : % r . &quot; , replace &apos; % r &apos; with host .
if domain is true ,
append string &quot; You may need to add % r to ALLOWED _ HOSTS . &quot; to msg , where &apos; % s &apos; is replaced with domain .
if not ,
append string &quot; The domain name provided is not valid according to RFC 1034 / 1035 . &quot; to msg .
raise an DisallowedHost exception with an argument msg .
define the method get _ full _ path with an argument self .
if the value under the &apos; QUERY _ STRING &apos; key of the self.META dictionary is true , call the function iri _ to _ uri ,
called with value under the &apos; QUERY _ STRING &apos; key of the self.META dictionary and append it to string &apos; ? &apos; , append the result th the self.path converted into a string and return it , if the value under the &apos; QUERY _ STRING &apos; key of the self.META dictionary is false , return self.path converted into a string. def the method get _ signed _ cookie with 5 arguments : self , key , default set to RAISE _ ERROR , salt as an empty string ,
try ,
substitute value under the key key of the self.COOKIES dictionary , substitute it for cookie _ value .
if KeyError exception is caught ,
if default is true and RAISE _ ERROR is false ,
return default .
if not ,
raise an exception .
try ,
call the method signing.get _ cookie _ signer with an argument salt set to sum of key and salt , call the method unsign on the result ,
with arguments cookie _ value and max _ age set to max _ age. if signing.BadSignature exception is caught ,
if default is true and RAISE _ ERROR is false ,
return default .
if not ,
raise an exception .
return value .
define the method build _ absolute _ uri with an arguments self and location set to None .
if location is None ,
call the method self.get _ full _ path , append the result to string &apos; / / &apos; , substitute it for location .
call the function urlsplit with an argument location , substitute the result for bits .
do not perform the following only if bits.scheme and bits.netloc are both true ,
format the string &apos; { scheme } : / / { host } { path } &apos; by replacing scheme with self.scheme , host with return value of the self.get _ host method ,
and path with self.path , substitute the result for current _ uri. call the function urljoin with arguments current _ uri and location , substitute the result for location .
call the function iri _ to _ uri with an argument location , return the result .
define the method _ get _ scheme with an argument self .
return string &apos; https &apos; if value under the &quot; HTTPS &quot; key of the os.environ dictionary equals string &apos; on &apos; , if not return &apos; http &apos; .
property decorator .
define the method scheme with an argument self .
if settings.SECURE _ PROXY _ SSL _ HEADER is true ,
try ,
assign the settings.SECURE _ PROXY _ SSL _ HEADER to header and value , respectively .
if ValueError exception is caught ,
raise an ImproperlyConfigured exception with an argument string &apos; The SECURE _ PROXY _ SSL _ HEADER setting must be a tuple containing two values . &apos; .
if value under the header key of the self.META dictionary is equal to value ,
return string &apos; https &apos; .
call the method self . _ get _ scheme , return the result .
define the method is _ secure with an argument self .
if self.scheme equals to string &apos; https &apos; , return boolean True , otherwise return boolean False .
define the method is _ ajax with an argument self .
get the value under the &apos; HTTP _ X _ REQUESTED _ WITH &apos; key of the self.META dictionary , if it equals string &apos; XMLHttpRequest &apos; ,
return boolean True , otherwise return boolean False. property decorator .
define the method encoding with an argument self .
return self . _ encoding .
encoding.setter decorator ,
define the method encoding with arguments self and val .
substitute val for self . _ encoding .
if self has an &apos; _ get &apos; attribute ,
delete self . _ get .
if self has an &apos; _ post &apos; attribute ,
del self . _ post
define the method _ initialize _ handlers with an argument self .
for every handler in settings.FILE _ UPLOAD _ HANDLERS ,
add to a list result of the method uploadhandler.load _ handler called with arguments handler and self , substitute resulting list for self . _ upload _ handlers. property decorator ,
define the method upload _ handlers with an argument self .
if self . _ upload _ handlers is false ,
call the method self . _ initialize _ handlers ,
return self . _ upload _ handlers .
upload _ handlers.setter decorator .
define the method upload _ handlers with arguments : self and upload _ handlers .
if self has an &apos; _ files &apos; attribute .
raise an AttributeError exception with an argument string &quot; You cannot set the upload handlers after the upload has been processed . &quot; .
substitute upload _ handlers for self . _ upload _ handlers .
define the method parse _ file _ upload with 3 arguments : self , META and post _ data .
self.upload _ handlers is an instance of ImmutableList , created with 2 arguments : self.upload _ handlers ,
and warning as a string &quot; You cannot alter upload handlers after the upload has been processed . &quot; . parser is an instance of MultiPartParser class , created with 4 arguments : META , post _ data , self.upload _ handlers and self.encoding.
call the method parser.parse , return the result .
property decorator ,
define the method body with an argument self .
if self doesnt have an &apos; _ body &apos; attribute ,
if self . _ read _ started is true ,
raise an RawPostDataException exception with an argument string &quot; You cannot access body after reading from request &apos;s data stream &quot; .
try ,
call the method self.read , substitute the result or self . _ body .
if IOError , renamed to e , exception is caught ,
call the function six.reraise with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args ,
third element of the result of the function sys.exc _ info. self . _ stream is an instance of BytesIO class created with an argument self . _ body .
return self . _ body .
define the method _ mark _ post _ parse _ error with an argument self .
self . _ post is an instance of QueryDict class created with an empty string as argument .
self . _ files is an instance of MultiValueDict class .
self . _ post _ parse _ error is boolean True .
define the method _ load _ post _ and _ files with an argument self .
if self.method is not equal to string &apos; POST &apos; ,
self . _ post is an instance of QueryDict created with arguments : an empty string and encoding set to self . _ encoding ,
self . _ files is an instance of class MultiValueDict. return nothing .
if self . _ read _ started is true and self doesnt have an &apos; _ body &apos; attribute .
call the method self . _ mark _ post _ parse _ error .
return nothing .
get the value under the &apos; CONTENT _ TYPE &apos; key of the self.META dictionary , if it starts with a string &apos; multipart / form-data &apos; ,
if self has an attribute &apos; _ body &apos; ,
data is an instance of BytesIO class , created with an argument : self . _ body .
if not ,
substitute self for data .
try ,
call the method self.parse _ file _ upload with arguments self.META and data , assign the result to self . _ post and self . _ files .
if MultiPartParserError exception is caught ,
call the method self . _ mark _ post _ parse _ error .
raise an exception .
otherwise if value under the &apos; CONTENT _ TYPE &apos; key of hte self.META dictionary starts with &apos; application / x-www-form-urlencoded &apos; ,
self . _ post is an instance of QueryDict created with arguments : self.body and encoding set to self . _ encoding ,
self . _ files is an instance of class MultiValueDict. if not ,
self . _ post is an instance of QueryDict created with arguments : an empty string and encoding set to self . _ encoding ,
self . _ files is an instance of class MultiValueDict. define the method close with an argument self .
if self has an attribute &apos; _ files &apos; ,
for every f in return value of the return value of the method chain.from _ iterable called with argument :
second element of l for every l in return value of the self . _ files.lists call the method f.close.
define the method read with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
self . _ read _ started is True .
try ,
call the method self . _ stream.read with 2 arguments : unpacked list args and unpacked dictionary kwargs .
if IOError , renamed to e , exception is caught ,
call the function six.reraise with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args ,
third element of the result of the function sys.exc _ info. define the method readline with 3 arguments : self , unpacked list args and unpacked list kwargs .
self . _ read _ started is boolean True .
try ,
call the method self . _ stream.readline with 2 arguments : unpacked list args , unpacked dictionary kwargs .
if IOError , substituted to e , exception is caught ,
call the function six.reraise with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args ,
third element of the result of the function sys.exc _ info. define the method _ _ init _ _ with an argument self .
endless loop ,
read one line from self file stream , substitute the result for buf .
if buf is false ,
break the loop execution .
yield buf as return value of the generator .
substitute xreadlines for _ _ iter _ _ .
define the method _ _ init _ _ with an argument self .
append to a list elements of the iterator self , return the resulting list .
derive the class QueryDict from the base class MultiValueDict .
_ mutable is boolean True .
_ encoding is None .
define the method _ _ init _ _ with 4 arguments : self , query _ string is None , mutable is boolean False and encoding set to None .
call the _ _ init _ _ method of the base class of the QueryDict class .
if encoding is false .
substitute settings.DEFAULT _ CHARSET for encoding .
substitute encoding for self.encoding.
if six.PY3 is true ,
if query _ string is an instance of bytes ,
call the method query _ string.decode , substitute the result for query _ string .
for every key and value in return value of the parse _ qsl with 3 arguments : query _ string is it exists or an empty string if not ,
keep _ blank _ values set to boolean True , encoding set to encoding. call the method appendlist with 2 arguments : key and value .
if not ,
for every key and value in parse _ gsl with query _ string is it exists or an empty string if not and keep _ blank _ values set to boolean True .
call the method self.appendlist with 2 arguments : return value of the function force _ text with 3 arguments :
key , encoding and errors set to string &apos; replace &apos; , and return value of the function force _ text with 3 arguments : value , encoding and errors set to string &apos; replace &apos; . call the method mutable substitute for self . _ mutable .
property decorator ,
define the method encoding with an argument self .
if self . _ encoding is None ,
substitute settings.DEFAULT _ CHARSET for self . _ encoding .
return self . _ encoding .
encoding.setter decorator ,
define the method encoding with arguments self and value .
substitute value for self . _ encoding .
define the method _ assert _ mutable with an argument self .
if not self . _ mutable ,
raise an AttributeError with an argument string &quot; This QueryDict instance is immutable &quot; .
define the method _ _ setitem _ _ with 3 arguments : self , key and value .
call the method self . _ assert _ mutable .
call the method bytes _ to _ text with 2 arguments : key and self.encoding , substitute the result for key .
call the method bytes _ to _ text with 2 arguments : key and self.encoding , substitute the result for value .
call the method _ _ setitem _ _ from the base class of the QueryDict class , with arguments key and value .
define the method _ _ delitem _ _ with 3 arguments : self and key .
call the method self . _ assert _ mutable .
call the method _ _ delitem _ _ from the base class of the QueryDict class , with an argument key .
define the method _ _ copy _ _ with an argument self .
call the method self . _ _ class _ _ with 3 arguments : an empty string , mutable is boolean True , encoding is self.encoding , substitute the result for result .
for key and value in return value of the six.iterlists function called with an argument self ,
call the method result.setlist with the arguments : key and value .
return result .
define the method _ _ deepcopy _ _ with 3 arguments : self and memo .
call the method self . _ _ class _ _ with 3 arguments : an empty string , mutable is boolean True , encoding is self.encoding , substitute the result for result .
get the identity of the self object , use it as a key to get the value of the memo dictionary , substitute result for it .
for key and value in result of the function six.iterlists called with an argument ,
call the method result.setlist with 2 arguments : return value of the function copy.deepcopy called with 2 arguments : key and memo ,
and return value of the function copy.deepcopy called with 2 arguments : value and memo. return result .
define the method setlist with 3 arguments : self , key and list _ .
call the method self . _ assert _ mutable .
call the method bytes _ to _ text with an arguments key and self.encoding , substitute the result for key .
for every elt in list _ call the method bytes _ to _ text with 2 argument : elt and self.encoding , append the result into a list ,
substitute the resulting list for list _ . call the method setlist from the base class of the QueryDict class , with arguments key and list _ .
define the method setlistdefault with 3 arguments : self , key and default _ list set to None .
call the method self . _ assert _ mutable .
call the method setlistdefault from the base class of the class QueryDict , with arguments key and default _ list , return the result .
define the method appendlist with 3 arguments : self , key and value .
call the method self . _ assert _ mutable .
call the method bytes _ to _ text with 2 arguments : key and self.encoding , substitute the result for key .
call the method bytes _ to _ text with 2 arguments : value and self.encoding , substitute the result for value .
call the method appendlist from the base class of the QueryDict class , with arguments key and value .
define the method pop with 3 arguments : self , key and unpacked list args .
call the method self . _ assert _ mutable .
call the method pop from the base class of the class QueryDict , with arguments key and unpacked list args , return the result .
define the method popitem with an argument self .
call the method self . _ assert _ mutable .
call the method popitem from the base class of the class QueryDict , return the result .
define the method clear with an argument self .
call the method self . _ assert _ mutable .
call the method clear from the base class of the class QueryDict , return the result .
define the method setdefault with 3 arguments : self , key and default set to None .
call the method self . _ assert _ mutable .
call the method bytes _ to _ text with 2 arguments : key and self.encoding , substitute the result for key .
call the method bytes _ to _ text with 2 arguments : default and self.encoding , substitute the result for default .
call the method setlistdefault from the base class of the class QueryDict , with arguments key and default _ list , return the result .
define the method copy with an argument self .
call the method self . _ _ deepcopy _ _ with an empty dictionary as an argument .
define the method urlencode with 3 arguments : self and safe set to None .
output is an empty list .
if safe is true ,
call the function force _ bytes with 2 arguments : safe and self.encoding , substitute it for safe .
encode is an lambda function with arguments k and v , return value is string &apos; % s = % s &apos; , where &apos; % s &apos; is replaced with :
return value of the function quote called with arguments k and safe , and with return value of the function quote called with arguments v and safe. if not ,
encode is an lambda function with 2 arguments k and v , return value is the result of the function urlencode , called with an argument :
dictionary containing element v for k. for every k and list _ in return value of the method self.lists ,
call the function force _ bytes with arguments k and self.encoding , substitute the result for k .
for every v in list _ append to a list result of the function encode , called with arguments : k and result of the function force _ bytes ,
called with arguments v and self.encoding , extend the output with the result. join elements of the output into a string , separated with &apos; &amp; &apos; , return the result .
define the function build _ request _ repr with arguments : request , path _ override set to None , GET _ override set to None ,
try ,
get is a tuple containing elements generated by the call to the function pformat with an argument GET _ override ,
if GET _ override is not None , or otherwise generated with the call to the function pformat with an argument request.GET. if Exception exception is caught ,
get is a string &apos; &lt; could not parse &gt; &apos; .
if request . _ post _ parse _ error is true ,
post is a string &apos; &lt; could not parse &gt; &apos; .
if not ,
try ,
get is a tuple containing elements generated by the call to the function pformat with an argument POST _ override ,
if POST _ override is not None , or otherwise generated with the call to the function pformat with an argument request.POST. if Exception exception is caught ,
post is a string &apos; &lt; could not parse &gt; &apos; .
try ,
get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES _ override ,
if COOKIES _ override is not None , or otherwise generated with the call to the function pformat with an argument request.COOKIES. if Exception exception is caught ,
cookies is a string &apos; &lt; could not parse &gt; &apos; .
try ,
get is a tuple containing elements generated by the call to the function pformat with an argument META _ override ,
if META _ override is not None , or otherwise generated with the call to the function pformat with an argument request.META. if Exception exception is caught ,
meta is a string &apos; &lt; could not parse &gt; &apos; .
substitute path _ override for path if path _ override is not None , otherwise substitute request.path for path
call the function force _ str with an argument string &apos; &lt; % s \ npath : % s , \ nGET : % s , \ nPOST : % s , \ nCOOKIES : % s , \ nMETA : % s &gt; &apos; ,
where &apos; % s &apos; is replaced with request . _ _ class _ _ . _ _ name _ _ , path , return value of the function six.text _ type called with an argument get , return value of the function six.text _ type called with an argument post , return value of the function six.text _ type , called with an argument cookies and return value of the function six.text _ type called with an argument meta. define the function bytes _ to _ text with 2 arguments s and encoding .
if s is an instance of bytes class ,
call the method six.text _ type with 3 arguments : s , encoding and string &apos; replace &apos; .
if not ,
return s .
define the function split _ domain _ port with an argument host .
convert host to lowercase .
call the method host _ validation _ re.match with an argument host .
return an empty string and an empty string .
if last element of host equals character &apos; &#93; &apos; ,
return host and an empty string .
split host from the right side into 2 parts at the &apos; : &apos; , substitute the result for bits .
if length of bits equals integer 2 ,
add bits to a tuple , return it .
return the first element of bits and an empty string .
define the method validate _ host with 2 arguments : host and allowed _ hosts .
if host ends with &apos; .&apos; , remove the last element from host .
for every pattern in allowed _ hosts :
convert pattern to lowercase , substitute it for pattern .
if pattern equals &apos; * &apos; or pattern starts with &apos; .&apos; or pattern equals host , and only if :
host ends with &apos; .&apos; and host ends with pattern or host is equal to all but first elements of pattern , substitute boolean true for match , otherwise substitute boolean False for match. if match is true ,
return boolean True .
return boolean False .
from _ _ future _ _ import unicode _ literals into default name space .
import module datetime .
import module json .
import module sys .
import module time .
from email.header import Header into default name space .
from django.conf import settings into default name space .
from django.core import signals into default name space .
from django.core import signing into default name space .
from django.core.exceptions import DisallowedRedirect into default name space .
from django.core.serializers.json import DjangoJSONEncode into default name space .
from django.http.cookie import SimpleCookie into default name space .
from django.utils import six and timezone into default name space .
from django.utils.encoding import force _ bytes , force _ text and iri _ to _ uri into default name space .
from django.utils.http import cookie _ date into default name space .
from django.utils.six.moves import map into default name space .
from django.utils.six.moves.urllib.parse import urlparse into default name space .
REASON _ PHRASES is a dictionary containing 59 initial entries : &apos; CONTINUE &apos; for 100 , &apos; SWITCHING PROTOCOLS &apos; for 101 ,
&apos;PROCESSING &apos; for 102 , &apos; OK &apos; for 200 , &apos; CREATED &apos; for 201 , &apos; ACCEPTED &apos; for 202 , &apos; NON-AUTHORITATIVE INFORMATION &apos; for 203 , &apos; NO CONTENT &apos; for 204 , &apos; RESET CONTENT &apos; for 205 , &apos; PARTIAL CONTENT &apos; for 206 , &apos; MULTI-STATUS &apos; for 207 , &apos; ALREADY REPORTED &apos; for 208 , &apos; IM USED &apos; for 226 , &apos; MULTIPLE CHOICES &apos; for 300 , &apos; MOVED PERMANENTLY &apos; for 301 , &apos; FOUND &apos; for 302 , &apos; SEE OTHER &apos; for 303 , &apos; NOT MODIFIED &apos; for 304 , &apos; USE PROXY &apos; for 305 , &apos; RESERVED &apos; for 306 , &apos; TEMPORARY REDIRECT &apos; for 307 , &apos; PERMANENT REDIRECT &apos; for 308 , &apos; BAD REQUEST &apos; for 400 , &apos; UNAUTHORIZED &apos; for 401 , &apos; PAYMENT REQUIRED &apos; for 402 , &apos; FORBIDDEN &apos; for 403 , &apos; NOT FOUND &apos; for 404 , &apos; METHOD NOT ALLOWED &apos; for 405 , &apos; NOT ACCEPTABLE &apos; for 406 , &apos; PROXY AUTHENTICATION REQUIRED &apos; for 407 , &apos; REQUEST TIMEOUT &apos; for 408 , &apos; CONFLICT &apos; for 409 , &apos; GONE &apos; for 410 , &apos; LENGTH REQUIRED &apos; for 411 , &apos; PRECONDITION FAILED &apos; for 412 , &apos; REQUEST ENTITY TOO LARGE &apos; for 413 , &apos; REQUEST-URI TOO LONG &apos; for 414 , &apos; UNSUPPORTED MEDIA TYPE &apos; for 415 , &apos; REQUESTED RANGE NOT SATISFIABLE &apos; for 416 , &apos; EXPECTATION FAILED &apos; for 417 , &apos; I &apos;M A TEAPOT &apos; for 418 , &apos; UNPROCESSABLE ENTITY &apos; for 422 , &apos; LOCKED &apos; for 423 , &apos; FAILED DEPENDENCY &apos; for 424 , &apos; UPGRADE REQUIRED &apos; for 426 , &apos; PRECONDITION REQUIRED &apos; for 428 , &apos; TOO MANY REQUESTS &apos; for 429 , &apos; REQUEST HEADER FIELDS TOO LARGE &apos; for 431 , &apos; INTERNAL SERVER ERROR &apos; for 500 , &apos; NOT IMPLEMENTED &apos; for 501 , &apos; BAD GATEWAY &apos; for 502 , &apos; SERVICE UNAVAILABLE &apos; for 503 , &apos; GATEWAY TIMEOUT &apos; for 504 , &apos; HTTP VERSION NOT SUPPORTED &apos; for 505 , &apos; VARIANT ALSO NEGOTIATES &apos; for 506 , &apos; INSUFFICIENT STORAGE &apos; for 507 , &apos; LOOP DETECTED &apos; for 508 , &apos; NOT EXTENDED &apos; for 510 and &apos; NETWORK AUTHENTICATION REQUIRED &apos; for 511. derive the class BadHeaderError from the ValueError base class .
do nothing .
derive the class HttpResponseBase from the six.Iterator base class .
status _ code is an integer 200 .
reason _ phrase is None .
define the method _ _ init _ _ with 4 arguments : self , content _ type set to None , status set to None , reason set to None .
self . _ headers is an empty dictionary .
substitute settings.DEFAULT _ CHARSET for self . _ charset .
self . _ closable _ objects is an empty list .
self . _ handler _ class is None .
if content _ type is false ,
replace &apos; % s &apos; in string &quot; % s ; charset = % s &quot; with settings.DEFAULT _ CONTENT _ TYPE and self . _ charset , substitute it for content _ type .
self.cookies is an instance of a class SimpleCookie .
if status is not None .
substitute status for self.status _ code .
if reason is not None ,
substitute reason for self.reason _ phrase .
otherwise if self.reason _ phrase is None ,
get the value under the self.status _ code key of the REASON _ PHRASES dictionary , if it exists substitute it for the self.reason _ phrase ,
if not , self.reason _ phrase is a string &apos; UNKNOWN STATUS CODE &apos; . substitute content _ type for value under the &apos; Content-Type &apos; key of the self dictionary .
define the method serialize _ headers with an argument self .
define the function to _ bytes with arguments val and encoding .
if val is an instance of bytes , return val , otherwise return result of the method val.encode called with an argument encoding .
for every key and value in return value of the self . _ headers.values method , call the function to _ bytes with 2 arguments : key ,
and string &apos; ascii &apos; and call the function to _ bytes with 2 arguments : value and string &apos; latin-1 &apos; , join the previous 2 results into a string , separated by &apos; : &apos; , append it to a list , substitute the resulting list for headers. join headers into a string , separated by string &apos; \ r \ n &apos; .
if six.PY3 is true ,
substitute serialize _ headers for _ _ bytes _ _ .
if not ,
substitute serialize _ headers for _ _ str _ _ .
define the method _ convert _ to _ charset with 4 arguments : self , value , charset and mime _ encode set to boolean False .
if value is not an instance of bytes or six.text _ type classes ,
convert value to an string and substitute it for value .
try ,
if six.PY3 is true ,
if value is an instance of str type ,
call the method value.encode with an argument charset .
if not ,
call the method value.decode with an argument charset , substitute the result for value .
if not ,
if value is an instance of str type ,
call the method value.decode with an argument charset .
if not ,
call the method value.encode with an argument charset , substitute the result for value .
if UnicodeError , renamed to e , exception is caught ,
if mime _ encode is true ,
instantiate class Header with 3 arguments : value , string &apos; utf-8 &apos; , maxlinelen set to sys.maxsize , call the encode method on it ,
convert the result into a string and substitute it for value. if not ,
replace &apos; % s &apos; in string &apos; , HTTP response headers must be in % s format &apos; for charset , append it to e.reason.
raise an exception .
convert &apos; \ n &apos; to a string , if it is contained in value or &apos; \ r &apos; converted to an string is contained in value ,
raise an BadHeaderError exception with an argument string &quot; Header values can &apos;t contain newlines ( got % r ) &quot; , where &apos; % r &apos; is replaced with value .
return value .
define the method _ _ setitem _ _ with 3 arguments : self , header and value .
call the method self . _ convert _ to _ charset with arguments : header and string &apos; ascii &apos; , substitute the result for header .
call the method self . _ convert _ to _ charset with arguments : header , string &apos; latin-1 &apos; and mime _ encode set to boolean True ,
substitute the result for value. substitute tuple containing 2 elements : header and value for the value under the header converted to lowercase key of the self . _ headers dictionary .
define the method _ _ delitem _ _ with 2 arguments : self and header .
try ,
delete the value under the header converted to lowercase key of the self . _ headers dictionary .
if KeyError exception is caught ,
do nothing .
define the method _ _ getitem _ _ with 2 arguments : self and header .
convert header to lowercase , use it as the key to get the value from the self . _ headers dictionary , return the second element of the result .
define the method _ _ getstate _ _ with an argument self .
call the method self . _ _ dict _ _ .copy , substitute the result for state .
get the value under the &apos; cookies &apos; key of the state dictionary ,
convert it to a string and substitute it for value under the &apos; cookies &apos; key of the state dictionary. return state .
define the method _ _ setstate _ _ with 2 arguments : self and state .
add state element to self . _ _ dict _ _ dictionary .
self.cookies is an instance of SimpleCookie class created with self.cookies as an argument .
define the method has _ header with 2 arguments : self and header .
convert deader to lowercase , if it is contained in self . _ headers return boolean True , if not , return boolean False .
substitute has _ header for _ _ contains _ _ .
define the method items with an argument self .
call the method self . _ headers.values , return the result ,
define the method get with 3 arguments : self , header and alternate set to None .
convert header to lowercase , use it to as a key to get the value of the self . _ headers dictionary ,
if it exists return the second element of the result , if not , return alternate. define the method set _ cookie with 9 arguments : self , key , value set to an empty string , max _ age set to None , expires set to None ,
substitute value for self.cookies dictionary value under the key key .
if expires is not None ,
if expires is an instance of datetime.datetime class ,
call the method timezone.is _ aware with an argument expires , if it evaluates to true ,
call the method timezone.make _ naive with arguments : expires , timezone.utc , substitute the result for expires .
call the method expires.utcnow , subtract the result from expires , substitute the result for delta .
call the method datetime.timedelta with an argument seconds set to integer 1 , increment delta by it .
expires is None .
multiply delta.days with an integer 86400 add to the result delta.seconds , if the result is greater than integer 0 ,
substitute it for max _ age , if not , max _ age is integer 0. if not ,
get the value under the key key of the self.cookies dictionary , substitute expires for &apos; expires &apos; key of the returned dictionary .
if max _ age is not None ,
get the value under the key key of the self.cookies dictionary , substitute max-age for &apos; max-age &apos; key of the returned dictionary .
if expires is false ,
get the value under the key key of the self.cookies dictionary , call the cookie _ date function with an argument :
sum of the result of the function time.time and max _ age , substitute it for &apos; expires &apos; key of the previously returned dictionary. if path is not None ,
get the value under the key key of the self.cookies dictionary , substitute path for &apos; path &apos; key of the returned dictionary .
if domain is not None ,
get the value under the key key of the self.cookies dictionary , domain expires for &apos; domain &apos; key of the returned dictionary .
if secure is true ,
get the value under the key key of the self.cookies dictionary , substitute boolean True for &apos; secure &apos; key of the returned dictionary .
if httponly is true ,
get the value under the key key of the self.cookies dictionary , substitute boolean True for &apos; httponly &apos; key of the returned dictionary .
define the method set _ signed _ cookie with 5 arguments : self , key , value , salt as an empty string and unpacked dictionary kwarg .
call the method signing.get _ cookie _ signer with an argument salt set to sum of key and salt ,
call the method sign on the result with an argument value , substitute the result for value. call the method self.set _ cookie with 3 arguments : key , value and unpacked dictionary kwargs , return the result .
define the method delete _ cookie with 4 arguments : self , key , path set to character &apos; / &apos; and domain set to None .
call the method self.set _ cookie with 5 arguments : key , max _ age as integer 0 , path as path , domain as domain ,
expires as a string &apos; Thu , 01-Jan-1970 00 : 00 : 00 GMT &apos; , return the result. define the method make _ bytes with 2 arguments : self and value .
call the method self.has _ header with string &apos; Content-Encoding &apos; as an argument , if it evaluates to true ,
call the function bytes with an argument value , return the result .
if value is an instance of bytes class ,
call the function bytes with an argument value , return the result .
if value is an instance of six.text _ type class ,
call the method value.encode with an argument self . _ charset , use the result as an argument for the call to the bytes function ,
return the result. call the function force _ bytes with arguments value and self . _ charset , return the result .
define the method close with an argument self .
for every closable in self . _ closable _ objects ,
try ,
call the method closable.close.
if Exception exception is caught ,
do nothing .
call the method signals.request _ finished.send with an argument sender set to self . _ handler _ class .
define the method write with 2 arguments : self and value .
raise an Exception exception with an argument string &quot; This % s instance is not writable &quot; ,
where &apos; % s &apos; is replaced with self . _ _ class _ _ . _ _ name _ _ . define the method flush with an argument self .
do nothing .
define the method tell with an argument self .
raise an Exception exception with an argument string &quot; This % s instance cannot tell its position &quot; ,
where &apos; % s &apos; is replaced with self . _ _ class _ _ . _ _ name _ _ . derive the class HttpResponse from the HttpResponseBase base class .
streaming is boolean False .
define the method _ _ init _ _ with 4 arguments : self , content set to an empty list , unpacked list args and unpacked dictionary kwargs .
call the _ _ init _ _ method from the base class of the HttpResponse class , with the arguments : unpacked list args and unpacked dictionary kwargs .
substitute content for self.content.
define the serialize content with an argument self .
call method self.serialize _ headers , append bytes string &apos; \ r \ n \ r \ n &apos; to the result , append self.content to the result , return it .
if six.PY3 is true ,
substitute serialize for _ _ bytes _ _ .
if not ,
substitute serialize for _ _ str _ _ .
property decorator ,
define the method content with an argument self .
join self . _ container elements into a string , return it .
content.setter decorator ,
define the method content with 2 arguments : self and value .
if value has an &apos; _ _ iter _ _ &apos; attribute and value is not an instance of bytes or six.string _ types class .
if value has an &apos; close &apos; attribute ,
append value to the self . _ closable _ objects list .
call the self.make _ bytes method with an argument chunk , for every chunk in value join the result to a bytes string ,
substitute the result for value. if not ,
call the method self.make _ bytes with an argument value , substitute the result for value .
self . _ container is a list containing element value .
define the method _ _ iter _ _ with an argument self .
return self . _ container converted into a iterable .
define the method write with 2 arguments : self and content .
call the method self.make _ bytes with an argument content , append it to self . _ container .
define the method tell with an argument self .
return the length of self.content.
derive the class StreamingHttpResponse from the HttpResponseBase base class .
streaming is boolean True .
define the method _ _ init _ _ with 4 arguments : self , result of the function streaming _ content = ( ) , unpacked list args ,
and unpacked dictionary kwargs. call the _ _ init _ _ method from the base class of the StreamingHttpResponse class , called with arguments : unpacked list args ,
and unpacked dictionary kwargs. substitute streaming _ content for self.streaming _ content .
property decorator ,
define the method content with an argument self .
raise an AttributeError with an argument string &quot; This % s instance has no `content` attribute . &quot; Use `streaming _ content` instead . &quot; ,
where &apos; % s &apos; is replaced with self . _ _ class _ _ . _ _ name _ _ . property decorator ,
define the method serialize _ headers with an argument self .
map elements of self . _ iterator through self.make _ bytes function , return the result .
streaming _ content.setter decorator ,
define the method streaming _ content with 2 arguments : self and value .
convert value into a iterator , substitute the result for self . _ iterator .
if value has an attribute &apos; close &apos; ,
append value to self . _ closable _ objects list .
define the method _ _ iter _ _ with an argument self .
return self.streaming _ content
derive the class HttpResponseRedirectBase from the HttpResponse base class .
allowed _ schemes is an list containing 3 elements : strings &apos; http &apos; , &apos; https &apos; and &apos; ftp &apos; .
define the method _ _ init _ _ with 4 arguments : self , redirect _ to , unpacked list args and unpacked dictionary kwargs .
call the function force _ text with an argument redirect _ to , use the result as an argument for the call to the function urlparse ,
substitute the result for parsed. if parsed.scheme is true and parsed.scheme is not contained in self.allowed _ schemes ,
raise an DisallowedRedirect exception with an argument string &quot; Unsafe redirect to URL with protocol &apos; % s &apos; &quot; ,
where &apos; % s &apos; is replaced with parsed.scheme. call the _ _ init _ _ method from the base class of the HttpResponseRedirectBase class , called with arguments : unpacked list args ,
and unpacked dictionary kwargs. call the function iri _ to _ uri with an argument redirect _ to , substitute the result for the value under the &apos; Location &apos; key of the self dictionary .
url is a property of the class , lambda function is getter attribute with an argument self and return value is the value under the &apos; Location &apos; key of the self dictionary .
derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class .
status _ code is an integer 302 .
derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class .
status _ code is an integer 301 .
derive the class HttpResponseNotModified from the HttpResponse base class .
status _ code is an integer 304 .
define the method _ _ init _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
call the _ _ init _ _ method from the base class of the HttpResponseNotModified class , called with arguments : unpacked list args ,
and unpacked dictionary kwargs. delete the value under the &apos; content-type &apos; key of the self dictionary .
HttpResponse.content.setter property ,
define the method content with self and value .
if value ,
raise an AttributeError exception with an argument string &quot; You cannot set content to a 304 ( Not Modified ) response &quot; .
self . _ container is an list .
derive the class HttpResponseBadRequest from the HttpResponse base class .
status _ code is an integer 400 .
derive the class HttpResponseNotFound from the HttpResponse base class .
status _ code is an integer 404 .
derive the class HttpResponseForbidden from the HttpResponse base class .
status _ code is an integer 403 .
derive the class HttpResponseNotAllowed from the HttpResponse base class .
status _ code is an integer 405 .
define the method _ _ init _ _ with 4 arguments : self , permitted _ methods , unpacked list args and unpacked dictionary kwargs .
call the _ _ init _ _ method from the base class of the HttpResponseNotAllowed class , called with arguments : unpacked list args ,
and unpacked dictionary kwargs. join into a string permitted _ methods , separated by string &apos; , &apos; , substitute it for value under the &apos; Allow &apos; key of the self dictionary .
derive the class HttpResponseGone from the HttpResponse base class .
status _ code is an integer 410 .
derive the class HttpResponseServerError from the HttpResponse base class .
status _ code is an integer 500 .
derive the class Http404 from the Exception base class .
do nothing .
derive the class JsonResponse from the HttpResponse base class .
define the method _ _ init _ _ with 5 arguments : self , data , encoder set to DjangoJSONEncoder , safe set to boolean True ,
and unpacked dictionary kwargs. if safe is true and data is not an instance of dict type .
raise an TypeError exception with an argument string &apos; In order to allow non-dict objects to be serialized set the safe parameter to False &apos; .
if &apos; content _ type &apos; key doesnt exist in kwargs , set its value to &apos; application / json &apos; .
serialize data to JSON format with cls set to encoder , substitute it for data .
call the _ _ init _ _ method from the base class of the JsonResponse class , called with arguments : content set to data ,
define function fix _ location _ header with request and response as arguments .
if &apos; Location &apos; is contained in response and function request.get _ host evaluates to True ,
modify value at the key &apos; Location &apos; of the dictionary response by applying function request.build _ absolute _ uri on it .
return response .
define the function conditional _ content _ removal with request and response as the arguments .
if response.status _ code is lesser than integer 200 and grater or equal than 100 , or response.status _ code equals to integer 204 or 304 ,
if response.streaming is True ,
response.streaming _ content is an empty list .
if not ,
response.content is bytes empty string .
substitute char &apos; 0&apos; for the value under the &apos; Content-Length &apos; key of the response dictionary .
if request.method equals to string &apos; HEAD &apos; ,
if response.streaming is true ,
response.streaming _ content is an empty list .
if not ,
response.content is bytes empty string .
return response .
from django.template.base import ALLOWED _ VARIABLE _ CHARS , BLOCK _ TAG _ END , BLOCK _ TAG _ START , COMMENT _ TAG _ END , COMMENT _ TAG _ START ,
FILTER _ ARGUMENT _ SEPARATOR , FILTER _ SEPARATOR , SINGLE _ BRACE _ END , SINGLE _ BRACE _ START , TOKEN _ BLOCK , TOKEN _ COMMENT , TOKEN _ TEXT , TOKEN _ VAR , TRANSLATOR _ COMMENT _ MARK , UNKNOWN _ SOURCE , VARIABLE _ ATTRIBUTE _ SEPARATOR , VARIABLE _ TAG _ END , VARIABLE _ TAG _ START , filter _ re and tag _ re. from django.template.base import ContextPopException , InvalidTemplateLibrary , TemplateDoesNotExist , TemplateEncodingError ,
TemplateSyntaxError and VariableDoesNotExist. from django.template.base import Context , FilterExpression , Lexer , Node , NodeList , Parser , RequestContext , Origin , StringOrigin ,
Template , TextNode , Token , TokenParser , Variable , VariableNode , constant _ string and filter _ raw _ string. from django.template.base import compile _ string , resolve _ variable , unescape _ string _ literal and generic _ tag _ compiler .
from django.template.base import Library , add _ to _ builtins , builtins , get _ library , get _ templatetags _ modules , get _ text _ list ,
import _ library and libraries . _ _ all _ _ is a tuple containing 4 strings : &apos; Template &apos; , &apos; Context &apos; , &apos; RequestContext &apos; and &apos; compile _ string &apos; .
from _ _ future _ _ import unicode _ literals into default name space .
import module re .
from functools import partial into default name space .
from importlib import import _ module into default name space .
from inspect import getargspec and getcallargs into default name space .
import module warnings .
from django.apps import apps into default name space .
from django.conf import settings into default name space .
from django.template.context import BaseContext , Context , RequestContext and ContextPopException into default namespace .
from django.utils.deprecation import RemovedInDjango20Warning into default name space .
from django.utils.itercompat import is _ iterable into default name space .
from django.utils.text import smart _ split , unescape _ string _ literal and get _ text _ list into default namespace .
from django.utils.encoding import force _ str and force _ text into default name space .
from django.utils.translation import ugettext _ lazy and pgettext _ lazy into default name space .
from django.utils.safestring import SafeData , EscapeData , mark _ safe and mark _ for _ escaping into default namespace .
from django.utils.formats import localize into default name space .
from django.utils.html import escape into default name space .
from django.utils.module _ loading import module _ has _ submodule into default name space .
from django.utils import six into default name space .
from django.utils.timezone import template _ localtime into default name space .
from django.utils.encoding import python _ 2 _ unicode _ compatible into default name space .
TOKEN _ TEXT is integer 0
TOKEN _ VAR is integer 1
TOKEN _ BLOCK is integer 2
TOKEN _ COMMENT is integer 3 .
TOKEN _ MAPPING is a dictionary with 4 initial entries : &apos; Text &apos; for TOKEN _ TEXT , &apos; Var &apos; for TOKEN _ VAR , &apos; Block &apos; for TOKEN _ BLOCK ,
and &apos; Comment &apos; for TOKEN _ COMMENT . FILTER _ SEPARATOR is a string &apos; &#124; &apos; .
FILTER _ ARGUMENT _ SEPARATOR is a string &apos; : &apos; .
VARIABLE _ ATTRIBUTE _ SEPARATOR is a string &apos; .&apos; .
BLOCK _ TAG _ START is a string &apos; { % &apos; .
BLOCK _ TAG _ END is a string &apos; % } &apos; .
VARIABLE _ TAG _ START is a string &apos; { { &apos; .
VARIABLE _ TAG _ END is a string &apos; } } &apos; .
COMMENT _ TAG _ START is a string &apos; { # &apos; .
COMMENT _ TAG _ END is a string &apos; # } &apos; .
TRANSLATOR _ COMMENT _ MARK is a string &apos; Translators &apos; .
SINGLE _ BRACE _ START is a string &apos; { &apos; .
SINGLE _ BRACE _ END is a string &apos; } &apos; .
ALLOWED _ VARIABLE _ CHARS is a string &apos; abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 _ . &apos; .
UNKNOWN _ SOURCE is a string &apos; &lt; unknown source &gt; &apos; .
call the function re.compile with an argument string &apos; ( % s . * ? % s &#124; % s . * ? % s &#124; % s . * ? % s ) &apos; , substitute all occurrences of &apos; % s &apos; with ,
return value of the function re.escape called with an argument BLOCK _ TAG _ START , return value of the function re.escape called with an argument BLOCK _ TAG _ END , return value of the function re.escape called with an argument VARIABLE _ TAG _ START , return value of the function re.escape called with an argument VARIABLE _ TAG _ END , return value of the function re.escape called with an argument COMMENT _ TAG _ START , and return value of the function re.escape called with an argument COMMENT _ TAG _ END , substitute the result for tag _ re. libraries is an empty dictionary .
builtins is an empty list .
invalid _ var _ format _ string is None .
derive the class TemplateSyntaxError form the base class Exception .
do nothing .
derive the class TemplateDoesNotExist form the base class Exception .
do nothing .
derive the class TemplateEncodingError form the base class Exception .
do nothing .
python _ 2 _ unicode _ compatible decorator ,
derive the class VariableDoesNotExist form the base class Exception .
define the method _ _ init _ _ with 3 arguments : self , msg and params set to an empty tuple .
substitute msg for self.msg.
substitute params for self.params.
define the method _ _ str _ _ with an argument self .
return self.msg formatted with a tuple , with elements generated from return value of the function force _ text with 2 arguments :
p and errors set to string &apos; replace &apos; , for p in self.params. derive the class InvalidTemplateLibrary form the base class Exception .
do nothing .
derive the class Origin form the base class object .
define the method _ _ init _ _ with 2 arguments : self and name .
substitute name for self.name.
define the method reload with an argument self .
raise an NotImplementedError exception with an argument string &apos; subclasses of Origin must provide a reload ( ) method &apos; .
define the method with reload with an argument self .
return self.name.
derive the class StringOrigin form the base class Origin .
define the method _ _ init _ _ with 2 arguments : self and source .
call the method _ _ init _ _ with an argument UNKNOWN _ SOURCE , from the base class of the class StringOrigin .
substitute source for self.source.
define the method with reload with an argument self .
return self.source.
derive the class Template form the base class object .
define the method _ _ init _ _ with 4 arguments : self , template _ string , origin set to None and name set to None .
try ,
call the function force _ text with an argument template _ string .
if UnicodeDecodeError exception is caught ,
raise an TemplateEncodingError exception with an argument &quot; Templates can only be constructed from unicode or UTF-8 strings . &quot; .
if settings.TEMPLATE _ DEBUG is true and origin is None ,
origin is an instance of StringOrigin class created with an argument template _ string .
call the function compile _ string with 2 arguments : template _ string and origin , substitute the result for self.nodelist.
substitute name for self.name.
substitute origin for self.origin.
define the method _ _ iter _ _ with an argument self .
for every node in self.nodelist ,
for every subnode in node ,
yield subnode .
define the method _ render with 2 arguments self and context .
call the method self.nodelist.render with an argument context , return the result .
define the method render with 2 arguments self and context .
call the method context.render _ context.push.
try ,
call the method self . _ render with an argument context , return the result ,
finally perform ,
remove the first element from context.render _ context .
define the method compile _ string with 2 arguments : template _ string and origin .
if settings.TEMPLATE _ DEBUG is true ,
from django.template.debug import DebugLexer and DebugParser .
substitute DebugLexer and DebugParser for lexer _ class and parser _ class .
if not ,
substitute Lexer and Parser for lexer _ class and parser _ class .
call the method lexer _ class with an arguments template _ string and origin , substitute the result for lexer .
call the method lexer.tokenize , use it as an argument for the call to the parser _ class function , substitute the result for parser .
call the method parser.parse , return the result .
derive the class Token form the base class object .
define the method _ _ init _ _ with 3 arguments : self , token _ type and contents .
substitute token _ type and contents for self.token _ type and self.contents.
self.lineno is None .
define the method _ _ str _ _ with an argument self .
substitute value under the self.token _ type key of the TOKEN _ MAPPING dictionary for token _ name .
return a string &apos; &lt; % s token : &quot; % s ... &quot; &gt; &apos; with &apos; % s &apos; , replace &apos; % s &apos; with token _ name and 20 self.contents elements with every newline deleted .
define the method split _ contents with an argument self .
split is an empty list .
call the function smart _ split with an argument self.contents , substitute the result converted to an iterable for bits .
for every bit in bits ,
if bit starts with &apos; _ ( &quot; &apos; ot bit starts with &quot; _ ( &apos; &quot; ,
append &apos; ) &apos; to third element of bit , substitute it for sentinal .
trans _ bit is a list with an element bit .
while bit doesnt end with sential ,
call the method next with an argument bits , substitute the result for bit .
append bit to trans _ bit .
join trans _ bit into a string separated with whitespaces , substitute the result for bit .
append bit to split .
return split .
derive the class Lexer form the base class object .
define the method _ _ init _ _ with 3 arguments : self , template _ string and origin .
substitute template _ string for self.template _ string .
substitute origin for self.origin.
self.lineno is integer 1 .
self.verbatim is boolean False .
define the method tokenize with an argument self .
in _ tag is boolean False .
result is an empty list .
split tag _ re by self.template _ string separator , for every bit in result ,
if bit is true ,
call the method self.create _ token with 2 arguments bit and in _ tag , append the result to result .
in _ tag is boolean True if in _ tag is False , otherwise is boolean False .
return result .
define the method create _ token with 3 arguments : self , token _ string and in _ tag .
if in _ tag is true and token _ string starts with BLOCK _ TAG _ START .
take elements of token _ string from second to second last element and strip the whitespaces surrounding the result ,
substitute the result for block _ content. if self.verbatim is true and block _ content equals self.verbatim ,
self.verbatim is boolean False .
if in _ tag and is not contained in self.verbatim ,
if token _ string starts with VARIABLE _ TAG _ START ,
token is an instance of Token class , created with 2 arguments : TOKEN _ VAR ,
and elements of token _ string from second to second last element wiht the whitespaces striped from the both sides. otherwise if token _ string starts with BLOCK _ TAG _ START ,
if first nine elements of block _ content is string &apos; verbatim &apos; or &apos; verbatim &apos; ,
append block _ content to a string &apos; end &apos; , substitute the result for self.verbatim.
token is an instance of Token class , created with 2 arguments : TOKEN _ BLOCK and block _ content .
otherwise if token _ string starts with COMMENT _ TAG _ START ,
content is an empty string .
call the method token _ string.find with an argument TRANSLATOR _ COMMENT _ MARK , if it evaluates to true ,
take elements of token _ string from second to second last element and strip the whitespaces surrounding the result ,
substitute the result for content. token is an instance of Token class , created with 2 arguments : TOKEN _ COMMENT and content .
if not ,
token is an instance of Token class , created with 2 arguments : TOKEN _ TEXT and token _ string .
substitute self.lineno for token.lineno.
call the method token _ string.count with an argument &apos; \ n &apos; , append the result to self.lineno.
return token .
derive the class Parser form the base class object .
define the method _ _ init _ _ with 2 arguments : self and token .
substitute tokens for self.tokens.
self.tags is an empty dictionary .
self.filters is an empty dictionary .
for every lib in builtins ,
call the method self.add _ library with an argument lib .
define the emethod parse with 2 arguments : self and parse _ until set to None .
if parse _ until is None ,
parse _ until is an empty list ,
call the method self.create _ nodelist , substitute the result for nodelist .
while self.tokens is true ,
call the method self.next _ token , substitute the result for token .
if token.token _ type equals integer 0 ,
call the method self.extend _ nodelist with 3 arguments : nodelist , instance of TextNode class , created with an argument token.contents ,
and token. otherwise if token.token _ type equals integer 1 ,
if token.contents is false ,
call the method self.empty _ variable with an argument token ,
try ,
call the method self.compile _ filter with an argument token.contents , substitute the result for filter _ expression .
if TemplateSyntaxError , replaced with e , exception is caught ,
call the method self.compile _ filter _ error with 2 arguments : token and e , if it evaluates to false ,
raise an exception ,
call the method self.create _ variable _ node with an argument filter _ expression , substitute the result for var _ node .
call the method self.extend _ nodelist with 3 arguments : nodelist , var _ node and token .
otherwise if token.token _ type equals integer 2 ,
try ,
split token.contents into separate words , substitute the first element of the result for command .
if IndexError exception is caught ,
call the method self.empty _ block _ tag with an argument token .
if command is contained in parse _ until ,
call the method self.prepend _ token with an argument token ,
return nodelist .
call the method self.enter _ command with 2 arguments command and token .
try ,
substitute the value under the command key of self.tags dictionary for compile _ func .
if KeyError exception is caught ,
call the method self.invalid _ block _ tag with 3 arguments : token , command and parse _ until .
try ,
call the method compile _ func with 2 arguments self and token , substitute the result for compiled _ result .
if TemplateSyntaxError , renamed to e , exception is caught ,
call the method self.compile _ function _ error with 2 arguments token and e , if it evaluates to false ,
raise an exception ,
call the method self.extend _ nodelist with 3 arguments : nodelist , compiled _ result and token .
call the method self.exit _ command .
if parse _ until is true ,
call the method self.unclosed _ block _ tag with an argument parse _ until .
return nodelist .
define the method skip _ past with 2 arguments : self and endtag .
while self.tokens is true ,
call the method self.next _ token , substitute the result for token .
if token.token _ type equals TOKEN _ BLOCK and token.contents equals endtag ,
return nothing .
call the method self.unclosed _ block _ tag with an argument list with an element endtag .
define the method create _ variable _ node with 2 arguments self and filter _ expression .
return an instance of VariableNode class with an argument filter _ expression .
define the method create _ nodelist with an argument self .
return an instance of NodeList class .
define the method extend _ nodelist with 4 arguments : self , nodelist , node and token .
if node.must _ be _ first is true and nodelist is true ,
try ,
if nodelist.contains _ nontext is true ,
raise AttributeError exception ,
if AttributeError exception is raised ,
raise TemplateSyntaxError ( &quot; % r must be the first tag in the template . &quot; , where &apos; % s &apos; is replaced with node .
if nodelist is an instance of NodeList and node is not an instance of TextNode class .
nodelist.contains _ nontext is boolean True .
append node to nodelist .
define the method enter _ command with 3 arguments : self , command and token .
do nothing .
define the method exit _ command with an argument self .
do nothing .
define the method enter _ command with 3 arguments : self , token and msg .
return an instance of TemplateSyntaxError class with an argument msg .
define the method empty _ variable with 2 arguments : self and token .
call the method self.error with 2 arguments : token and string &quot; Empty variable tag &quot; , return the result .
define the method empty _ block _ tag with 2 arguments : self and token .
call the method self.error with 2 arguments : token and string &quot; Empty block tag &quot; , return the result .
define the method invalid _ block _ tag with 4 arguments : self , token , command and parse _ until as None .
if parse _ until is true ,
raise an self.error exception with 2 arguments : token and string &quot; Invalid block tag : &apos; % s &apos; , expected % s &quot; ,
where &apos; % s &apos; is replaced with command and result of the function get _ text _ list called with an argument list , with p converted into a string and surrounded with single quotes for every p in parse _ until. call the method self.error with 2 arguments : token and string &quot; Invalid block tag : &apos; % s &apos; &quot; , where &apos; % s &apos; is replaced with command ,
return the result. define the method unclosed _ block _ tag with 2 arguments : self and parse _ until .
raise an self.error with 2 arguments : None and string &quot; Unclosed tags : % s &quot; ,
where &apos; % s &apos; is replaced with parse _ until elements joined into a string , separated with &apos; , &apos; . define the method compile _ filter _ error with 3 arguments : self , token and e .
do nothing .
define the method compile _ function _ error with 3 arguments : self , token and e .
do nothing .
define the method next _ token with an argument self .
remove first element from self.tokens , return removed element .
define the function prepend _ token with 2 arguments : self and token .
insert token at the beginning of self.tokens.
define the method delete _ first _ token with an argument self .
delete the first element of self.tokens.
define the function add _ library with 2 arguments : self and lib .
update self.tags dictionary with lib.tags.
update self.filters dictionary with lib.filters.
define the function compile _ filter with 2 arguments : self and token .
return an instance of FilterExpression class , created with 2 arguments : token and self .
define the function find _ filter with 2 arguments : self and filter _ name .
if filter _ name is contained in self.filters ,
return the value under the filter _ name key of the self.filters dictionary .
if not ,
raise an TemplateSyntaxError with an argument string &quot; Invalid filter : &apos; % s &apos; &quot; , substitute &apos; % s &apos; with filter _ name .
derive the class TokenParser form the base class object .
define the function next _ space _ index with 2 arguments : self and subject .
substitute subject for self.subject.
self.pointer is integer 0 .
self.backout is an empty list .
call the method self.tag , substitute the result for self.tagname.
define the method top with an argument self .
raise an NotImplementedError with an argument string &apos; subclasses of Tokenparser must provide a top ( ) method &apos; .
define the method more with an argument self .
if self.pointer is smaller than length of self.subject , return boolean True , otherwise return False .
define the method back with an argument self .
if length of self.backout is greater than zero ,
raise an TemplateSyntaxError exception with an argument string &quot; back called without some previous parsing &quot; .
remove the first element from self.backout , substitute the result for self.pointer.
define the method tag with an argument self .
substitute self.subject for subject .
substitute self.pointer for i .
if i is greater than or equal to length of subject .
raise an TemplateSyntaxError exception with an argument string &quot; expected another tag , found end of string : % s &quot; ,
where &apos; % s &apos; is replaced with subject. substitute i for p .
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character ,
increment i by integer 1 .
take subject elements from p-th to i-th index , substitute it for s .
while i is lesser than length of subject and i-th element of subject is an empty space or tab character ,
increment i by integer 1 .
append self.pointer to self.backout.
substitute i for self.pointer.
return s .
define the method value with an argument self .
substitute self.subject for subject .
substitute self.pointer for i .
define the next _ space _ index with 2 arguments : subject and i .
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character ,
if i-th element of subject is &apos; &quot; &apos; character or &quot; &apos; &quot; character ,
substitute i-th element of subject for c .
increment i by integer 1 .
while i is lesser than length of subject and i-th element of subject is not equal to c ,
increment i by one .
if i is greater than , or equal to subject ,
raise an TemplateSyntaxError exception with an argument string &quot; Searching for value . Unexpected end of string in column % d : % s &quot; ,
where &apos; % d &apos; is replaced with i and &apos; % s &apos; is replaced with subject. increment i by one .
return i .
if i is greater than or equal to length of subject ,
raise an TemplateSyntaxError exception with an argument &quot; Searching for value . Expected another value but found end of string : % s &quot; ,
where &apos; % s &apos; is replaced with subject. if i-th element of subject is &apos; &quot; &apos; character or &quot; &apos; &quot; character ,
substitute i for p .
increment i by integer 1 ,
while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject ,
increment i by integer 1 ,
if i is greater than length of subject ,
raise an TemplateSyntaxError exception with an argument string &quot; Searching for value . Unexpected end of string in column % d : % s &quot; ,
where &apos; % d &apos; is replaced with i and &apos; % s &apos; is replaced with subject. increment i by integer 1 ,
call the function next _ space _ index with 2 arguments : subject and i , substitute the result for i .
substitute subject elements from p-th to i-th index for res .
while i is lesser than length of subject and i-th element of subject is an empty space or tab character .
increment i by integer 1 ,
append self.pointer to self.backout.
substitute i for self.pointer.
return res .
if not ,
substitute i for p .
call the function next _ space _ index with 2 arguments subject and i , substitute the result for i .
take subject elements from p-th to i-th index , substitute it for s .
while i is lesser than length of subject and i-th element of subject is an empty space or tab character .
increment i by integer 1 , .
append self.pointer to self.backout.
substitute i for self.pointer.
return s .
constant _ string is a raw string &quot; ( ? : % ( i18n _ open ) s % ( strdq ) s % ( i18n _ close ) s &#124; % ( i18n _ open ) s % ( strsq ) s % ( i18n _ close ) s &#124; % ( strdq ) s &#124; % ( strsq ) s ) &quot; ,
where &apos; strdq &apos; is replaced with &apos; &quot; &#91; ^ &quot; \ \ &#93; * ( ? : \ \ . &#91; ^ &quot; \ \ &#93; * ) * &quot; &apos; , &apos; strsq &apos; is replaced with &quot; &apos; &#91; ^ &apos; \ \ &#93; * ( ? : \ \ . &#91; ^ &apos; \ \ &#93; * ) * &apos; &quot; , &apos; i18n _ open &apos; is replaced with return value of function re.escape called with an argument string &apos; _ ( &apos; , &apos; i18n _ close &apos; is replaced with return value of function re.escape called with an argument string &apos; ) &apos; . remove all occurrences of newline character from constant _ string .
filter _ raw _ string is a raw string &quot; ^ ( ? P &lt; constant &gt; % ( constant ) s ) &#124; ^ ( ? P &lt; var &gt; &#91; % ( var _ chars ) s &#93; + &#124; % ( num ) s ) &#124; ( ? : \ s * % ( filter _ sep ) s \ s *
( ? P &lt; filter _ name &gt; \ w + ) ( ? : % ( arg _ sep ) s ( ? : ( ? P &lt; constant _ arg &gt; % ( constant ) s ) &#124; ( ? P &lt; var _ arg &gt; &#91; % ( var _ chars ) s &#93; + &#124; % ( num ) s ) ) ) ? ) &quot; , where &apos; constant &apos; is replaced with constant _ string , &apos; num &apos; with raw string &apos; &#91; - + \ . &#93; ? \ d &#91; \ d \ .e &#93; * &apos; , &apos; var _ chars &apos; with string &quot; \ w \ . &quot; , &apos; filter _ sep &apos; with result of the function re.escape called with an argument FILTER _ SEPARATOR , anbd &apos; arg _ sep &apos; with result of the function re.escape called with an argument FILTER _ ARGUMENT _ SEPARATOR. call the function re.compile with 2 arguments : filter _ raw _ string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE ,
substitute the result for filter _ re. derive the class FilterExpression form the base class object .
define the function _ _ init _ _ with 3 arguments : self , token and parser .
substitute token for self.token.
call the method filter _ re.finditer with an argument token , substitute the result for matches .
var _ obj is None .
filters is an empty list .
upto is integer 0 .
for every match in matches ,
call the method match.start , substitute the result for start .
if upto is not equal to start .
raise an TemplateSyntaxError exception with an argument string &quot; Could not parse some characters : % s &#124; % s &#124; % s &quot; ,
where &apos; % s &apos; is replaced with first upto elements of token string , token string elements from upto to start index , and token string elements from start index to the end. if var _ obj is None ,
call the method match.group with 2 arguments : strings &quot; var &quot; and &quot; constant &quot; , substitute the result for var and constant , respectively .
if constant is true ,
try ,
instantiate Variable class , with an argument constant , call the resolve method with an empty dictionary as an argument , substitute the result for var _ obj .
if VariableDoesNotExist exception is not caught ,
var _ obj is None .
otherwise if var is None ,
raise an TemplateSyntaxError exception with an argument &quot; Could not find variable at start of % s . &quot; , replace &apos; % s &apos; with token .
if not ,
var _ obj is an instance of Variable class , created with an argument var .
if not ,
call the methof match.group with an argument &quot; filter _ name &quot; , substitute the result for filter _ name .
args is an empty list .
call the method match.group with 2 arguments : strings &quot; constant _ arg &quot; and &quot; var _ arg &quot; , substitute the result for constant _ arg ,
and var _ arg , respectively. if constant _ arg is true ,
take a tuple with 2 elements : boolean False and method resolve called with an empty dictionary on the instance of Variable class ,
created with an argument constant _ arg , append it to args. otherwise if var _ arg is true ,
take a tuple with 2 elements : boolean False and instance of Variable class , created with an argument constant _ arg , append it to args .
call the method parser.find _ filter with an argument filter _ name , substitute the result for filter _ func .
call the method self.args _ check with 3 arguments : filter _ name , filter _ func and args .
append a tuple with 2 arguments : filter _ func and args to filters .
call the method match.end , substitute the result for upto .
if upto is not equal to length of token ,
raise an TemplateSyntaxError exception with an argument string &quot; Could not parse the remainder : &apos; % s &apos; from &apos; % s &apos; &quot; ,
where &apos; % s &apos; is replaced with elemnts of token from upto index till the end , and token. substitute filters for self.filters.
substitute var _ obj for self.var.
define the method resolve with 3 arguments : self , context and ignore _ failures set to boolean False .
if self.var is an instance of Variable class ,
try ,
call the method self.var.resolve with an argument context , substitute it for obj .
if VariableDoesNotExist exception is caught ,
if ignore _ failures is true ,
obj is None ,
if not ,
if settings.TEMPLATE _ STRING _ IF _ INVALID is true ,
use global variable invalid _ var _ format _ string .
if invalid _ var _ format _ string is None ,
if &apos; % s &apos; is contained in settings.TEMPLATE _ STRING _ IF _ INVALID , invalid _ var _ format _ string is boolean True , otherwise it is False .
if invalid _ var _ format _ string is true ,
format settings.TEMPLATE _ STRING _ IF _ INVALID with self.var , return the result .
return settings.TEMPLATE _ STRING _ IF _ INVALID .
if not ,
substitute settings.TEMPLATE _ STRING _ IF _ INVALID with obj .
if not ,
substitute self.var for obj .
for every func and args in self.filters ,
arg _ vals is an empty list ,
for every lookup and arg in args ,
if lookup is false ,
call the function mark _ safe with an argument arg , append it to arg _ vals .
if not ,
call the method arg.resolve with an argument context , append the result to arg _ vals .
if &apos; expects _ localtime &apos; attribute of func object exists and is true ,
call the function template _ localtime with 2 arguments : obj and context.use _ tz , substitute the result for obj .
if &apos; needs _ autoescape &apos; attribute of func object exists and is true ,
call the function func with 3 arguments : obj , autoescape set to context.autoescape and unpacked list arg _ vals ,
substitute the result for new _ obj. if not ,
call the function func with 2 arguments : obj and unpacked list arg _ vals , substitute the result for new _ obj .
if &apos; is _ safe &apos; attribute of func object exists and is true and obj is an instance of SafeData ,
call the function mark _ safe with an argument new _ obj , substitute the result for obj .
otherwise if obj is an instance of EscapeData ,
call the function mark _ for _ escaping with an argument new _ obj , substitute the result for obj .
if not ,
substitute new _ obj for obj .
return obj .
define the method args _ check with 3 arguments : name , func and provided .
convert provided into a list and substitute it for provided .
calculate length of provided and increment it by one , substitute the result for plen .
get the &apos; _ decorated _ function &apos; attribute from func object , if it exists substitute it for func .
call the function getargspec with an argument func , substitute the result for args , varargs , varkw and defaults , respectively .
calculate the length of args , substitute it for alen .
substitute the length of defaults for dlen .
if plen is lesser than difference of alen and dlen , or if plen is greater than alen ,
raise an TemplateSyntaxError exception with an argument string &quot; % s requires % d arguments , % d provided &quot; ,
where &apos; % d &apos; is replaced with name , dlen subtracted from alen , and plen. return boolean True .
args _ check is a static method .
define the method _ _ str _ _ with an argument self .
return self.token.
define the method resolve _ variable with 2 arguments : path and context .
call the function warnings.warn with 3 arguments :
string &quot; resolve _ variable ( ) is deprecated . Use django.template. Variable ( path ) .resolve ( context ) instead &quot; , RemovedInDjango20Warning , and stacklevel set to integer 2. call the method resolve with an argument context , from the instance of Variable class , created with an argument path .
derive the class Variable form the base class object .
define the method _ _ init _ _ with 2 arguments self and var .
substitute var for self.var.
self.literal is None ,
self.lookups is None .
self.translate is boolean False .
self.message _ context is None .
if var is not an instance of six.string _ types ,
raise an TypeError exception with an argument string &quot; Variable must be a string or number , got % s &quot; , replace &apos; % s &apos; with type of var .
try ,
convert var into an floating point number , substitute it for self.literal.
if &apos; .&apos; is not contained in var and &apos; e &apos; is not contained in var converted into lowercase ,
convert self.literal into an integer , substitute it for self.literal.
if var ends with &apos; .&apos; ,
raise an ValueError exception .
if ValueError exception is caught ,
if var starts with &apos; _ ( &apos; and var ends with &apos; ) &apos; ,
self.translate is boolean True .
remove first 2 and last 2 elements from var .
try ,
call the function unescape _ string _ literal with an argument var , use it as an argument for the call to the function mark _ safe ,
substitute the result for self.literal. if ValueError exception is caught ,
call the function var.find with an argument : &apos; _ &apos; appended to VARIABLE _ ATTRIBUTE _ SEPARATOR , if the result is greater than integer -1 ,
or first element of var equals &apos; _ &apos; , raise an TemplateSyntaxError exception with an argument string &quot; Variables and attributes may not begin with underscores : &apos; % s &apos; &quot; ,
where &apos; % s &apos; is replaced with var. call the method var.split with an argument VARIABLE _ ATTRIBUTE _ SEPARATOR , convert the result to a tuple and substitute it for self.lookups.
define the method resolve with 2 arguments : self and context .
if self.lookups is not None ,
call the function self . _ resolve _ lookup with an argument context , substitute the result for value .
if else ,
substitute self.literal for value .
if self.translate is true ,
if self.message _ context is true ,
call the function pgettext _ lazy with an argument self.message _ context and value , return the result .
if not ,
call the function ugettext _ lazy with an argument value , return the result .
return value .
define the method _ _ repr _ _ with an argument self .
return an string &quot; &lt; % s : % r &gt; &quot; , where &apos; % s &apos; is replaced with self . _ _ class _ _ . _ _ name _ _ and self.var , respectively .
define the method _ _ str _ _ with an argument self .
return self.var.
define the method _ resolve _ lookup with 2 arguments : self and context .
substitute context for current .
try ,
for bit in self.lookups ,
try ,
substitute element at the bit index of current for current .
if TypeError , AttributeError , KeyError or ValueError exceptions are caught ,
try ,
if current is an instance of BaseContext and bit attribute of type of current is true ,
raise an AttributeError exception .
get the bit attribute of current object , substitute it for current .
if TypeError and AttributeError exceptions are caught ,
try ,
convert bit to an integer and use it as index to obtain an element for list current , substitute it for current .
if IndexError , ValueError , KeyError or TypeError exceptions are caught ,
raise an VariableDoesNotExist exception with an argument string &quot; Failed lookup for key &#91; % s &#93; in % r &quot; ,
where &apos; % s &apos; is replaced with bit and &apos; % r &apos; is replaced with current. if current is callable object ,
get the &apos; do _ not _ call _ in _ templates &apos; attribute of current object , if it exists and is true ,
do nothing .
otherwise , get the &apos; alters _ data &apos; attribute of current object , if it exists and is true ,
substitute settings.TEMPLATE _ STRING _ IF _ INVALID for current .
if not ,
try ,
call the function current , substitute the result for current .
if TypeError exception is caught ,
try ,
call the function getcallargs with an argument current ,
if TypeError exception is caught ,
substitute settings.TEMPLATE _ STRING _ IF _ INVALID for current ,
if not ,
raise an exception ,
if Exception , renamed to e , exception is caught ,
get the &apos; silent _ variable _ failure &apos; attribute of e object , if it exists and is true ,
substitute settings.TEMPLATE _ STRING _ IF _ INVALID for current .
if not ,
raise an exception .
return current .
derive the class Node form the base class object .
must _ be _ first is boolean False .
child _ nodelists is an tuple with an element &apos; nodelist &apos; .
define the method render with 2 arguments : self and context .
do nothing .
define the method _ _ iter _ _ with an argument self .
yield self .
define the method get _ nodes _ by _ type with 2 arguments : self and nodetype .
nodes is an empty list .
if self is an instance of nodetype ,
append self to nodes .
for every attr in self.child _ nodelists ,
get attr attribute of self object , if it exists substitute it for nodelist , if not nodelist is None .
if nodelist is true ,
call the method nodelist.get _ nodes _ by _ type with an argument nodetype , extend nodes with the result .
return nodes .
derive the class NodeList form the base class list .
contains _ nontext is boolean False .
define the method render with 2 arguments : self and context .
bits is an empty list .
for every node in self ,
if node is an instance of Node ,
call the method self.render _ node with 2 arguments : node and context , substitute the result for bit .
if not ,
substitute node for bit .
call the function force _ text with an argument bit , append the result to bits .
call the function mark _ safe with an argument , elements of bits joined into a string , return the result .
define the method get _ nodes _ by _ type with 2 arguments : self and nodetype .
modes is an empty list .
for every node in self ,
call the method node.get _ nodes _ by _ type with an argument nodetype , extend nodes with it .
return nodes .
define the method render _ node with 3 arguments : self , node and context .
call the method node.render with an argument context , return the result .
derive the class TextNode form the base class Node .
define the method _ _ init _ _ with 2 arguments : self and s .
substitute s for self.s.
define the method _ _ repr _ _ with an argument self .
call the function force _ str with 3 arguments : string &quot; &lt; Text Node : &apos; % s &apos; &gt; &quot; , with &apos; % s &apos; replaced with first 25 elements of self.s string ,
string &apos; ascii &apos; and errors set to a string &apos; replace &apos; , return the result. define the method render with 2 arguments : self and context .
return self.s.
define the function render _ value _ in _ context with 2 arguments : value and context .
call the method template _ localtime with 2 arguments : value and use _ tz = context.use _ tz , substitute the result for value .
call the function localize with 2 arguments : value and use _ l10n = context.use _ l10n , substitute the result for value .
call the function force _ text with an argument value , substitute the result for value .
if context.autoescape is true and value is not an instance of SafeData , or value is an instance of EscapeData ,
call the function escape with an argument value , return the result .
if not ,
return value .
derive the class VariableNode form the base class Node .
define the method _ _ init _ _ with 2 arguments : self and filter _ expression .
substitute filter _ expression for self.filter _ expression .
define the method _ _ repr _ _ with an argument self .
return a string &quot; &lt; Variable Node : % s &gt; &quot; , substitute &apos; % s &apos; with self.filter _ expression .
define the method render with 2 arguments self and context .
try ,
call the method self.filter _ expression.resolve with an argument context , substitute the result for output .
if UnicodeDecodeError exception is caught ,
return an empty string .
call the function render _ value _ in _ context with 2 arguments output and context , return the result .
call the function re.compile with an argument raw string &quot; ( ? : ( \ w + ) = ) ? ( . + ) &quot; , substitute the result for kwarg _ re .
define the method token _ kwargs : bits , parser and support _ legacy set to boolean False .
if bits is false ,
return an empty dictionary .
call the method kwarg _ re.match with an argument first element of bits , substitute the result for match .
if match is true and call to the method match.group with an argument integer 1 evaluates to true , kwarg _ format is boolean True ,
otherwise it is boolean False. if kwarg _ format is false ,
if support _ legacy is false ,
return an empty dictionary .
if length of bits is lesser than integer 3 or second element of bits is not equal to string &apos; as &apos; ,
return an empty dictionary .
kwargs is an empty dictionary ,
while bits is true ,
if kwarg _ format is true ,
call the method kwarg _ re.match with an argument first element of bits , substitute the result for match .
if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false ,
return kwargs .
call the method match.groups with 2 arguments : key and value .
delete first element of bits .
if not ,
if length of bits is lesser than integer 3 or second element of bits is not equal to string &apos; as &apos; ,
return kwargs .
substitute third and first element of bits for key and value , respectively .
delete first 3 elements of bits .
call the method parser.compile _ filter with an argument value , substitute the result for value under the key key of kwargs dictionary .
if bits is true and kwarg _ format is false ,
if first element of bits is not equal to string &apos; and &apos; ,
return kwargs .
delete first element of bits .
return kwargs .
define the function parse _ bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes _ context and name .
if takes _ context is true ,
if first element of params equals a string &apos; context &apos; ,
substitute params without the first element for params .
if not ,
raise an TemplateSyntaxError exception &quot; &apos; % s &apos; is decorated with takes _ context = True so it must have a first argument of &apos; context &apos; &quot; ,
where &apos; % s &apos; is replaced with name. args is an empty list .
kwargs is an empty dictionary .
convert params into a list , substitute it for unhandled _ params .
for every bit in bits ,
call the function
if kwarg is true ,
call the method six.iteritems with an argument kwarg , convert the result into a list ,
substitute first element of the result for param and value. if param is not in params and varkw is None ,
raise an TemplateSyntaxError exception with an argument &quot; &apos; % s &apos; received unexpected keyword argument &apos; % s &apos; &quot; ,
where &apos; % s &apos; are replaced with name and param. otherwise if param is contained in kwargs ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; received multiple values for keyword argument &apos; % s &apos; &quot; ,
where &apos; % s &apos; are replaced with name and param. if not ,
convert param to a string , use it as a key to get the value from kwargs dictionary , assign it value .
if param is contained in unhandled _ params ,
call the method unhandled _ params.remove with an argument param .
if not ,
if kwargs is true ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; received some positional argument ( s ) after some keyword argument ( s ) &quot; , where &apos; % s &apos; is replaced with name .
if not ,
call the method parser.compile _ filter with an argument bit , append the result to args .
try ,
remove first element of unhandled _ params .
if IndexError exception is caught ,
if varargs is None ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; received too many positional arguments &quot; ,
where &apos; % s &apos; is replaced with name. if defaults is not None ,
slice list unhandled _ params from the beginning to the length of defaults last element ,
if unhandled _ params is true ,
raise TemplateSyntaxError (
return args and kwargs .
define the method generic _ tag _ compiler with 9 arguments : parser , token , params , varargs , varkw , defaults , name , takes _ context ,
call the function token.split _ contents , substitute the result without the first element for bits .
call the method parse _ bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes _ context and name ,
substitute the result for args and kwargs , respectively. call the function node _ class with 3 arguments : takes _ context , args and kwargs .
derive the class TagHelperNode form the base class Node .
define the method _ _ init _ _ with 4 arguments : self , takes _ context , args and kwargs .
substitute takes _ context for self.takes _ context .
substitute args for self.args.
substitute kwargs for self.kwargs.
define the method get _ resolved _ arguments with 2 arguments : self and context .
resolved _ args is an list with elements , return value of the method var.resolve with an argument context , for every var in self.args.
if self.takes _ context is true ,
append resolved _ args to a list containing context element , substitute it for resolved _ args .
resolved _ kwargs is dictionary with elements : return value of the method v.resolve called with an argument context , for k ,
for every k and v in return value of the method self.kwargs.items. return resolved _ args and resolved _ kwargs .
derive the class Library form the base class object .
define the method with reload with an argument self .
self.filters is an empty dictionary .
self.tags is an empty dictionary .
define the method tag with 3 arguments : self , name set to None and compile _ function set to None .
if name is None and compile _ function is None ,
return self.tag _ function .
otherwise if name is not None and compile _ function is None ,
if name is callable object ,
call the method self.tag _ function with an argument name , return the result .
if not ,
define the function dec with an argument func ,
call the method self.tag with 2 arguments name and func , return the result .
return dec .
otherwise if name is not None and compile _ function is not None ,
substitute compile _ function for self.tags dictionary value under the name key .
return compile _ function .
if not ,
raise an InvalidTemplateLibrary exception with an argument string &quot; Unsupported arguments to Library.tag : ( % r , % r ) &quot; ,
substitute &apos; % r &apos; with name and compile _ function. define the method tag _ function with 2 argument : self and func .
get &quot; _ decorated _ function &quot; attribute from func , return func if the attribute doesnt exists ,
use its _ _ name _ _ field as a key to get the value from self.tags , assign func to it. return func .
define the method filter with 4 arguments : self , name set to None , filter _ func set to None and unpacked dictionary flags .
if name is None and filter _ func is None ,
define the function dec with an argument func ,
call the method self.filter _ function with 2 arguments func and unpacked dictionary flags , return the result .
return dec .
otherwise if name is not None and filter _ func is None ,
if name is callable object ,
call the method self.filter _ function with arguments name and unpacked dictionary flags , return the result .
if not ,
define the function dec with an argument func ,
call the method self.filter with 3 arguments : name , func and unpacked dictionary flags , return the result .
return dec .
otherwise if name is not None and filter _ func is not None ,
substitute filter _ func for value under the name key of self.filters dictionary .
for every attr in tuple with 3 arguments : strings &apos; expects _ localtime &apos; , &apos; is _ safe &apos; and &apos; needs _ autoescape &apos; ,
if attr is contained in flags ,
substitute value under the attr key of flags dictionary for value .
set filter _ func objec attr attribute to value .
if filter _ func has an attribute &quot; _ decorated _ function &quot; ,
set filter _ func . _ decorated _ function objects attr attribute to value .
substitute name for filter _ func . _ filter _ name .
return filter _ func .
if not ,
raise an InvalidTemplateLibrary exception with an argument string ( &quot; Unsupported arguments to Library.filter : ( % r , % r ) &quot; ,
where &apos; % r &apos; is replaced with name and filter _ func , respectively. define the method filter _ function with 3 arguments : self , func and unpacked dictionary flags .
get &quot; _ decorated _ function &quot; attribute from func object , if it exists substitute _ _ name _ _ field of the result for name ,
if not , substitute func . _ _ name _ _ for name. call the method self.filter with 3 arguments : name , func and unpacked dictionary flags .
define the method simple _ tag with 4 arguments : self , func and None , takes _ context and None and name set to None .
define the function dec with an argument func .
call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults , respectively .
derive the class SimpleNode form the base class TagHelperNode .
define the method render with 2 arguments self and context .
call the method self.get _ resolved _ arguments with an argument context , substitute the result for resolved _ args and resolved _ kwargs .
call the function func with 2 arguments : unpacked list resolved _ args and unpacked dictionary resolved _ kwargs , return it .
if name is true , substitute it for function _ name , if not get attribute &apos; _ decorated _ function &apos; from func object ,
substitute its _ _ name _ _ field for function name , if it doesnt exists substitute func . _ _ name _ _ for function _ name. call the function generic _ tag _ compiler , params set to params , varargs set to varargs , varkw set to varkw , defaults set to defaults ,
name set to function _ name , and takes _ context set to takes _ context and node _ class set to SimpleNode. substitute func . _ _ doc _ _ for compile _ func . _ _ doc _ _ .
call the method self.tag with 2 arguments : function _ name and compile _ func .
return func .
if func is None ,
return dec .
otherwise if func is callable object ,
call the function dec with an argument func , return the result .
if not ,
raise an TemplateSyntaxError exception with an argument string &quot; Invalid arguments provided to simple _ tag &quot; .
define the method assignment _ tag with 4 arguments : self , func set to None , takes _ context set to None and name set to None .
define the function dec with an argument func .
call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults .
derive the class AssignmentNode form the base class TagHelperNode .
define the function _ _ init _ _ with 5 arguments : self , takes _ context , args , kwargs and target _ var .
call the method _ _ init _ _ from the base class of the class AssignmentNode , with 3 arguments : takes _ context , args and kwargs .
substitute target _ var for self.target _ var .
define the method render with 2 arguments self and context .
call the method self.get _ resolved _ arguments with an argument context , substitute the result for resolved _ args and resolved _ kwargs .
call the function func with 2 arguments : unpacked list resolved _ args and unpacked dictionary resolved _ kwargs ,
substitute the result for value under the self.target _ var key of the context dictionary. return an empty string .
if name is true , substitute it for function _ name , if not get &apos; _ decorated _ function &apos; attribute from func object , if it exists ,
substitute _ _ name _ _ field of the result for function _ name , in not , substitute func . _ _ name _ _ for function _ name. define the function compile _ func with 2 arguments : parser and token .
call the function token.split _ contents , substitute the result without the first element for bits .
if length of bits is smaller than integer 2 or second last element of bits is not equal to &apos; as &apos; ,
raise an TemplateSyntaxError exception with an argument string , &quot; &apos; % s &apos; tag takes at least 2 arguments and the second last argument
must be &apos; as &apos; &quot; , where &apos; % s &apos; is replaced with function _ name. substitute last element of bits for target _ var .
substitute bits without last two elements for bits .
call the function parse _ bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes _ context and function _ name ,
substitute the result for args and kwargs. return an instance of AssignmentNode class created with 4 arguments : takes _ context , args , kwargs and target _ var .
substitute func . _ _ doc _ _ for compile _ func . _ _ doc _ _ .
call the method self.tag with 2 arguments : function _ name and compile _ func .
return func .
if func is None ,
return dec .
otherwise if func is callable ,
call the function dec with an argument func , return the result .
if not ,
raise an TemplateSyntaxError exception with an argument string &quot; Invalid arguments provided to assignment _ tag &quot; .
define the method inclusion _ tag with 5 arguments : self , file _ name , context _ class set to Context , takes _ context set to boolean False ,
and name set to None. define the function dec with an argument func .
call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults .
derive the class InclusionNode form the base class TagHelperNode .
define the method render with 2 arguments : self and context .
call the method self.get _ resolved _ arguments with context as an argument , substitute the result for resolved _ args and resolved _ kwargs .
call the function func with 2 arguments : unpacked list resolved _ args and unpacked dictionary resolved _ kwargs , substitute the result for _ dict .
get &apos; nodelist &apos; attribute from self object. if it doesnt exists return boolean False , if the result evaluates to false ,
from django.template.loader import get _ template , select _ template .
if file _ name is an instance of Template class .
substitute file _ name for t .
otherwise if file _ name is not an instance of six.string _ types and call to the function is _ iterable with an argument file _ name ,
evaluates to true , call the function select _ template with an argument file _ name , substitute the result for t .
if not ,
call the function get _ template with an argument file _ name , substitute the result for t .
substitute t.nodelist for self.nodelist.
call the function context _ class with 2 arguments : _ dict and unpacked dictionary containing 4 entries :
context.autoescape for &apos; autoescape &apos; , context.autoescape for &apos; current _ app &apos; , context.use _ l10n for &apos; use _ l10n &apos; , and context.use _ tz for &apos; use _ tz &apos; , substitute the result for new _ context. call the function context.get with 2 argument &apos; csrf _ token &apos; and None , substitute the result for csrf _ token .
if csrf _ token is not None ,
substitute csrf _ token for value under the &apos; csrf _ token &apos; key of new _ context dictionary .
call the method self.nodelist.render with an argument new _ context , return the result .
if name is true , substitute it for function _ name , if not get &apos; _ decorated _ function &apos; attribute from func object , if it exists ,
substitute _ _ name _ _ field of the result for function _ name , in not , substitute func . _ _ name _ _ for function _ name. call the function partial with 8 arguments : generic _ tag _ compiler , params set to params , varargs set to varargs , varkw set to varkw ,
defaults set to defaults , name set to function _ name , takes _ context set to takes _ context and node _ class set to InclusionNode , substitute the result for compile _ func. substitute func . _ _ doc _ _ for compile _ func . _ _ doc _ _ .
call the function self.tag with 2 arguments : function _ name and compile _ func .
return func .
return dec .
define the function is _ library _ missing with an argument name .
split string name into two parts from the right side by the separator &apos; .&apos; , substitute parts for path and module , respectively .
try ,
call the function import _ module with an argument path , substitute it for package .
call the function module _ has _ submodule with 2 arguments : package and module , return inverted boolean result .
if ImportError exception is caught ,
call the function is _ library _ missing with an argument path , return the result .
define the function import _ library with an argument taglib _ module .
try ,
call the function import _ module with an argument taglib _ module , substitute the result for mod .
if ImportError , renamed to e , exception is caught ,
call the function is _ library _ missing with an argument taglib _ module , if it evaluates to true ,
return None .
if not ,
raise an InvalidTemplateLibrary exception with an argument string &quot; ImportError raised loading % s : % s &quot; ,
where &apos; % s &apos; is replaced with taglib _ module and e. try ,
return mod.register.
if AttributeError exception is caught ,
raise an InvalidTemplateLibrary exception with an argument string &quot; Template library % s does not have a variable named &apos; register &apos; &quot; ,
where &apos; % s &apos; is replaced with taglib _ module. templatetags _ modules is an empty list .
define the function get _ templatetags _ modules .
use global variable templatetags _ modules .
if templatetags _ modules is false ,
_ templatetags _ modules is an empty list .
templatetags _ modules _ candidates is an list with an argument string &apos; django.templatetags &apos; .
add string &apos; % s.templatetags &apos; to a list , where &apos; % s &apos; is replaced with app _ config.name ,
for every app _ config in result of the method apps.get _ app _ configs , append the resulting list to templatetags _ modules _ candidates. for every templatetag _ module in templatetags _ modules _ candidates ,
try ,
call the function import _ module with an argument templatetag _ module .
append templatetag _ module to _ templatetags _ modules .
if ImportError exception is caught ,
skip this loop iteration .
substitute _ templatetags _ modules for templatetags _ modules .
return templatetags _ modules .
define the function get _ library with an argument library _ name .
get the value under the library _ name key of the libraries dictionary , if it exists , substitute it for lib , if not , lib is None .
if lib is false ,
call the function get _ templatetags _ modules , substitute the result for templatetags _ modules .
tried _ modules is an empty list .
for every module in templatetags _ modules ,
taglib _ module is an string &apos; % s . % s &apos; , where &apos; % s &apos; is replaced to module and library _ name .
append taglib _ module to tried _ modules .
call the function import _ library with an argument taglib _ module , substitute the result for lib .
if lib is true ,
substitute lib for value under the library _ name key of libraries dictionary .
break loop execution .
if lib is false ,
raise an InvalidTemplateLibrary exception with an argument string &quot; Template library % s not found , tried % s &quot; ,
where &apos; % s &apos; is replaced with library _ name and elements of tried _ modules joined into a string , separated by &apos; , &apos; . return lib .
define the function add _ to _ builtins with an argument module .
call the function import _ library with an argument module , append the result to builtins .
call the function add _ to _ builtins with an argument string &apos; django.template.defaulttags &apos; .
call the function add _ to _ builtins with an argument string &apos; django.template.defaultfilters &apos; .
call the function add _ to _ builtins with an argument string &apos; django.template.loader _ tags &apos; .
from copy import copy into default name space .
from django.utils.module _ loading import import _ string into default name space .
_ standard _ context _ processors is None .
_ builtin _ context _ processors is a tuple containing a string &apos; django.core.context _ processors.csrf &apos; .
derive the class ContextPopException from the Exception base class .
do nothing .
derive the class ContextDict from the dict base class .
define the method _ _ init _ _ with 4 arguments : self , context , unpacked list args and unpacked dictionary kwargs .
call the method _ _ init _ _ from the base class of the class ContextDict , with 2 arguments : unpacked list args and unpacked dictionary kwargs .
append self to context.dicts.
substitute context for self.context.
define the method _ _ enter _ _ with an argument self .
return self .
define the method _ _ exit _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
remove the first element from the self.context.
derive the class BaseContext from the object base class .
define the method _ _ init _ _ with 2 arguments : self and dict _ set to None .
call the method self . _ reset _ dicts with an argument dict _ .
define the method _ reset _ dicts with 2 arguments : self and value set to None .
builtins is an dictionary with 3 initial entries : boolean True for &apos; True &apos; , boolean False for &apos; False &apos; and None for &apos; None &apos; .
self.dicts is an list with element builtins .
if value is not None ,
append value to self.dicts list .
define the method _ _ copy _ _ with an argument self .
call the function copy with an argument base class of the class BaseContext , substitute the result for duplicate .
hard copy list self.dicts to duplicate.dicts.
return duplicate .
define the method _ _ repr _ _ with an argument self .
return printable representation of self.dicts.
define the method _ _ iter _ _ with an argument self .
for every d in reversed list self.dicts ,
yield d .
define the method push with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
instantiate class ContextDict with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , return it .
define the method pop with an argument self .
if length of self.dicts is equal to an integer 1 ,
raise an ContextPopException .
call the method self.dicts.pop , return the result .
define the method _ _ setitem _ _ with 3 arguments : self , key and value .
substitute value for value under the key key of dictionary at last element of self.dicts.
define the method _ _ getitem _ _ with 2 arguments : self and key .
for every d in reversed list self.dicts ,
if key is contained in d ,
return value under the key key of d dictionary .
raise KeyError exception with an argument key .
define the method _ _ delitem _ _ with 2 arguments : self and key .
delete value under the key key of dictionary at last element of self.dicts.
define the method has _ key with 2 arguments : self and key .
for every d in self.dicts ,
if key is contained in d ,
return boolean True .
return boolean False .
define the method _ _ contains _ _ with 2 arguments : self and key .
call the method self.has _ key with an argument key , return the result .
define the method got with 3 arguments : self , key and otherwise set to None .
for every d in reversed list self.dicts ,
if key is contained in d ,
return value under the key key of d dictionary .
return otherwise .
define the method new with 2 arguments : self and values set to None .
call the function copy with an argument self , substitute the result for new _ context .
call the method new _ context . _ reset _ dicts values .
return new _ context .
define the method flatten with an argument self .
flat is an empty dictionary ,
for every d in self.dicts ,
update flat dictionary with d .
return flat .
define the method _ _ eq _ _ with 2 arguments : self and other .
if other is an instance of BaseContext class ,
call the flatten method of the self and other objects , if they are equal , return boolean True , if not return boolean False .
return boolean False .
derive the class Context from the BaseContext base class .
define the method _ _ init _ _ with 6 arguments : self , dict _ set to None , autoescape set to True , current _ app set to None ,
use _ l10n set to None and use _ tz set to None. substitute autoescape for self.autoescape.
substitute current _ app for self.current _ app .
substitute use _ l10n for self.use _ l10n .
substitute use _ tz for self.use _ tz .
self.render _ context is a instance of RenderContext class .
call the the method _ _ init _ _ from the base class of the class Context .
define the method _ _ copy _ _ with an argument self .
call the the method _ _ copy _ _ from the base class of the class Context , substitute the result for duplicate .
call the function copy with an argument self.render _ context , substitute the result for duplicate.render _ context .
return duplicate
define the method update with 2 arguments : self and other _ dict .
if other _ dict doesnt have an &apos; _ _ getitem _ _ &apos; attribute ,
raise an TypeError exception with an argument string &apos; other _ dict must be a mapping ( dictionary-like ) object . &apos; .
append other _ dict to self.dicts.
return other _ dict .
derive the class RenderContext from the BaseContext base class .
define the method _ _ iter _ _ with an argument self .
for every d in last element of self.dicts ,
yield d .
define the method has _ key with 2 arguments : self and key .
if key is contained in last element of self.dicts , return boolean True , otherwise return boolean False .
define the method get with 3 arguments : self , key and otherwise set to None .
return value under the key key of dictionary in last element of self.dicts ,
if it doesnt exists return otherwise. define the method _ _ getitem _ _ with 2 arguments : self and key .
return value under the key key of dictionary in last element of self.dicts.
define the function get _ standard _ processors .
from django.conf import settings into default namespace .
use global variable _ standard _ context _ processors .
if _ standard _ context _ processors is None ,
processors is an empty list .
collect is an empty list .
extend collect list with _ builtin _ context _ processors .
extend collect list with settings.TEMPLATE _ CONTEXT _ PROCESSORS .
for every path in collect ,
call the function import _ string with an argument path , substitute the result for func .
append func to processors .
convert processors elements into a tuple , substitute it for _ standard _ context _ processors .
return _ standard _ context _ processors .
derive the class RequestContext from the Context base class .
define the method _ _ init _ _ with 7 arguments : self , request , dict _ set to None , processors set to None , current _ app set to None ,
use _ l10n set to None and use _ tz set to None. call the method Context . _ _ init _ _ with 5 arguments : self , dict _ , current _ app as current _ app , use _ l10n as use _ l10n , use _ tz as use _ tz .
if processors is None ,
processors is an empty tuple .
if not ,
convert processors into a tuple and substitute it for processors .
updates is an empty dictionary .
call the function get _ standard _ processors , append processors to the result , for every processor is the result ,
call the function processor with an argument request , update updates dictionary with the result .
update self dictionary with updates .
from django.template.base import Lexer , Parser , tag _ re , NodeList , VariableNode and TemplateSyntaxError into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils.html import escape into default name space .
from django.utils.safestring import SafeData and EscapeData into default name space .
from django.utils.formats import localize into default name space .
from django.utils.timezone import template _ localtime into default name space .
derive the class DebugLexer from the Lexer base class .
define the method _ _ init _ _ with 3 arguments : self , template _ string and origin .
call the method _ _ init _ _ from the base class of the class DebugLexer , with 2 arguments : template _ string and origin .
define the method tokenize with an argument self .
result is an empty list , upto is integer 0 .
call the method tag _ re.finditer with an argument self.template _ string , for every match in result ,
call the method match.span , substitute the result for start an end , respectively .
if start is greater than upto ,
call the method self.create _ token with 3 arguments : self.template _ string list elements from upto index to start index ,
tuple with 2 elements : upto and start and boolean False , append the result to result. substitute start for upto .
call the method self.create _ token with 3 arguments : self.template _ string list elements from start index to end index ,
tuple with 2 elements : start and end and boolean False , append the result to result. substitute end for upto .
substitute elements of self.template _ string list from upto index to the end for last _ lit .
if last _ bit is true ,
call the method self.create _ token with 3 arguments : last _ bit , tuple with 2 elements : upto and sum of upto and length of last _ bit ,
and boolean False , append the result to result. return result .
define the method create _ token with 4 arguments : self , token _ string , source and in _ tag .
call the method create _ token from the base class of the class DebugLexer , with 2 arguments : template _ string and in _ tag ,
substitute the result for token. assign self.origin , source to token.source.
return token .
derive the class DebugParser from the Parser base class .
define the method _ _ init _ _ with 2 arguments : self and lexer .
call the method _ _ init _ _ with an argument lexer , from the base class of the class DebugParser .
self.command _ stack is an empty list .
define the method enter _ command with 3 arguments : self , command and token .
append tuple with 2 elements : command and token.source , append the result to self.command _ stack .
define the method exit _ command with an argument self .
remove first element from self.command _ stack .
define the method error with 3 arguments : self , token and msg .
call the method self.source _ error with 2 arguments : token.source and msg , return the result .
define the method source _ error with 3 arguments : self , source and msg .
e is an instance of TemplateSyntaxError class , created with an argument msg .
substitute source for e.django _ template _ source .
return e .
define the method create _ nodelist with an argument self .
return an instance of DebugNodeList class .
define the method create _ variable _ node with 2 arguments : self and contents .
return an instance of DebugVariableNode , created with an argument contents .
define the method extend _ nodelist with 4 arguments : self , nodelist , node and token .
substitute token.source for node.source.
call the method extend _ nodelist with 3 arguments : nodelist , node and token , from the base class of the class DebugParser .
define the method unclosed _ block _ tag with 2 arguments : self and parse _ until .
remove the first element from self.command _ stack , assign the result to command and source , respectively .
msg is an string &quot; Unclosed tag &apos; % s &apos; . Looking for one of : % s &quot; , where &apos; % s &apos; is replaced with command ,
and elements of parse _ until joined into a string , separated by string &apos; , &apos; . raise an self.source _ error exception with 2 arguments : source and msg .
define the method compile _ filter _ error with 3 arguments : self , token and e .
if e doesnt have an &apos; django _ template _ source &apos; attribute ,
substitute token.source for e.django _ template _ source .
define the method compile _ function _ error with 3 arguments : self , token and e .
if e doesnt have an &apos; django _ template _ source &apos; attribute ,
substitute token.source for e.django _ template _ source .
derive the class DebugNodeList from the NodeList base class .
define the method render _ node with 3 arguments : self , node and context .
try ,
call the method node.render with an argument context , return the result .
if Exception , renamed to e , exception is caught ,
if e doesnt have an &apos; django _ template _ source &apos; attribute ,
substitute node.source for e.django _ template _ source .
raise an exception .
derive the class DebugVariableNode from the VariableNode base class .
define the method render with 2 arguments : self and context .
try ,
call the method self.filter _ expression.resolve with an argument context , substitute the result for output .
call the function template _ localtime with 2 arguments : output and use _ tz set to context.use _ tz , substitute the result for output .
call the function localize with 2 arguments : output and use _ l10n set to context.use _ l10n , substitute the result for output .
call the function force _ text with an argument output , substitute the result for output .
if UnicodeDecodeError exception is caught ,
return an empty string .
if Exception , renamed to e , exception is caught ,
if e doesnt have an &apos; django _ template _ source &apos; attribute ,
substitute self.source for e.django _ template _ source .
raise an exception .
if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class ,
call the function escape with an argument output .
if not ,
return output .
from _ _ future _ _ import unicode _ literals into default name space .
import module re .
import module random as random _ module .
from decimal import Decimal , InvalidOperation , Context and ROUND _ HALF _ UP into default name space .
from functools import wraps into default name space .
from pprint import pformat into default name space .
from django.template.base import Variable , Library and VariableDoesNotExist into default name space .
from django.conf import settings into default name space .
from django.utils import formats into default name space .
from django.utils.dateformat import format and time _ format into default name space .
from django.utils.encoding import force _ text and iri _ to _ uri into default name space .
from django.utils.html import conditional _ escape , escapejs , escape , urlize as _ urlize , linebreaks , strip _ tags , avoid _ wrapping ,
and remove _ tags. from django.utils.http import urlquote into default name space .
from django.utils.text import Truncator , wrap and phone2numeric into default name space .
from django.utils.safestring import mark _ safe , SafeData and mark _ for _ escaping into default name space .
from django.utils import six into default name space .
from django.utils.timesince import timesince and timeuntil into default name space .
from django.utils.translation import ugettext and ungettext into default name space .
from django.utils.text import normalize _ newlines and slugify as _ slugify into default name space .
register is an instance of Library class .
define the method stringfilter with an argument func .
define the method _ dec with 2 arguments : unpacked list args and unpacked dictionary kwargs .
if args in true ,
convert args into a list , substitute it for args .
call the function force _ text with an argument first element of args , substitute the result for first element of args .
if first element of args is an instance of SafeData , and &apos; is _ safe &apos; attribute of dec . _ decorated _ function object is true ,
call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs ,
use the result as an argument for the call to the mark _ safe function , return the result. call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs , return the result .
get &apos; _ decorated _ function &apos; attribute from the func object , substitute it for _ dec . _ decorated _ function , if it doesnt exist ,
substitute func for _ dec . _ decorated _ function. call the function wraps with an argument func , call the result with an argument _ dec , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function addslashes with an argument value .
replace all occurrences of &apos; \ \ &apos; with &apos; \ \ \ \ &apos; in value , replace all occurrences of &apos; &quot; &apos; with &apos; \ \ &quot; &apos; in the previous result ,
replace all occurrences of &quot; &apos; &quot; with &quot; \ \ &apos; &quot; in the previous result , return the result. decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function capfirst with an argument value .
if value is false , return it , if it is true convert first element of value to uppercase letter , return the value .
decorator function register.filter with an argument string &quot; escapejs &quot; .
decorator stringfilter ,
define the function escapejs _ filter with an argument value .
call the function escapejs with an argument value , return the result .
multiply 10 to the power of 200 , with itself , substitute the result for pos _ inf .
multiply 10 to the power of 200 , with 10 to the power of 200 , negative , substitute the result for neg _ inf .
divide 10 to the power of 400 by 10 to the power of 400 , substitute the result for nan .
special _ floats is an list with 3 elements , pos _ inf , neg _ inf and nan , all converted to strings .
decorator function register.filter with an argument is _ safe set to boolean True .
define the function floatformat with 2 arguments text and arg set to integer -1 .
try ,
call the function force _ text with an argument text , substitute the result for input _ val .
d is an instance of Decimal class created with an argument input _ val .
if UnicodeEncodeError exception is caught ,
return an empty string .
if InvalidOperation exception is caught ,
if every input _ val in special _ floats ,
return input _ val .
try ,
d is an instance of class Decimal , created with result of the function force _ text ,
called with an argument text converted into a floating point number. if ValueError , InvalidOperation , TypeError or UnicodeEncodeError exceptions are caught ,
return an empty string .
try ,
convert arg to an integer , substitute it for p .
if ValueError exception is caught ,
return input _ val .
try ,
convert d into a integer , subtract d from it , substitute the result for m .
if ValueError , OverflowError or InvalidOperation exceptions are caught ,
return input _ val .
if m is false and p is lesser than integer 0 ,
call the method formats.number _ format with 2 arguments , d converted to a integer and then to string , and integer 0 ,
use the result as an argument for the call to the function mark _ safe , return the result. if p equals integer 0 ,
exp is an instance of Decimal , created with an argument integer 1 .
if not ,
instantiate class Decimal with string &apos; 1.0 &apos; as argument , divide it by product of instance of Decimal class created with integer 10 ,
and absolute value of p , substitute the result for exp. try ,
call the method d.as _ tuple , substitute the result for tupl .
subtract third element of tupl from length of second element of tupl , substitute the result for units .
sum absolute p with units an integer 1 , substitute the result for prec .
call the method d.quantize with 3 arguments : exp , ROUND _ HALF _ UP and instance of Context class created with prec as prec ,
call the method as _ tuple on the result , substitute the result for sign , digits and exponent , respectively. append result of method six.text _ type called with an argument digit to an list , for every digit in reversed order of digits ,
substitute the resulting list for digits. while length of digits is smaller than or equal to absolute value of exponent ,
append &apos; 0&apos; to digits .
insert &apos; .&apos; to digits at negative exponent index .
if sign is true ,
append &apos; -&apos; to digits .
reverse element order of dicts , join them in a string , substitute the result for number .
call the method formats.number _ format with 2 arguments : number and absolute value of p ,
use the result as an argument for the call to the mark _ safe function , return the result. if InvalidOperation exception is caught ,
return input _ val .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function iriencode with an argument value .
call the function iri _ to _ uri with an argument value , use the result as an argument for the call to the force _ text function ,
return the result. decorator function register.filter with 2 arguments is _ safe set to boolean True and needs _ autoescape set to boolean True .
decorator stringfilter ,
define the function linenumbers with 2 arguments value and autoescape set to None .
split value by newline characters , substitute the result for lines .
call the function six.text _ type with length of lines as an argument ,
use length of result as an argument for the call to the function six.text _ type , substitute the result for width. if autoescape is false , if value is an instance of SafeData ,
for every i and line in enumerated iterable lines ,
concatenate string &apos; % 0 &apos; , width and string &quot; d . % s &quot; , format the previous string with i incremented by 1 and line ,
substitute the result for i-th element of lines. if not ,
for every i and line in enumerated iterable lines ,
concatenate string &apos; % 0 &apos; , width and string &quot; d . % s &quot; , format the previous string with i incremented by 1 ,
and result of the function escape called with an argument line , substitute the result for i-th element of lines. call the method mark _ safe with lines joined into a string , separated by newlines as argument , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function lower with an argument value .
convert value to lowercase and return the result .
decorator function register.filter with an argument is _ safe set to boolean False .
decorator stringfilter ,
define the function make _ list with an argument value .
return value converted into a list .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function slugify with an argument value .
call the function _ slugify with an argument value , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
define the function stringformat with 2 arguments value and arg .
try ,
call the function six.text _ type with an argument arg , append the result to &apos; % &apos; , format the previous with value , return the result .
if TypeError or ValueError exceptions are caught ,
return an empty string .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function title with an argument value .
call the function re.sub with 3 arguments : string &quot; ( &#91; a-z &#93; ) &apos; ( &#91; A-Z &#93; ) &quot; , lambda function with an argument m and return value ,
result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title , substitute the result for t. call the function re.sub with 3 arguments : string &quot; \ d ( &#91; A-Z &#93; ) &quot; , lambda function with an argument m and return value ,
result of the m.group method called with an argument integer 0 converted into lowercase and t , return the result. decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function truncatechars with 2 arguments value and arg .
try ,
substitute arg converted into a integer for length .
if ValueError exception is caught ,
return value .
instantiate class Truncator , with an argument value , call the method chars on the result with an argument length , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function truncatechars _ html with 2 arguments value and arg .
try ,
substitute arg converted into an integer for length .
if ValueError exception is caught ,
return value .
instantiate class Truncator , with an argument value , call the method chars on the result with 2 arguments length ,
and html set to boolean True , return the result. decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function truncatewords with 2 arguments value and arg .
try ,
substitute arg converted into an integer for length .
if ValueError exception is caught ,
return value .
instantiate class Truncator , with an argument value , call the method words on the result with 2 arguments length ,
and truncate set to string &apos; ... &apos; , return the result. decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function truncatewords _ html with 2 arguments value and arg .
try ,
substitute arg converted into an integer for length .
if ValueError exception is caught ,
return value .
instantiate class Truncator , with an argument value , call the method words on the result with 3 arguments length ,
html set to boolean True and truncate set to string &apos; ... &apos; , return the result. decorator function register.filter with an argument is _ safe set to boolean False .
decorator stringfilter ,
define the function upper with an argument value .
convert value to uppercase , return the result .
decorator function register.filter with an argument is _ safe set to boolean False .
decorator stringfilter ,
define the function urlencode with 2 arguments value and safe set to None .
kwargs is an empty dictionary .
if safe is not None ,
substitute safe for value under the &apos; safe &apos; key of kwargs dictionary .
call the function urlquote with 2 arguments value and unpacked dictionary kwargs , return the result .
decorator function register.filter with 2 arguments is _ safe set to boolean True and needs _ autoescape set to boolean True .
decorator stringfilter ,
define the function urlize with 2 arguments value and autoescape set to None .
call the function _ urlize with 3 arguments : value , nofollow set to boolean True , autoescape set to autoescape ,
use the result as an argument for the call to the function mark _ safe , return the result. decorator function register.filter with 2 arguments is _ safe set to boolean True and needs _ autoescape set to boolean True .
decorator stringfilter ,
define the function urlizetrunc with 3 arguments value , limit and autoescape set to None .
call the function _ urlize with 4 arguments : value , trim _ url _ limit as limit converted into an integer , nofollow as boolean True ,
and autoescape as autoescape , use the result as an argument for the call to the function mark _ safe , return the result. decorator function register.filter with an argument is _ safe set to boolean False .
decorator stringfilter ,
define the function wordcount with an argument value .
split value into words , return the length of the result .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function wordwrap with 2 arguments value and arg .
call the method wrap with 2 arguments , value and arg converted into a integer , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function ljust with 2 arguments value and arg .
call the method value.ljust with an argument , arg converted into a integer , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function rjust with 2 arguments value and arg .
call the method value.rjust with an argument , arg converted into a integer , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function center with 2 arguments value and arg .
call the method value.center with an argument , arg converted into a integer , return the result .
decorator register.filter.
decorator stringfilter ,
define the function cut with 2 arguments value and arg .
if value is an instance of SafeData , safe is boolean True , otherwise it is boolean False .
replace every occurrence of arg is value for an empty string , substitute the result for value .
if safe is true and arg is not equal to string &apos; ; &apos; ,
call the function mark _ safe with an argument value , return the result .
return value .
decorator function register.filter with 2 arguments string &quot; escape &quot; and is _ safe set to boolean True .
decorator stringfilter ,
define the function escape _ filter with an argument value .
call the function mark _ for _ escaping with an argument value , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function force _ escape with an argument value .
call the function escape with an argument value , return the result .
decorator function register.filter with 3 arguments string &quot; slice &quot; , is _ safe set to boolean True and needs _ autoescape set to True .
decorator stringfilter ,
define the function linebreaks _ filter with 2 arguments value and autoescape set to None .
if autoescape is true and value is not an instance of SafeData , autoescape is boolean True , otherwise it is boolean False .
call the function linebreaks with 2 arguments value and autoescape , use the result as an argument for the call to the mark _ safe ,
return the result. decorator function register.filter with 2 arguments is _ safe set to boolean True and needs _ autoescape set to boolean True .
decorator stringfilter ,
define the function linebreaksbr with 2 arguments value and autoescape set to None .
if autoescape is true and value is not an instance of SafeData , autoescape is boolean True , otherwise it is boolean False .
call the function normalize _ newlines with an argument value , substitute the result for value .
if autoescape is true ,
call the function escape with an argument value , substitute it for value .
replace every occurrence of newline character in value with string &apos; &lt; br / &gt; &apos; , use it as an argument for the call to the mark _ safe ,
return the result. decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function safe with an argument value .
call the function mark _ safe with an argument value , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
define the function safeseq with an argument value .
for every obj in value call the function mark _ safe with an argument result of the function force _ text called with an argument obj ,
return all the results in a list. decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function removetags with 2 arguments value and arg .
call the function remove _ tags with 2 arguments value and tags , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
decorator stringfilter ,
define the function striptags with an argument value .
call the function strip _ tags with an argument value , return the result .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function dictsort with 2 arguments value and arg .
try ,
sort value with key set to filed resolve of instance of a class Variable , created with an argument arg , return the result .
if TypeError or VariableDoesNotExist exceptions are caught ,
return an empty string .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function dictsortreversed with 2 arguments value and arg .
try ,
sort value with key set to filed resolve of instance of a class Variable , created with an argument arg , reverse the sort and return the result .
if TypeError or VariableDoesNotExist exceptions are caught ,
return an empty string .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function first with an argument value .
try ,
return first element of value .
if IndexError exception is caught ,
return an empty string .
decorator function register.filter with 2 arguments is _ safe set to boolean True and needs _ autoescape set to boolean True .
define the function join with 3 arguments : value , arg and autoescape set to None .
map elements of value through mapping function force _ text , substitute the result for value .
if autoescape is true ,
for every v in value call the function conditional _ escape with an argument v , append the result in a list , substitute the resulting list for value .
try ,
call the function conditional _ escape with an argument arg , call the method join on the result with an argument value ,
substitute the result for data. if AttributeError exception is caught ,
return value .
call the function mark _ safe with an argument data , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
define the function last with an argument value .
try ,
return last element of value .
if IndexError exception is caught ,
return an empty string .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function length with an argument value .
try ,
return length of value ,
if TypeError or ValueError exceptions are caught ,
return integer 0 .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function length _ is with 2 arguments value and arg .
try ,
if lengths of value and arg are equal , return boolean True , otherwise return boolean False .
if TypeError or ValueError exceptions are caught ,
return an empty string .
decorator function register.filter with an argument is _ safe set to boolean True .
define the function random with an argument value .
call the function random _ module.choice with an argument value , return the result .
decorator function register.filter with 2 arguments string &quot; slice &quot; and is _ safe set to boolean True .
define the function slice _ filter with 2 arguments value and arg .
try ,
bits is an empty list .
split arg by &apos; : &apos; , for every x in result ,
if length of x is equal to integer 0 ,
append None to bits .
if not ,
append x converted to an integer to bits .
slice the list value with unpacked list bits as an argument , return the result .
if TypeError or ValueError exceptions are caught ,
return value .
decorator function register.filter with 2 arguments is _ safe set to boolean True and needs _ autoescape set to boolean True .
define the function unordered _ list with 2 arguments value and autoescape set to None .
if autoescape is true ,
substitute conditional _ escape for escaper .
if not ,
escaper is an identity lambda function .
define the function convert _ old _ style _ list with an argument list _ .
if list _ is not an instance of tuple or list types and length of list _ is not equal to integer 2 ,
return list _ and boolean False .
substitute list _ for first _ item and second _ item , respectively .
if second _ item is an empty list ,
return list with an element first _ item , and boolean True .
try ,
convert second item to an iterable ,
if TypeError exception is caught ,
return list _ and boolean False .
old _ style _ list is boolean True .
new _ second _ item is an empty list .
for every sublist in second _ item ,
call the function convert _ old _ style _ list with an argument sublist , substitute the result for item and old _ style _ list .
if old _ style _ list is false ,
break from the loop execution ,
extend new _ second _ item with item .
if old _ style _ list is true ,
substitute new _ second _ item with second _ item .
return list with 2 elements : first _ item and second _ item , and old _ style _ list .
define the function _ helper with 2 arguments list and tabs set to integer 1 .
indent contain tabs number of tab character .
output is an empty list .
substitute length of list _ for list _ length .
i is integer 0 .
while i is smaller than list _ length ,
substitute i-th element of list for title .
sublist is an empty string .
sublist _ item is None .
if title is an instance of list or tuple ,
substitute title for sublist _ item .
title is an empty string .
otherwise if i is smaller than list _ length decremented by one ,
substitute ( i + 1 ) -th element of list _ for next _ item .
if next _ item is true and next _ item is an instance of list or tuple type ,
substitute next _ item for sublist _ item .
increment i by integer 1 .
if sublist _ item is true ,
call the function _ helper with 2 arguments : sublist _ item and tabs incremented by 1 , substitute the result for sublist .
sublist is an string &apos; \ n % s &lt; ul &gt; \ n % s \ n % s &lt; / ul &gt; \ n % s &apos; , where every &apos; % s &apos; is replaced with indent , sublist , indent and indent , respectively .
substitute every &apos; % s &apos; in string &apos; % s &lt; li &gt; % s % s &lt; / li &gt; &apos; with indent , with result of the function escaper called with an argument :
result of the function force _ text called with an argument title , and with sublist , append the string to output. increment i by 1 .
join elements of output into a string , separated with newlines , return the result .
call the function convert _ old _ style _ list with an argument value , substitute the result for value and converted , respectively .
call the function _ helper with an argument value , use it as an argument for the call to the function mark _ safe , return the result .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function add with 2 arguments value and arg .
try ,
convert value and arg into a integers , return their sum .
if TypeError or ValueError exceptions are caught ,
try ,
sum value and arg , return the result .
if Exception exception is caught ,
return an empty string .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function get _ digit with 2 arguments value and arg .
try ,
convert arg to an integer .
convert value to an integer .
if ValueError exception is caught ,
return value .
if arg is smaller than integer 1 ,
return value .
try ,
convert value into a string , take character at the negative arg index , convert it into an integer , return it .
if IndexError exception is caught ,
return integer 0 .
decorator function register.filter with 2 arguments expects _ localtime set to boolean True and is _ safe set to boolean False .
define the function date with 2 arguments value and arg set to None .
if vale is None or an empty string ,
return an empty string .
if arg is None ,
substitute settings.DATE _ FORMAT for arg .
try ,
call the method formats.time _ format with 2 arguments : value and arg , return the result .
if AttributeError exception is caught ,
try ,
format value into printable data representation with formating rules arg , return the result .
if AttributeError exception is caught ,
return an empty string .
decorator function register.filter with 2 arguments expects _ localtime set to boolean True and is _ safe set to boolean False .
define the function time with 2 arguments value and arg set to None .
if vale is None or an empty string ,
return an empty string .
if arg is None
substitute settings.TIME _ FORMAT for arg .
try ,
call the method formats.time _ format with 2 arguments : value and arg , return the result .
if AttributeError exception is caught ,
try ,
call the function time _ format with 2 arguments : value and arg , return the result .
if AttributeError exception is caught ,
return an empty string .
decorator function register.filter with 2 arguments string &quot; timesince &quot; and is _ safe set to boolean False .
define the function timesince _ filter with 2 arguments value and arg set to None .
if value is false ,
return an empty string .
try ,
if arg is true ,
call the function timesince with 2 arguments : value and arg , return the result .
call the function timesince with an argument value , return the result .
if TypeError or ValueError exceptions are caught ,
return an empty string .
decorator function register.filter with 2 arguments string &quot; timeuntil &quot; and is _ safe set to boolean False .
define the function timeuntil _ filter with 2 arguments value and arg set to None .
if value is false ,
return an empty string .
try ,
call the function timeuntil with 2 arguments value and arg , return the result .
if TypeError or ValueError exceptions are caught ,
return an empty string .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function default with 2 arguments value and arg .
return value , if it is None return arg .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function default _ if _ none with 2 arguments value and arg .
if value is None ,
return arg .
return value .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function divisibleby with 2 arguments value and arg .
convert value and arg to integers , if value is divisible by arg , return True , otherwise return boolean False .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function yesno with 2 arguments value and arg set to None .
if arg is None
call the function ugettext with string &apos; yes , no , maybe &apos; as an argument , substitute the result for arg .
split arg by &apos; , &apos; , substitute the result for bits .
if length of bits is lesser than integer 2 ,
return value .
try ,
assign bits elements to yes , no and maybe , respectively .
if ValueError exception is caught ,
substitute first , second and second elements of bits for yes , no , maybe , respectively .
if value is None ,
return maybe .
if value is true ,
return yes .
return no .
decorator function register.filter with an argument is _ safe set to boolean True .
define the function filesizeformat with an argument bytes .
try ,
convert bytes to floating point number , substitute it for bytes .
if TypeError , ValueError or UnicodeDecodeError exceptions are caught ,
call the function ungettext with 3 arguments : string &quot; % ( size ) d byte &quot; , string &quot; % ( size ) d bytes &quot; and 0 , &apos; % ( size ) d &apos; is replaced with 0 ,
substitute the result for value. call the function avoid _ wrapping with an argument value , return the result .
filesize _ number _ format is an lambda function with an argument value , return value is the result of the method formats.number _ format ,
called with 2 arguments : value rounded to 1 decimal point and integer 1. move integer 1 left for 10 bits , substitute the result for KB .
move integer 1 left for 20 bits , substitute the result for MB .
move integer 1 left for 30 bits , substitute the result for GB .
move integer 1 left for 40 bits , substitute the result for TB .
move integer 1 left for 50 bits , substitute the result for PB .
if bytes is smaller than KB ,
call the function ugettext with 3 arguments , string &quot; % ( size ) d byte &quot; , string &quot; % ( size ) d bytes &quot; and bytes ,
replace &apos; % ( size ) d with bytes , substitute the result for value. otherwise if bytes is smaller than MB ,
call the function ugettext with an argument string &quot; % s KB &quot; , substitute &apos; % s &apos; with the result of the call to the function ,
filesize _ number _ format with result of division of bytes by KB as an argument , substitute the result for value. otherwise if bytes is smaller than GB ,
call the function ugettext with an argument string &quot; % s MB &quot; , substitute &apos; % s &apos; with the result of the call to the function ,
filesize _ number _ format with result of division of bytes by MB as an argument , substitute the result for value. otherwise if bytes is smaller than TB ,
call the function ugettext with an argument string &quot; % s GB &quot; , substitute &apos; % s &apos; with the result of the call to the function ,
filesize _ number _ format with result of division of bytes by GB as an argument , substitute the result for value. otherwise if bytes is smaller than PB ,
call the function ugettext with an argument string &quot; % s TB &quot; , substitute &apos; % s &apos; with the result of the call to the function ,
filesize _ number _ format with result of division of bytes by TB as an argument , substitute the result for value. if not ,
call the function ugettext with an argument string &quot; % s PB &quot; , substitute &apos; % s &apos; with the result of the call to the function ,
filesize _ number _ format with result of division of bytes by PB as an argument , substitute the result for value. call the function avoid _ wrapping with an argument value , return the result .
decorator function register.filter with an argument is _ safe set to boolean False .
define the function pluralize with 2 arguments value and arg set to character &apos; s &apos; .
if &apos; , &apos; is not contained in arg ,
append arg to &apos; , &apos; , substitute the result for arg .
split arg by &apos; , &apos; , substitute the result for bits.s
if length of bits is greater than integer 2 ,
return an empty string .
substitute first 2 elements of bits for singular _ suffix and plural _ suffix , respectively .
try ,
convert value to an floating point number if it is not equal to integer 1 ,
return plural _ suffix .
if ValueError exception is caught ,
do nothing ,
if TypeError exception is caught ,
try ,
if length of value is not equal to integer 1 ,
return plural _ suffix .
if TypeError exception is caught ,
do nothing ,
return singular _ suffix .
decorator function register.filter with 2 arguments string &quot; phone2numeric &quot; and is _ safe set to boolean True .
define the function phone2numeric _ filter with an argument value .
call the function phone2numeric with an argument value , return the result .
decorator function register.filter with an argument is _ safe set to boolean True .
define the function pprint with an argument value .
try ,
call the function pformat with an argument value , return the result .
if Exception , renamed to e , exception is caught ,
return an string &quot; Error in formatting : % s &quot; , replace &apos; % s &apos; with result of the function force _ text ,
from _ _ future _ _ import unicode _ literals into default name space .
import module os .
import module sys .
import module re .
from datetime import datetime into default name space .
from itertools import groupby and cycle as itertools _ cycle into default name space .
import module warnings .
from django.conf import settings into default name space .
from django.template.base import Node , NodeList , Template , Context , Library , TemplateSyntaxError , VariableDoesNotExist ,
validTemplateLibrary , BLOCK _ TAG _ START , BLOCK _ TAG _ END , VARIABLE _ TAG _ START , VARIABLE _ TAG _ END , SINGLE _ BRACE _ START , SINGLE _ BRACE _ END , COMMENT _ TAG _ START , COMMENT _ TAG _ END , VARIABLE _ ATTRIBUTE _ SEPARATOR , get _ library , token _ kwargs , kwarg _ re and render _ value _ in _ context. from django.template.smartif import IfParser and Literal into default name space .
from django.template.defaultfilters import date into default name space .
from django.utils.deprecation import RemovedInDjango20Warning into default name space .
from django.utils.encoding import force _ text and smart _ text into default name space .
from django.utils.safestring import mark _ safe into default name space .
from django.utils.html import format _ html into default name space .
from django.utils import six into default name space .
from django.utils import timezone into default name space .
register is an instance of Library class .
derive the class AutoEscapeControlNode from Node base class .
define the method _ _ init _ _ with 3 arguments : self , setting and nodelist .
substitute setting and nodelist for self.setting and self.nodelist , respectively .
define the method render with 2 arguments : self and context .
substitute context.autoescape for old _ setting .
substitute self.setting for context.autoescape.
call the method self.nodelist.render with an argument context , substitute the result for output .
substitute old _ setting for context.autoescape.
if self.setting is true ,
call the function mark _ safe with an argument output .
if not ,
return output .
derive the class CommentNode from Node base class .
define the method render with 2 arguments : self and context .
return an empty string ,
derive the class CsrfTokenNode from Node base class .
define the method render with 2 arguments : self and context .
get the value under the &apos; csrf _ token &apos; key of the context dictionary , if it exists substitute the result for csrf _ token ,
if not csrf _ token is None. if csrf _ token is true ,
if csrf _ token equals string &apos; NOTPROVIDED &apos; ,
call the function format _ html with an argument empty string , return the result .
if not ,
call the function format _ html with 2 arguments : string &quot; &lt; input type = &apos; hidden &apos; name = &apos; csrfmiddlewaretoken &apos; value = &apos; { 0 } &apos; / &gt; &quot; ,
and csrf _ token , return the result. if not ,
if settings.DEBUG is true ,
call the function warnings.warn with an argument string &quot; A { % csrf _ token % } was used in a template , but the context did not provide the value . This is usually caused by not using RequestContext . &quot; .
return an empty string ,
derive the class CycleNode from Node base class .
define the method _ _ init _ _ with 4 arguments : self , cyclevars , variable _ name set to None and silent set to boolean False .
substitute cyclevars for self.cyclevars.
substitute variable _ name for self.variable _ name .
substitute silent for self.silent.
define the method render with 2 arguments : self and context .
if self is not contained in context.render _ context ,
call the function itertools _ cycle with an argument self.cyclevars , substitute the result for value under the self dictionary context.render _ context .
get the value under the self key of the context.render _ context dictionary , substitute it for cycle _ iter .
call the function next with an argument cycle _ iter , call the method resolve on the result with an argument context , substitute the result for value .
if self.variable _ name is true .
substitute value for value under the self.variable _ name key of the context dictionary .
if self.silent is true ,
return an empty string ,
call the function render _ value _ in _ context with 2 arguments : value and context , return the result .
derive the class DebugNode from Node base class .
define the method render with 2 arguments : self and context .
from pprint import pformat .
output is an list with initial elements generated with call to the function pformat with an argument val , for every val in context .
append 2 consecutive newlines to output .
call the function pformat with an argument sys.modules , append the result for output .
join elements of output into a string , return the result .
derive the class FilterNode from Node base class .
define the method _ _ init _ _ with 3 arguments : self , filter _ expr and nodelist ) .
substitute filter _ expr and nodelist for self.filter _ expr and self.nodelist , respectively .
define the method render with 2 arguments : self and context .
call the method self.nodelist.render with an argument context , substitute the result output .
call the method context.push with an argument var set to output , with the result perform ,
call the function self.filter _ expr.resolve with an argument context , return the result .
derive the class FirstOfNode from Node base class .
define the method _ _ init _ _ with 2 arguments : self and variables .
substitute variables for self.vars.
define the method render with 2 arguments : self and context .
for every var in self.vars ,
call the method var.resolve with 2 arguments : context and True , substitute the result for value .
if value is true ,
call the function render _ value _ in _ context with 2 arguments : value and context , return the result .
return an empty string ,
derive the class ForNode from Node base class .
child _ nodelists is an tuple with 2 elements : strings &apos; nodelist _ loop &apos; and &apos; nodelist _ empty &apos; .
define the method _ _ init _ _ with 6 arguments : self , loopvars , sequence , is _ reversed , nodelist _ loop and nodelist _ empty set to None .
substitute loopvars and sequence for self.loopvars and self.sequence , respectively .
substitute is _ reversed for self.is _ reversed .
substitute nodelist _ loop for self.nodelist _ loop .
if nodelist _ empty is None ,
self.nodelist _ empty is an instance of NodeList class .
if not ,
substitute nodelist _ empty for self.nodelist _ empty .
define the method _ _ repr _ _ with an argument self .
if self.is _ reversed is true , substitute reversed _ text is an string &apos; reversed &apos; , if not , reversed _ text is an empty string .
return an string &quot; &lt; For Node : for % s in % s , tail _ len : % d % s &gt; &quot; , substitute &apos; % s &apos; with elements of self.loopvars joined into a string ,
separated with string &apos; , &apos; , substitute &apos; % s &apos; with self.sequence , substitute &apos; % d &apos; with length of self.nodelist _ loop , substitute &apos; % s &apos; with reversed _ text. define the method _ _ iter _ _ with an argument self .
for every node in self.nodelist _ loop ,
yield node .
for every node in self.nodelist _ empty ,
yield node .
define the method render with 2 arguments : self and context .
if string &apos; forloop &apos; is contained in context ,
substitute value under the the &apos; forloop &apos; key of the context dictionary for parentloop .
if not ,
parentloop is an empty dictionary .
call the method context.push , with the result perform ,
try ,
call the method self.sequence.resolve with 2 arguments : context and boolean True , substitute the result for values .
if VariableDoesNotExist exception is caught ,
values is an empty list .
if values is None ,
if values is None ,
if values has an attribute &apos; _ _ len _ _ &apos; ,
convert values into a list , substitute it for value .
substitute length of values for len _ values .
if len _ values is smaller than integer 1 ,
call the method self.nodelist _ empty.render with an argument context , return the result .
nodelist is an empty list .
if self.is _ reversed is true ,
reverse elements order of values .
substitute length of self.loopvars for num _ loopvars .
if num _ loopvars is greater than integer 1 , unpack is an boolean True , otherwise is an boolean False .
loop _ dict and value under the &apos; forloop &apos; key of the context dictionary are dictionaries with an entry : parentloop for &apos; parentloop &apos; .
for every i and item in enumerated iterable values ,
substitute i for value under the &apos; counter0 &apos; key of the loop _ dict dictionary .
substitute i incremented by 1 for value under the &apos; counter &apos; key of the loop _ dict dictionary .
subtract i from len _ values , substitute the result for value under the &apos; revcounter &apos; key of the loop _ dict dictionary .
subtract i from len _ values , decrement the result by integer 1 , substitute it for value under the &apos; revcounter &apos; key of the loop _ dict dictionary .
if i is equal to integer 0 , value under the &apos; first &apos; key of the loop _ dict dictionary is boolean True , otherwise it is False .
if i is equal to len _ values decremented by 1 , value under the &apos; last &apos; key of the loop _ dict dictionary is boolean True , otherwise it is False .
pop _ context is boolean False .
if unpack is true ,
if item is not an instance of list or tuple class ,
len _ item is integer 1 .
if not ,
substitute length of item for len _ item .
if num _ loopvars is not equal to len _ item ,
call the function warnings.warn with 2 arguments : string &quot; Need { 0 } values to unpack in for loop ; got { 1 } . This will raise an
exception in Django 2.0 . &quot; formated with num _ loopvars and len _ item , respectively , and RemovedInDjango20Warning. try ,
zip self.loopvars and item is a list to tuples , convert the result to an dictionary , substitute it for unpacked _ vars .
if TypeError exception is caught ,
do nothing .
if not ,
pop _ context is boolean True .
call the method context.update with an argument unpacked _ vars .
if not ,
substitute item for value under the first element of self.loopvars key of the context dictionary .
if settings.TEMPLATE _ DEBUG is true ,
for every node in self.nodelist _ loop ,
try ,
call the method node.render with an argument context , append the result to the nodelist .
if Exception , renamed to e , exception is caught ,
if e doesnt have an &apos; django _ template _ source &apos; attribute ,
substitute node.source for e.django _ template _ source .
raise an exception .
if not ,
for every node in self.nodelist _ loop ,
call the method node.render with an argument context , append the result to the nodelist .
if pop _ context is true ,
remove the first element of context .
call the function mark _ safe with an arguments : for every n in nodelist results of the function force _ text called with an argument n , joined in a string , return the result .
derive the class IfChangedNode from Node base class .
child _ nodelists is a tuple with 2 initial elements : strings &apos; nodelist _ true &apos; and &apos; nodelist _ false &apos; .
define the method _ _ init _ _ with 4 arguments : self , nodelist _ true , nodelist _ false and unpacked list varlist .
substitute nodelist _ true and nodelist _ false for self.nodelist _ true and self.nodelist _ false , respectively .
substitute varlist for self.varlist.
define the method render with 2 arguments : self and context .
call the method self . _ get _ context _ stack _ frame with an argument context , substitute the result for state _ frame .
if self is not contained in state _ frame ,
value under the self key of state _ frame dictionary is None .
nodelist _ true _ output is None .
try ,
if self . _ varlist is true ,
compare _ to is an list with elements generated by calling the var.resolve method with 2 arguments : context and boolean True ,
for every var in self . _ varlist. if not ,
call the method self.nodelist _ true.render with an argument context , assign the result to compare _ to and nodelist _ true _ output .
if VariableDoesNotExist exception is caught ,
compare _ to is None .
if compare _ to is not equal to value under the self key of state _ frame .
substitute compare _ to for value under the state _ frame dictionary under the self key .
return nodelist _ true _ output , if true , if not call the method self.nodelist _ true.render with an argument context and return the result .
otherwise if self.nodelist _ false is true ,
call the method self.nodelist _ false.render with an argument context , return the result .
return an empty string ,
define the method _ get _ context _ stack _ frame with 2 arguments : self and context .
if string &apos; forloop &apos; is contained in context ,
return value under the &apos; forloop &apos; key of the context dictionary .
if not ,
return context.render _ context .
derive the class IfEqualNode from Node base class .
child _ nodelists is a tuple with 2 elements strings &apos; nodelist _ true &apos; and &apos; nodelist _ false &apos; .
define the method _ _ init _ _ with 6 arguments : ( self , var1 , var2 , nodelist _ true , nodelist _ false and negate .
substitute var1 and var2 for self.var1 and self.var2 , respectively .
substitute nodelist _ true and nodelist _ false for self.nodelist _ true and self.nodelist _ false , respectively .
substitute negate for self.negate.
define the method _ _ repr _ _ with an argument self .
return an string &quot; &lt; IfEqualNode &gt; &quot; .
define the method render with 2 arguments : self and context .
call the method self.var1.resolve with 2 arguments : context and boolean True , substitute the result for val2 .
call the method self.var2.resolve with 2 arguments : context and boolean True , substitute the result for val2 .
if self.negate is true and val1 is not equal to val2 , or if , self.negate is false and val1 equals val2 ,
call the method self.nodelist _ true.render with an argument context , return the result .
call the method self.nodelist _ false.render with an arguments context , return the result .
derive the class IfNode from Node base class .
define the method _ _ init _ _ with 2 arguments : self and conditions _ nodelists .
substitute conditions _ nodelists for self.conditions _ nodelists .
define the method _ _ repr _ _ with an argument self .
return an string &quot; &lt; IfNode &gt; &quot; .
define the method _ _ iter _ _ with an argument self .
for every _ and nodelist in self.conditions _ nodelists ,
for every node in nodelist ,
yield node as an return value of a generator .
property decorator ,
define the method nodelist with an argument self .
return an instance of a NodeList class , created with arguments node , for every node in nodelist ,
and for every _ , nodelist in self.conditions _ nodelists. define the method render with 2 arguments : self and context .
for every condition and nodelist in self.conditions _ nodelists ,
if condition is not None ,
try ,
call the method condition.eval with an argument context , substitute the result for match .
if VariableDoesNotExist exception is caught ,
match is None .
if not ,
match is boolean True .
if match is true ,
call the method nodelist.render with an argument context , return the result .
return an empty string ,
derive the class RegroupNode from Node base class .
define the method _ _ init _ _ with 4 arguments : self , target , expression and var _ name .
substitute target and expression for self.target and self.expression , respectively .
substitute var _ name for self.var _ name .
define the method resolve _ expression with 3 arguments : self , obj and context .
substitute obj for value under the self.var _ name key of the context dictionary .
call the method self.expression.resolve with 2 arguments : context and boolean True , return the result .
define the method render with 2 arguments : self and context .
call the method self.target.resolve with 2 arguments : context and boolean True , substitute it for obj _ list .
if obj _ list is None ,
value under the self.var _ name key of the context dictionary is an empty list .
return an empty string ,
value under the self.var _ name key of the context dictionary is an list with dictionary elements with 2 entries :
key for &apos; grouper &apos; and val converted into a list for &apos; list &apos; , for every key and val in result of the function groupby , called with 2 arguments : obj _ list and lambda function with an argument obj and return value as a result of the function , self.resolve _ expression called with 2 arguments obj and context. return an empty string ,
define the function include _ is _ allowed with an argument filepath .
return the absolute path of file path filepath , substitute it for filepath .
for every root in settings.ALLOWED _ INCLUDE _ ROOTS ,
if filepath starts with root ,
return boolean True .
return boolean False .
derive the class SsiNode from Node base class .
define the method _ _ init _ _ with 3 arguments : self , filepath and parsed .
substitute filepath for self.filepath.
substitute parsed for self.parsed.
define the method render with 2 arguments : self and context .
call the function self.filepath.resolve with an argument context , substitute the result for filepath .
call the function include _ is _ allowed with an argument filepath , if it evaluates to false ,
if settings.DEBUG is true ,
return string &quot; &#91; Didn &apos;t have permission to include file &#93; &quot; .
if not ,
return an empty string ,
try ,
open filepath file in read mode , with file descriptor as fp , perform ,
read file fp , substitute the read data for output .
if IOError exception is caught ,
output is an empty string .
if self.parsed is true ,
try ,
t is an instance of Template class , created with 2 arguments output and name set to filepath .
call the function t.render with an argument context , return the result .
if TemplateSyntaxError , renamed to e , exception is caught ,
if settings.DEBUG is true ,
return an string &quot; &#91; Included template had syntax error : % s &#93; &quot; , where &apos; % s &apos; is replaced with e .
if not ,
return an empty string ,
return output .
derive the class LoadNode from Node base class .
define the method render with 2 arguments : self and context .
return an empty string ,
derive the class NowNode from Node base class .
define the method _ _ init _ _ with 2 arguments : self and format _ string .
substitute format _ string for self.format _ string .
define the method render with 2 arguments : self and context .
if settings.USE _ TZ is true substitute result of the function timezone.get _ current _ timezone for tzinfo , if not tzinfo is None .
call the function date with 2 arguments : result of the call to the function datetime.now with an argument tz set to tzinfo ,
and self.format _ string , return the result. derive the class SpacelessNode from Node base class .
define the method _ _ init _ _ with 2 arguments : self and nodelist .
substitute nodelist for self.nodelist.
define the method render with 2 arguments : self and context .
from django.utils.html import strip _ spaces _ between _ tags .
call the method self.nodelist.render with an argument context , strip the result of the surrounding whitespaces ,
use the result as an argument for the call to the function strip _ spaces _ between _ tags , return the result. derive the class TemplateTagNode from Node base class .
mapping is an dictionary with 8 initial entries : BLOCK _ TAG _ START for &apos; openblock &apos; , BLOCK _ TAG _ END for &apos; closeblock &apos; ,
VARIABLE _ TAG _ START for &apos; openvariable &apos; , VARIABLE _ TAG _ END for &apos; closevariable &apos; , SINGLE _ BRACE _ START for &apos; openbrace &apos; , SINGLE _ BRACE _ END &apos; closebrace &apos; , COMMENT _ TAG _ START &apos; opencomment &apos; and COMMENT _ TAG _ END for &apos; closecomment &apos; . define the method _ _ init _ _ with 2 arguments : self and tagtype .
substitute tagtype for self.tagtype.
define the method render with 2 arguments : self and context .
call the method self.mapping.get with 2 arguments : self.tagtype and an empty list , return the result .
derive the class URLNode from Node base class .
define the method _ _ init _ _ with 5 arguments : self , view _ name , args , kwargs and asvar .
substitute view _ name for self.view _ name .
substitute args for self.args.
substitute kwargs for self.kwargs.
substitute asvar for self.asvar.
define the method render with 2 arguments : self and context .
from django.core.urlresolvers import reverse , NoReverseMatch .
for every arg in self.args call the method arg.resolve with an argument context , substitute the results in a list for args .
kwargs is an dictionary , populated for every k and v in result of the method self.kwargs.items with :
result of the call to the method v.resolve with an argument context , for result of the function smart _ text called with 2 arguments k and string &apos; ascii &apos; . call the method self.view _ name.resolve with an argument context , substitute the result for view _ name .
url is an empty string .
try ,
call the function reverse with 4 arguments : view _ name , args as args , kwargs as kwargs and current _ app as context.current _ app ,
substitute the result for url. if NoReverseMatch exception is caught ,
call the function sys.exc _ info with an argument exc _ info .
if settings.SETTINGS _ MODULE is true ,
split settings.SETTINGS _ MODULE by &apos; .&apos; character , substitute the first element of the result for project _ name .
try ,
call the function reverse with 4 arguments : concatenated project _ name , character &apos; .&apos; and view _ name , args as args , kwargs as kwargs ,
current _ app as context.current _ app , substitute the result for url. if NoReverseMatch exception is caught ,
if self.asvar is None ,
call the function six.reraise with unpacked list exc _ info as an argument .
if not ,
if self.asvar is None ,
raise an exception .
if self.asvar is true ,
substitute url for value under the self.asvar key of context dictionary .
return an empty string .
if not ,
return url .
derive the class VerbatimNode from Node base class .
define the method _ _ init _ _ with 2 arguments : self and content .
substitute content for self.content.
define the method render with 2 arguments : self and context .
return self.content
derive the class WidthRatioNode from Node base class .
define the method _ _ init _ _ with 5 arguments : self , val _ expr , max _ expr , max _ width and asvar set to None .
substitute val _ expr for self.val _ expr .
substitute max _ expr for self.max _ expr .
substitute max _ width for self.max _ width .
substitute asvar for self.asvar.
define the method render with 2 arguments : self and context .
try ,
call the method self.val _ expr.resolve with an argument context , substitute the result for value .
call the method self.max _ expr.resolve with an argument context , substitute the result for max _ value .
call the method self.max _ width.resolve with an argument context , convert the result to an integer and substitute it for max _ width .
if VariableDoesNotExist exception is caught ,
return an empty string .
if ValueError or TypeError exceptions are caught ,
raise an TemplateSyntaxError exception with an argument string &quot; widthratio final argument must be a number &quot; .
try ,
convert value into an floating point number , substitute it for value .
convert max _ value into an floating point number , substitute it for max _ value .
divide value by max _ value , multiply the result with max _ width , substitute it for ratio .
round up radio , convert it to an integer and the convert it to a string and substitute the result for result .
if ZeroDivisionError exception is caught ,
return an string &apos; 0&apos; .
if ValueError , TypeError or OverflowError exceptions are caught ,
return an empty string ,
if self.asvar is true ,
substitute result for value under the self.asvar key of context dictionary .
return an empty string ,
if not ,
return result .
derive the class WithNode from Node base class .
define the method _ _ init _ _ with 5 arguments : self , var , name , nodelist and extra _ context set to None .
substitute nodelist for self.nodelist.
if extra _ context is true , substitute it for self.extra _ context , if not self.extra _ context is an empty dictionary .
if name is true ,
substitute var for value under the name key of the self.extra _ context dictionary .
define the method _ _ repr _ _ with an argument self .
return a string &quot; &lt; WithNode &gt; &quot;
define the method render with 2 arguments : self and context .
values is an dictionary created with result of the method val.resolve called with an argument context , for key ,
for every key and val in return value of the function six.iteritems called with an arguments self.extra _ context. call the method context.push with an argument unpacked dictionary values , with the result as an argument ,
call the method self.nodelist.render with an argument context , return the result .
register.tag decorator ,
define the function autoescape with 2 arguments : parser and token .
call the method token.contents.split , substitute the result for args .
if length of args is not equal to integer 2 ,
raise an TemplateSyntaxError with an argument string &quot; &apos; autoescape &apos; tag requires exactly one argument . &quot; .
substitute first element of args for arg .
if arg is not string &apos; on &apos; or &apos; off &apos; ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; autoescape &apos; argument should be &apos; on &apos; or &apos; off &apos; &quot; .
call the method parser.parse with an argument tuple with an element string &apos; endautoescape &apos; , substitute the result for nodelist .
call the method parser.delete _ first _ token .
return an instance of AutoEscapeControlNode with 2 arguments : boolean exception arg equals to string &apos; on &apos; , and nodelist .
register.tag decorator ,
define the function comment with 2 arguments : parser and token .
call the method parser.skip _ past with an argument string &apos; endcomment &apos; .
return an instance of CommentNode class .
register.tag decorator ,
define the function cycle with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result for args .
if length of args is smaller than integer 2 ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; cycle &apos; tag requires at least two arguments &quot; .
if &apos; , &apos; is contained in second element of args ,
split first element of args by &apos; , &apos; , convert separated elements to strings , substitute the first 2 elements of the result ,
for second and third element of args , respectively. if length of args equals integer 2 ,
substitute second element of args for name .
if parser doesnt have an &apos; _ namedCycleNodes &apos; attribute ,
raise an TemplateSyntaxError exception with an argument string &quot; No named cycles in template . &apos; % s &apos; is not defined &quot; ,
where &apos; % s &apos; is replaced with name. if name is not contained in parser . _ namedCycleNodes ,
raise an TemplateSyntaxError exception with an argument string &quot; Named cycle &apos; % s &apos; does not exist &quot; , where &apos; % s &apos; is replaced with name .
get the index name , of the parser . _ namedCycleNodes , return the result .
as _ form is boolean False .
if length of args is greater than 4 .
if third element from the end of the args equals string &apos; as &apos; ,
if last element of args is not equal to a string &quot; silent &quot; ,
raise an TemplateSyntaxError exception with an argument string &quot; Only &apos; silent &apos; flag is allowed after cycle &apos;s name , not &apos; % s &apos; . &quot; ,
where &apos; % s &apos; is replaced with last element of args. as _ form is boolean True
silent is boolean True .
substitute args , without the last element for args .
if second from the end element of args equals a string &apos; as &apos; ,
as _ form is boolean True .
silent is boolean False .
if as _ form is true ,
substitute the last element of args for name .
call the function parser.compile _ filter with an argument arg for every arg in args from the index 1 to the index -2 ,
append the results into a list , substitute it for value. node is an instance CycleNode class , created with values , name and silent set to silent .
if parser doesnt have an &apos; _ namedCycleNodes &apos; attribute ,
parser . _ namedCycleNodes is an empty dictionary .
substituet node for value under the name key of the parser . _ namedCycleNodes dictionary .
if not ,
call the function parser.compile _ filter with an argument arg for every arg in args from first element to the end ,
append the results into a list , substitute it for value. node is an instance of CycleNode class , created wiht an argument values .
return node .
register.tag decorator ,
define the function csrf _ token with 2 arguments : parser and token .
return an instance of CsrfTokenNode class .
register.tag decorator ,
define the function debug with 2 arguments : parser and token .
return an instance of DebugNode class .
register.tag decorator function with an argument &apos; filter &apos; ,
define the function do _ filter with 2 arguments : parser and token .
split into two parts token.contents by None , substitute the parts for _ and rest , respectively .
call the method parser.compile _ filter with an argument string &quot; var &#124; % s &quot; , where &apos; % s &apos; is replaced with rest , substitute the result for filter _ expr .
for every func and unused in filter _ expr.filters ,
get &apos; _ filter _ name &apos; attribute of the func object , if it exists , substitute it for filter _ name , if not , filter _ name is None .
if every filter _ name in strings &apos; escape &apos; or &apos; safe &apos; ,
raise an TemplateSyntaxError exception with an argument string &apos; &quot; filter % s &quot; is not permitted . Use the &quot; autoescape &quot; tag instead . &apos; ,
where &apos; % s &apos; is replaced with filter _ name. call the method parser.parse with an argument tuple with an element string &apos; endfilter &apos; , substitute the result for nodelist .
call the method parser.delete _ first _ token .
return a class instance FilterNode , called with an arguments filter _ expr and nodelist .
register.tag decorator ,
define the function firstof with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result without the first element for bits .
if length of bits is smaller than integer 1 ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; firstof &apos; statement requires at least one argument &quot; .
return an instance of FirstOfNode class , created with an argument , result of the method parser.compile _ filter called with bit ,
for every bit in bits. register.tag decorator function with an argument &apos; for &apos; ,
define the function do _ for with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result .
if length bits is smaller than intger 4 ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; for &apos; statements should have at least four words : % s &quot; ,
where &apos; % s &apos; is replaced with token.contents. assign the string &apos; reversed &apos; to is _ reversed and bits last elements .
if index is negative inter 3 , if is _ reversed , substitute it for in _ index , if not , in _ index is negative integer 2 .
if in _ index-th element of bits equals to string &apos; in &apos; ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; for &apos; statements should use the format &apos; for x in y &apos; : % s &quot; ,
where &apos; % s &apos; is replaced with token.contents. call the method re.split with 2 arguments : raw string &apos; * , * &apos; and elements of bits from 1 index to in _ index index ,
joined into a string , separated by whitespaces , substitute the result for loopvars. for every var in loopvars ,
if var is false or whitespaces are contained in var ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; for &apos; tag received an invalid argument : % s &quot; ,
where &apos; % s &apos; is replaced with token.contents. call the method parser.compile _ filter with an argument , in _ index incremented by one , and used to index parser.compile _ filter ,
substitute the result for sequence. call the method parser.parse with an argument tuple with 2 elements strings &apos; empty &apos; and &apos; endfor &apos; , substitute the result for nodelist _ loop .
call the method parser.next _ token , substitute the result for token .
if token.contents equals string &apos; empty &apos; ,
call the method parser.parse with an argument tuple with an element string &apos; endfor &apos; , substitute the result for nodelist _ empty .
call the method parser.delete _ first _ token .
if not ,
nodelist _ empty is None .
return an instance of ForNode class , created with 5 arguments : loopvars , sequence , is _ reversed , nodelist _ loop and nodelist _ empty .
define the function do _ ifequal with 2 arguments : parser , token and negate .
call the method token.split _ contents , convert the result into a list and substitute it for bits .
if length of bits is not equal to integer 3 ,
raise an TemplateSyntaxError exception with an argument string &quot; % r takes two arguments &quot; ,
where &apos; % r &apos; is replaced with first element of bits. append first element of bits to &apos; end &apos; . substitute the result for end _ tag .
call the method parser.parse with an argument tuple with an element string &apos; else &apos; and end _ tag , substitute the result for nodelist _ true .
call the method parser.next _ token , substitute the result for token .
if token.contents equals a string &apos; else &apos; ,
call the method parser.parse with an argument tuple with an element end _ tag , substitute the result for nodelist _ false .
call the method parser.delete _ first _ token .
if not ,
nodelist _ false is an instance of NodeList class .
call the method parser.compile _ filter with an argument , second element of bits , substitute the result for val1 .
call the method parser.compile _ filter with an argument , third element of bits , substitute the result for val2 .
return an instance of IfEqualNode class , created with 5 arguments : val1 , val2 , nodelist _ true , nodelist _ false and negate .
register.tag decorator ,
define the function ifequal with 2 arguments : parser and token .
call the function do _ ifequal with 3 arguments : parser , token and boolean False , return the result .
register.tag decorator ,
define the function ifnotequal with 2 arguments : parser and token .
call the function do _ ifequal with 3 arguments : parser , token and boolean False , return the result .
derive the class TemplateLiteral from Literal base class .
define the method _ _ init _ _ with 3 arguments : self , value and text .
substitute value for self.value.
substitute text for self.text.
define the method display with an argument self .
return self.text.
define the method eval with 2 arguments : self and context .
call the method self.value.resolve with 2 arguments context and ignore _ failures set to boolean True , return the result .
derive the class TemplateIfParser from IfParser base class .
substitute TemplateSyntaxError for error _ class .
define the method _ _ init _ _ with 4 arguments : self , parser , unpacked list args and unpacked dictionary kwargs .
substitute parser for self.template _ parser .
call the method _ _ init _ _ from the base class of the class TemplateIfParser , with 2 arguments : unpacked list args and unpacked dictionary .
define the method create _ var with 2 arguments : self and value .
return an instance of TemplateLiteral with 2 arguments : result of the function self.template _ parser.compile _ filter ,
called with an argument value and value. register.tag decorator function with an argument &apos; if &apos; ,
define the function do _ if with 2 arguments : parser and token .
call the method token.split _ contents , substitute results without the first element for bits .
call the method parse from the instance of TemplateIfParser class , created with 2 arguments parser and bits , substitute the result for condition .
call the method parser.parse with an argument tuple with 3 elements : strings &apos; elif &apos; , &apos; else &apos; and &apos; endif &apos; , substitute the result for nodelist .
conditions _ nodelists is a list containing tuple with 2 elements condition and nodelist .
call the method parser.next _ token , substitute the result for token .
while token.contents starts with a string &apos; elif &apos; ,
call the method token.split _ contents , substitute results without the first element for bits .
call the method parse from the instance of TemplateIfParser class , created with 2 arguments parser and bits , substitute the result for condition .
call the method parser.parse with an argument tuple with 3 elements strings &apos; elif &apos; , &apos; else &apos; and &apos; endif &apos; , substitute the result for nodelist .
append a tuple with 2 elements : condition and nodelist to conditions _ nodelists .
call the method parser.next _ token , substitute the result for token .
if token.contents equals string &apos; else &apos; ,
call the method parser.parse with an argument tuple with an element string &apos; endif &apos; , substitute the result for nodelist .
append a tuple with 2 elements : None and nodelist to conditions _ nodelists .
call the method parser.next _ token , substitute the result for token .
if token.contents doesn not equals a string &apos; endif &apos; , raise an AssertionError exception ,
return an instance of IfNode class , created with an argument conditions _ nodelists .
register.tag decorator ,
define the function ifchanged with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result for bits .
call the method parser.parse with an argument tuple with 2 elements strings : &apos; else &apos; and &apos; endfilter &apos; , substitute the result for nodelistelse .
call the method parser.next _ token , substitute the result for token .
if token.contents equals string &apos; else &apos; ,
call the method parser.parse with an argument tuple with an element string &apos; endifchanged &apos; , substitute the result for nodelist _ false .
call the method parser.delete _ first _ token .
if not ,
nodelist _ false is an instance of NodeList .
for every bit in elements of bits without the first element , call the method parser.compile _ filter , with an argument bit ,
substitute the list of results for values. return an instance of a class IfChangedNode , created with 3 arguments : nodelist _ true , nodelist _ false and unpacked list values .
register.tag decorator ,
define the function ssi with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result for bits .
parsed is boolean False .
if length of bits is not integer 2 or 3 ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; ssi &apos; tag takes one argument : the path to the file to be included &quot; .
if length of bits equals integer 3 ,
if third element of bits equals a string &apos; parsed &apos; ,
parsed is boolean True .
if not ,
raise an TemplateSyntaxError exception with an argument string &quot; Second ( optional ) argument to % s tag must be &apos; parsed &apos; &quot; ,
where &apos; % s &apos; is replaced with first element of bits. call the method parser.compile _ filter with second element of bits as an argument , substitute the result for filepath .
return an instance of a SsiNode class , created with 2 arguments : filepath and parsed .
register.tag decorator ,
define the function load with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result for bits .
if length of bits is greater or equal to integer 4 and second last element of bits equals sting &apos; from &apos; ,
try ,
substitute last element of bits for taglib .
call the function get _ library with an argument taglib , substitute the result for lib .
if InvalidTemplateLibrary , renamed to e , exception is caught ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; is not a valid tag library : % s &quot; ,
where &apos; % s &apos; is replaced with taglib and e. if not ,
temp _ lib is an instance of Library class .
for every name in bits from the start index 1 to the end index negative 2 ,
if name is contained in lib.tags ,
substitute value under the name key of the lib.tags dictionary for value under the name key of the temp _ lib.tags dictionary .
if name is contained in lib.filters.
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp _ lib.filters dictionary .
otherwise if name is contained in lib.filters ,
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp _ lib.filters dictionary .
if not ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; is not a valid tag or filter in tag library &apos; % s &apos; &quot; ,
where &apos; % s &apos; is replaced with name and taglib. call the method parser.add _ library with an argument temp _ lib .
if not ,
for every taglib in bits without the first element ,
try ,
call the function get _ library with an argument taglib , substitute the result for lib .
call the method parser.add _ library with an argument lib .
if InvalidTemplateLibrary , renamed to e , exception is caught ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; is not a valid tag library : % s &quot; ,
where &apos; % s &apos; is replaced with taglib and e. return an instance of a LoadNode class .
register.tag decorator ,
define the function now with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result for bits .
if length of bits is not equal to integer 2 ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; now &apos; statement takes one argument &quot; .
substitute second element of bits without the first and last element for format _ string .
return an instance of a NowNode class , created with an argument format _ string .
register.tag decorator ,
define the function regroup with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result for bits .
if length of bits is not equal to integer 6 ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; regroup &apos; tag takes five arguments &quot; .
call the method parser.compile _ filter with an argument first element of bits , substitute the result for target .
if third element of bits is not equal to a string &apos; by &apos; ,
raise an TemplateSyntaxError exception with an argument string &quot; second argument to &apos; regroup &apos; tag must be &apos; by &apos; &quot; .
if fift element of bits is not equal to a string &apos; as &apos; ,
raise an TemplateSyntaxError exception with an argument string &quot; next-to-last argument to &apos; regroup &apos; tag must be &apos; as &apos; &quot; .
substitute sixth element of bits for var _ name .
concatenate var _ name , VARIABLE _ ATTRIBUTE _ SEPARATOR and fourth element of bits , use the result as an argument for the call the method ,
parser.compile _ filter , substitute the result for expression. return an instance of a RegroupNode class , created with 3 arguments target , expression and var _ name .
register.tag decorator ,
define the function spaceless with 2 arguments : parser and token .
call the method parser.parse with an argument tuple with an element string &apos; endspaceless &apos; , substitute the result for nodelist .
call the method parser.delete _ first _ token .
return an instance of a SpacelessNode class , created with an argument nodelist .
register.tag decorator ,
define the function templatetag with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result for bits .
if length of bits is not equal to integer 2 ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; templatetag &apos; statement takes one argument &quot; .
substitute second element of bits for tag .
if tag is not contained in TemplateTagNode.mapping ,
raise an TemplateSyntaxError exception with an argument string &quot; Invalid templatetag argument : &apos; % s &apos; . Must be one of : % s &quot; ,
where &apos; % s &apos; is replaced with tag and TemplateTagNode.mapping converted into a list. return an instance of a TemplateTagNode class , created with an argument tag .
register.tag decorator ,
define the function url with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result for bits .
if length of bits is lesser than integer 2 ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; takes at least one argument ( path to a view ) &quot; ,
where &apos; % s &apos; is replaced with first element of bits. call the method parser.compile _ filter with second element of bits as an argument , substitute the result for viewname .
args is an empty list .
kwargs is an empty dictionary .
asvar is None .
remove first two elements from bits .
if length of bits is greater or equal to intger 2 and second last element of bits is equal to string &apos; as &apos; ,
substitute last element of bits for asvar .
remove last 2 elements from bits .
if length of bits is not zero ,
for every bit in bits ,
call the method kwarg _ re.match with an argument bit , substitute it for match .
if match is true ,
raise an TemplateSyntaxError exception with an argument string &quot; Malformed arguments to url tag &quot; .
call the method match.groups , assign the result to name and value , respectively .
if name is true ,
call the method parser.compile _ filter with an argument value , substitute the result for value under the name key of kwargs dictionary .
if not ,
call the method parser.compile _ filter with an argument value , append the result to args .
return an instance of a URLNode class , created with 4 arguments viewname , args , kwargs and asvar .
register.tag decorator ,
define the function verbatim with 2 arguments : parser and token .
call the method parser.parse with an argument tuple with an element string &apos; endverbatim &apos; , substitute the result for nodelist .
call the method parser.delete _ first _ token .
call the method nodelist.render with an argument , an instance of Context class , use the result as an argument for the creation of ,
an instance of VerbatimNode class , return it. register.tag decorator ,
define the function widthratio with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result for bits .
if length of bits equals integer 4 ,
assign the bits elements to tag , this _ value _ expr , max _ value _ expr and max _ width , respectively .
asvar is None .
otherwise if length of bits equals integer 6 ,
assign the bits elements to tag , this _ value _ expr , max _ value _ expr , max _ width , as _ and asvar .
if as _ is not equal to string &apos; as &apos; ,
raise an TemplateSyntaxError exception with an argument string &quot; Invalid syntax in widthratio tag . Expecting &apos; as &apos; keyword &quot; .
if not ,
raise an TemplateSyntaxError exception with an argument string &quot; widthratio takes at least three arguments &quot; .
return an instance of a class WidthRatioNode , created with 4 arguments : result of the method parser.compile _ filter ,
called with an argument this _ value _ expr , result of the method parser.compile _ filter called with an argument max _ value _ expr , return value of the method parser.compile _ filter called with an argument max _ width and asvar as asvar. register.tag decorator function with an argument &apos; with &apos; ,
define the function do _ with with 2 arguments : parser and token .
call the method token.split _ contents , substitute the result for bits .
substitute bits without the first element for remaining _ bits .
call the function token _ kwargs with 3 arguments : remaining _ bits , parser and support _ legacy set to boolean True , substitute the result for extra _ context .
if extra _ context is false ,
raise an TemplateSyntaxError exception with an argument string &quot; % r expected at least one variable assignment &quot; ,
where &apos; % r &apos; is replaced with first element of bits. if remaining _ bits is true ,
raise an TemplateSyntaxError exception with an argument string &quot; % r received an invalid token : % r &quot; , where &apos; % r &apos; is replaced with ,
first element of bits and first element of remaining _ bits. call the method parser.parse with an argument tuple , with an element string &apos; endwith &apos; , substitute the result for nodelist .
call the method parser.delete _ first _ token .
return an instance of a class WithNode , created with 4 arguments : None , None , nodelist and extra _ context as extra _ context .
from django.core.exceptions import ImproperlyConfigured into default name space .
from django.template.base import Origin , Template , Context and TemplateDoesNotExist into default name space .
from django.conf import settings into default name space .
from django.utils.module _ loading import import _ string into default name space .
from django.utils import six into default name space .
template _ source _ loaders is None .
derive the class BaseLoader from the object base class .
is _ usable is boolean False .
define the method _ _ init _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
do nothing .
define the method _ _ call _ _ with 3 arguments : self , template _ name and template _ dirs set to None .
call the method self.load _ template with 2 arguments : template _ name and template _ dirs , return the result .
define the method load _ template with 3 arguments : self , template _ name and template _ dirs set to None .
call the method self.load _ template _ source with arguments template _ name and template _ dirs , assign the result to source and display _ name .
call the function make _ origin with 4 arguments : display _ name , self.load _ template _ source , template _ name and template _ dirs ,
substitute the result for origin. try ,
call the function get _ template _ from _ string with 3 arguments : source , origin and template _ name , substitute the result for template .
return template and None .
if TemplateDoesNotExist exception is caught ,
return source and display _ name .
define the method load _ template _ source with 3 arguments : self , template _ name and template _ dirs set to None .
raise an NotImplementedError with an argument string &apos; subclasses of BaseLoader must provide a load _ template _ source ( ) method &apos; .
define the method reset with an argument self .
do nothing .
derive the class LoaderOrigin from the Origin base class .
define the method _ _ init _ _ with 5 arguments : self , display _ name , loader , name and dirs .
call the method _ _ init _ _ with an argument display _ name , from the base class of the LoaderOrigin class .
substitute loader , name and dirs for self.loader , self.loadname and self.dirs , respectively .
define the method reload with an argument self .
call the method self.loader with 2 arguments : self.loadname and self.dirs , return the first element of the result .
define the function make _ origin with 4 arguments : display _ name , loader , name and dirs .
if settings.TEMPLATE _ DEBUG and display _ name are both true ,
return an instance of LoaderOrigin class , created with 4 arguments : display _ name , loader , name and dirs .
if not ,
return None .
define the function find _ template _ loader with an argument loader .
if loader is an instance of tuple or list ,
substitute first element of loader for loader and loader without the first element for args .
if not ,
args is an empty list .
if loader is an instance of six.string _ types ,
call the function import _ string with an argument loader , substitute the result for TemplateLoader .
if TemplateLoader has an attribute &apos; load _ template _ source &apos; ,
func is an instance of TemplateLoader class , created with unpacked list args .
if not ,
if args is true ,
raise an ImproperlyConfigured exception with an argument string &quot; Error importing template source loader % s - can &apos;t pass arguments to
function-based loader . &quot; , where &apos; % s &apos; is replaced with loader. substitute TemplateLoader for func .
func.is _ usable in false ,
import module warnings .
call the function warnings.warn with an argument string &quot; Your TEMPLATE _ LOADERS setting includes % r , but your Python installation
doesn &apos;t support that type of template loading . Consider removing that line from TEMPLATE _ LOADERS . &quot; , where &apos; % r &apos; is replaced with loader. return None .
if not ,
return func .
if not ,
raise an ImproperlyConfigured with an argument string &apos; Loader does not define a &quot; load _ template &quot; callable template source loader &apos; .
define the function find _ template with 2 : template _ name and dirs set to None .
use global variable template _ source _ loaders .
if template _ source _ loaders is None ,
loaders is an empty list .
for every loader _ name in settings.TEMPLATE _ LOADERS ,
call the function find _ template _ loader with an argument loader _ name , substitute the result for loader .
if loader is not None ,
append loader to loaders .
put loaders elements in a tuple , substitute it for template _ source _ loaders .
for every loader in template _ source _ loaders ,
try ,
call the function loader with 2 arguments name and dirs , substitute the result for source and display _ name , respectively .
call the function make _ origin with 4 arguments : display _ name , loader , name and dirs , return a tuple containing 2 elements :
source and previous result. if TemplateDoesNotExist exception is caught ,
do nothing ,
raise an TemplateDoesNotExist exception with an argument name .
define the function get _ template with 2 : template _ name and dirs set to None .
call the function find _ template with 2 arguments : template _ name and dirs , substitute the result for template and origin .
if template has an attribute &apos; render &apos; ,
call the function get _ template _ from _ string with 3 arguments : template , origin and template _ name , substitute the result for template .
return template .
define the function get _ template _ from _ string with 3 : source , origin set to None and name set to None .
return an instance of Template class , created with 2 arguments : source , origin and name , return the result .
define the function render _ to _ string with 4 arguments : template _ name , dictionary set to None , context _ instance set to None and dirs set to None .
if template _ name is an instance of list or tuple types ,
call the function select _ template with 2 arguments : template _ name , dirs , substitute the result for t .
if not ,
call the function get _ template with 2 arguments : template _ name and dirs , substitute the result for t .
if context _ instance is false ,
call the method t.render with an argument , instance of Context class , created with an argument dictionary , return the result .
if dictionary is false ,
call the function t.render with an argument context _ instance , return the result .
call the method context _ instance.push with an argument dictionary , with the result perform ,
call the function t.render with an argument context _ instance , return the result .
define the function select _ template with 2 arguments : template _ name _ list and dirs set to None .
if template _ name _ list is false ,
raise an TemplateDoesNotExist exception with an argument string &quot; No template names provided &quot; .
not _ found is an empty list .
for every template _ name in template _ name _ list ,
try ,
call the function get _ template with 2 arguments template _ name and dirs , return the result .
if TemplateDoesNotExist , renamed to e , exception is caught ,
if first element of e.args is not contained in not _ found ,
append first element of e.args to not _ found list .
skip this loop iteration .
raise an TemplateDoesNotExist exception with an argument , elements of not _ found joined into a string , separated with &apos; , &apos;
from collections import defaultdict into default name space .
from django.conf import settings into default name space .
from django.template.base import TemplateSyntaxError , Library , Node , TextNode , token _ kwargs and Variable into default namespace .
from django.template.loader import get _ template into default name space .
from django.utils.safestring import mark _ safe into default name space .
from django.utils import six into default name space .
register is an instance of Library class .
BLOCK _ CONTEXT _ KEY is a strign &apos; block _ context &apos; .
derive the class ExtendsError from the Exception base class .
do nothing .
derive the class BlockContext from the Exception base class .
define the method _ _ init _ _ with an argument self .
convert elements of defaultdict to list , substitute it for self.blocks.
define the method self and blocks .
call the function six.iteritems with an argument blocks , for every name and block in result ,
get the value under the name key of self.blocks dictionary , insert to it block at the beginning .
define the method self and name .
try ,
remove the first element of value under the name key of self.blocks dictionary , return it .
if IndexError exception is caught ,
return None .
define the method push with 3 arguments : self , name and block .
append block to the value under the name key of self.blocks dictionary .
define the method get _ block with 2 arguments self and name .
try ,
get value under the self.blocks dictionary under the name key , return the last element .
if IndexError exception is caught ,
return None .
derive the class BlockNode from the Node base class .
define the method _ _ init _ _ with 4 arguments : self , name , nodelist , parent set to None .
substitute name , nodelist and parent for self.name , self.nodelist and self.parent.
define the method _ _ repr _ _ with an argument self .
return string &quot; &lt; Block Node : % s . Contents : % r &gt; &quot; , where &apos; % s &apos; is replaced with self.name and &apos; % r &apos; with self.nodelist.
define the method render with 2 arguments self and context .
get value under the BLOCK _ CONTEXT _ KEY key of context.render _ context dictionary , substitute it for block _ context .
call the context.push method , with the result , perform ,
if block _ context is None ,
substitute self for value under the &apos; block &apos; key of context dictionary .
call the method self.nodelist.render with an argument context , substitute the result for result .
if not ,
call the method block _ context.pop with an argument self.name , assign the result to push and block .
if block is None ,
substitute self for block .
convert self to a tuple , call the result with 2 arguments : block.name and block.nodelist , substitute the result for block .
substitute context for block.context.
substitute block for value under the &apos; block &apos; key of context dictionary .
call the method block.nodelist.render with an argument context , substitute the result for result .
if push is not None ,
call the method block _ context.push with 2 arguments : self.name and push .
return result .
define the method super with an argument self .
substitute self.context.render _ context for render _ context .
if BLOCK _ CONTEXT _ KEY is contained in render _ context and call to the method get _ block with an argument self.name from the object ,
under the BLOCK _ CONTEXT _ KEY key of render _ context dictionary dictionary evaluates to be not equal to None , call the method self.render with an argument self.context , use it as an argument for the call to the mark _ safe function , return the result .
return an empty string .
derive the class ExtendsNode from the Node base class .
must _ be _ first is boolean True .
define the method _ _ init _ _ with 4 arguments : self , nodelist , parent _ name and template _ dirs set to None .
substitute nodelist for self.nodelist.
substitute parent _ name for self.parent _ name .
substitute template _ dirs for self.template _ dirs .
self.blocks is a dictionary with elements : n for n.name , for every n in return value of the method nodelist.get _ nodes _ by _ type ,
called with an argument BlockNode. define the method _ _ repr _ _ with an argument self .
return an string &apos; &lt; ExtendsNode : extends % s &gt; &apos; , where &apos; % s &apos; is replaced with self.parent _ name.token.
define the method get _ parent with 2 arguments self and context .
call the method self.parent _ name.resolve with an argument context .
if parent is false ,
error _ msg is a string &quot; Invalid template name in &apos; extends &apos; tag : % r . &quot; , where &apos; % s &apos; is replaced with parent .
if self.parent _ name.filters is true or self.parent _ name.var is an instance of Variable .
append string &quot; Got this from the &apos; % s &apos; variable . &quot; to error _ msg , where &apos; % s is replaced with self.parent _ name.token.
raise an TemplateSyntaxError exception with an argument error _ msg .
if parent has an attribute &apos; render &apos; ,
return parent .
call the function get _ template with an argument parent , return the result .
define the method render with 2 arguments self and context .
call the method self.get _ parent with an argument context , substitute the result for compiled _ parent .
if BLOCK _ CONTEXT _ KEY is not contained in context.render _ context ,
value under the BLOCK _ CONTEXT _ KEY key of context.render _ context dictionary is BlockContext class instance .
get the value under the BLOCK _ CONTEXT _ KEY key of the context.render _ context dictionary , substitute it for block _ context .
call the method block _ context.add _ blocks with an argument self.block.
for every node in compiled _ parent.nodelist ,
if node is not an instance of TextNode ,
if node is not an instance of ExtendsNode ,
blocks is a dictionary with elements : n for n.name , for every n in return value of the method ,
compiled _ parent.nodelist.get _ nodes _ by _ type , called with an argument BlockNode. call the method block _ context.add _ blocks with an argument blocks .
break from the loop execution .
call the method compiled _ parent . _ render with an argument context , return the result .
derive the class IncludeNode from the Node base class .
define the method _ _ init _ _ with 4 arguments : self , template , unpacked list args and unpacked dictionary kwargs .
substitute template for self.template.
remove kwargs dictionary entry under the &apos; extra _ context &apos; key , if it exists substitute it for self.extra _ context ,
if not self.extra _ context is an empty dictionary. remove kwargs dictionary entry under the &apos; isolated _ context &apos; key , if it exists substitute it for self.isolated _ context ,
if not self.isolated _ context is boolean False. call the method _ _ init _ _ from the base class of the class IncludeNode , called with 2 arguments : unpacked dictionary args ,
and unpacked dictionary kwargs. define the method render with 2 arguments self and context .
try ,
call the method self.template.resolve with an argument context , substitute the result for template .
get &apos; render &apos; attribute of template object , if it is callable ,
call the method get _ template with an argument template , substitute the result for template .
values is an dictionary with entries : return value of the method var.resolve with an argument context for name ,
for every name and var in return value of the function six.iteritems called with an argument self.extra _ context. if self.isolated _ context is true ,
call the method context.new with an argument values , use it as an argument for the call to the method template.render , return the result .
call the method context.push with unpacked dictionary values as an argument , with the result perform ,
call the method template.render with an argument context , return the result .
if Exception exception is caught ,
if settings.TEMPLATE _ DEBUG is true ,
raise an exception ,
return an empty string .
decorator method register.tag with an argument &apos; block &apos; ,
define the function do _ block with 2 arguments parser and token .
call the method token.contents.split , substitute the result for bits .
if length of bits is not equal to integer 2 ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; tag takes only one argument &quot; ,
where &apos; % s &apos; is replaced with first element of bits. substitute second element for bits for block _ name .
try ,
if block _ name is contained in parser . _ _ loaded _ blocks ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; tag with name &apos; % s &apos; appears more than once &quot; ,
substitute &apos; % s &apos; with first element of bits and block _ name , respectively. append block _ name to parser . _ _ loaded _ blocks .
if AttributeError exception is caught ,
substitute list with an element block _ name for parser . _ _ loaded _ blocks .
call the method parser.parse with an argument tuple with one element string &apos; endblock &apos; , substitute the result for nodelist .
call the method parser.next _ token , substitute the result for endblock .
acceptable _ endblocks is a tuple with 2 elements : string &apos; endblock &apos; and &apos; endblock % s &apos; , where &apos; % s &apos; replaced with block _ name .
if endblock.contents is not contained in acceptable _ endblocks ,
call the method parser.invalid _ block _ tag with 3 arguments : endblock , &apos; endblock &apos; and acceptable _ endblocks .
return an instance of a BlockNode class , created with 2 arguments : block _ name and nodelist .
decorator method register.tag with an argument &apos; extends &apos; ,
define the function do _ extends with 2 arguments parser and token .
call the method token.split _ contents , substitute the result for bits .
if length of bits is not equalt to integer 2 ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; takes one argument &quot; , where &apos; % s &apos; is replaced with first element of bits .
call the method parser.compile _ filter with an argument second element for bits , substitute the result for parent _ name .
call the method parser.parse , substitute the result for nodelist .
call the method nodelist.get _ nodes _ by _ type with an argument ExtendsNode , if it evaluates to true ,
raise an TemplateSyntaxError exception with an argument string &quot; &apos; % s &apos; cannot appear more than once in the same template &quot; ,
where &apos; % s &apos; is replaced with first element of bits. return an instance of ExtendsNode with 2 arguments nodelist and parent _ name .
decorator method register.tag with an argument &apos; include &apos; ,
define the function do _ include with 2 arguments parser and token .
call the method token.split _ contents , substitute the result for bits .
if length of bits is lesser than integer 2 ,
raise an TemplateSyntaxError with an argument string &quot; % r tag takes at least one argument : the name of the template to be included . &quot; ,
where &apos; % r &apos; is replaced with first element of bits. options is an empty dictionary .
substitute bits , without the first two elements , substitute the result for remaining _ bits .
while remaining _ bits is true ,
remove first element from remaining _ bits , substitute the result for option .
if option is contained in options ,
raise an TemplateSyntaxError exception with an argument string &apos; The % r option was specified more than once . &apos; ,
where &apos; % r &apos; is replaced with options. if option equals a string &apos; with &apos; ,
call the function token _ kwargs with 3 arguments : remaining _ bits , parser , support _ legacy set to boolean False , substitute the result for value .
if value is true ,
raise an TemplateSyntaxError exception with an argument string &apos; &quot; with &quot; in % r tag needs at least one keyword argument . &apos; ,
where &apos; % s &apos; is replaced with first element of bits. otherwise if options equals &apos; only &apos; ,
value is boolean True .
if not ,
raise an TemplateSyntaxError with an argument string &apos; Unknown argument for % r tag : % r . &apos; , where &apos; % r &apos; is replaced with first element of bits and options .
substitute value for value under the options key of options dictionary .
get the value under the key &apos; only &apos; of the options dictionary , if it exists substitute the result for isolated _ context ,
if not , isolated _ context is boolean False. get the value under the &apos; width &apos; key of the options dictionary , if it exists , substitute it for namemap , if not namemap is an empty dictionary .
return an instance of IncludeNode class , created with 3 arguments : return value of the method parser.compile _ filter ,
import module os .
import module sys .
from django.apps import apps into default name space .
from django.conf import settings into default name space .
from django.template.base import TemplateDoesNotExist into default name space .
from django.template.loader import BaseLoader into default name space .
from django.utils. _ os import safe _ join into default name space .
from django.utils import six into default name space .
define the function calculate _ app _ template _ dirs .
if six.PY2 is true ,
call the function sys.getfilesystemencoding , if it evaluates to true , substitute the result for fs _ encoding ,
if not , call the function sys.getdefaultencoding and substitute the result for fs _ encoding. app _ template _ dirs is an empty list .
call the function apps.get _ app _ configs , for every app _ config in result ,
if app _ config.path is true ,
skip this loop iteration .
join app _ config.path and string &apos; templates &apos; into file path , substitute it for template _ dir .
if template _ dir is directory ,
if six.PY2 is true ,
call the function template _ dir.decode with an argument fs _ encoding , substitute the result for template _ dir .
append template _ dir to app _ template _ dirs .
convert app _ template _ dirs to a tuple , return it .
call the function calculate _ app _ template _ dirs , substitute the result for app _ template _ dirs .
derive the class Loader from the BaseLoader base class .
is _ usable is boolean True .
define the method get _ template _ sources with 3 arguments : self , template _ name , template _ dirs set to None .
if template _ dirs is false ,
substitute app _ template _ dirs for template _ dirs .
for every template _ dir in template _ dirs ,
try ,
call the function safe _ join with 2 arguments template _ dir and template _ name , yield the result .
if UnicodeDecodeError exception is caught ,
raise an exception .
if ValueError exception is caught ,
do nothing .
define the method load _ template _ source with 3 arguments : self , template _ name , template _ dirs set to None .
call the method self.get _ template _ sources with 2 arguments template _ name and template _ dirs , for every filepath in the result ,
try ,
open the file named filepath in read mode , with file descriptor renamed to fp perform ,
read file fp , call the method decode on the result with an argument settings.FILE _ CHARSET , return tuple containing 2 elements ,
previous result and filepath. if IOError exception is caught ,
do nothing .
raise an TemplateDoesNotExist exception with an argument template _ name .
import module hashlib .
from django.template.base import TemplateDoesNotExist into default name space .
from django.template.loader import BaseLoader , get _ template _ from _ string , find _ template _ loader and make _ origin into default name space .
from django.utils.encoding import force _ bytes into default name space .
derive the class Loader from the BaseLoader base class .
is _ usable is boolean True .
define the method _ _ init _ _ with 2 arguments : self and loaders .
self.template _ cache is an empty dictionary .
self.find _ template _ cache is an empty dictionary .
substitute loaders for self . _ loaders .
self . _ cached _ loaders is an empty list .
property decorator .
define the method loaders with an argument self .
if self . _ cached _ loaders is false ,
cached _ loaders is an empty list .
for every loader in self . _ loaders ,
call the function find _ template _ loader with an argument loader , append the result to cached _ loaders .
substitute cached _ loaders for self . _ cached _ loaders .
return self . _ cached _ loaders .
define the method cache _ key with 3 arguments : self , template _ name and template _ dirs .
if template _ dirs is true ,
join template _ dirs elements into a string , separated by &apos; &#124; &apos; , use it as an argument for the call to the function force _ bytes ,
use the result as the argument for the call to the function hashlib.sha1 , call the hexdigest method on the result , join template _ name and previous final result into a string , separated with &apos; -&apos; , return it. if not ,
return template _ name .
define the method find _ template with 3 arguments : self , name , dirs set to None .
call the method self.cache _ key with 2 arguments name and dirs , substitute the result for key .
try ,
get the value under the key key of the self.find _ template _ cache dictionary , substitute it for result .
if KeyError exception is caught ,
result is None .
for every loader in self.loaders ,
try ,
call the function loader with arguments name and dirs , assign the result to template and display _ name , respectively .
if TemplateDoesNotExist exception is caught ,
do nothing .
if not ,
result is an tuple with 2 elements : template and return value of the function make _ origin called with 4 arguments : display _ name , loader , name and dirs .
break from the loop execution .
substitute result for self.find _ template _ cache dictionary value under the key key .
if result is true ,
return result
if not ,
substitute TemplateDoesNotExist for self.find _ template _ cache dictionary value under the key key .
raise an TemplateDoesNotExist exception with an argument name .
define the method load _ template with 3 arguments : self , template _ name , template _ dirs set to None .
get the value under the template _ name key of the self.cache _ key dictionary , if it exists , substitute it for key ,
if not , substitute template _ dirs for key. get the value under the key key of the self.template _ cache dictionary , substitute it for template _ tuple .
if template _ tuple is contained in TemplateDoesNotExist ,
raise an TemplateDoesNotExist exception .
otherwise if template _ tuple is None ,
call the method self.find _ template with 2 argumetns : template _ name and template _ dirs , assign the result to template , origin , respectively .
if template doesnt have a &apos; render &apos; attribute ,
try ,
call the function get _ template _ from _ string with 3 arguments : template , origin and template _ name , substitute the result for template .
if TemplateDoesNotExist exception is caught ,
substitute a tuple with 2 elements : template and origin , for self.find _ template _ cache dictionary value under the key key .
substitute a tuple with 2 elements : template and None , for self.find _ template _ cache dictionary value under the key key .
return self.find _ template _ cache dictionary value under the key key .
define the method reset with an argument self .
call the method self.template _ cache.clear.
call the method self.find _ template _ cache.clear.
from _ _ future _ _ import unicode _ literals into default name space .
try ,
from pkg _ resources import resource _ string into default name space .
if ImportError exception is caught ,
resource _ string is None .
from django.apps import apps into default name space .
from django.conf import settings into default name space .
from django.template.base import TemplateDoesNotExist into default name space .
from django.template.loader import BaseLoader into default name space .
from django.utils import six into default name space .
derive the class Loader from the BaseLoader base class .
if resource _ string is not None , is _ usable is boolean True , otherwise is _ usable is boolean False .
define the method load _ template _ source with 3 arguments : self , template _ name , template _ dirs set to None .
if resource _ string is not None ,
concatenate string &apos; templates / &apos; and template _ name , substitute the result for pkg _ name .
call the method apps.get _ app _ configs , for app _ config in the result ,
try ,
call the function resource _ string with 2 arguments app _ config.name and pkg _ name , substitute the result for resource .
if Exception exception is caught ,
skip this loop iteration .
if six.PY2 is true ,
call the method resource.decode with an argument settings.FILE _ CHARSET , substitute the result for resource .
return a tuple with 2 elements : resource and string &apos; egg : % s : % s &apos; , where &apos; % s &apos; is replaced with app _ config.name and pkg _ name , respective .
raise an TemplateDoesNotExist exception with an argument template _ name .
from django.conf import settings into default name space .
from django.template.base import TemplateDoesNotExist into default name space .
from django.template.loader import BaseLoader into default name space .
from django.utils. _ os import safe _ join into default name space .
derive the class Loader from the BaseLoader base class .
is _ usable is boolean True .
define the method get _ template _ source with 3 arguments : self , template _ name , template _ dirs set to None .
if template _ dirs is false ,
substitute settings.TEMPLATE _ DIRS for template _ dirs .
for every template _ dir in template _ dirs ,
try ,
call the function safe _ join with 2 arguments template _ dir and template _ name , yield the result .
if UnicodeDecodeError exception is caught ,
raise an exception .
if ValueError exception is caught ,
do nothing .
define the method load _ template _ source with 3 arguments : self , template _ name , template _ dirs set to None .
tried is an empty list .
call the method self.get _ template _ sources with 2 arguments template _ name and template _ dirs , for every filepath in the result ,
try ,
open the file named filepath in read mode , with file descriptor renamed to fp perform ,
read file fp , call the method decode on the result with an argument settings.FILE _ CHARSET , return tuple containing 2 elements ,
previous result and filepath. if IOError exception is caught ,
append filepath to tried .
if tried is true ,
err _ msg is a string &quot; Tried % s &quot; , where &apos; % s &apos; is replaced with tried .
if not ,
error _ msg is a string &quot; Your TEMPLATE _ DIRS setting is empty . Change it to point to at least one template directory . &quot; .
raise an TemplateDoesNotExist exception with an argument error _ msg .
load _ template _ source.is _ usable is boolean True .
from django.http import HttpResponse into default name space .
from django.template import loader , Context and RequestContext into default name space .
from django.utils import six into default name space .
derive the class ContentNotRenderedError from the Exception base class .
do nothing .
derive the class SimpleTemplateResponse from the HttpResponse base class .
rendering _ attrs is a list containing 3 strings : &apos; template _ name &apos; , &apos; context _ data &apos; and &apos; _ post _ render _ callbacks &apos; .
define the method _ _ init _ _ with 5 arguments : self , template , context set to None , content _ type set to None and status set to None .
substitute template for self.template _ name .
substitute context for self.context _ data .
self . _ post _ render _ callbacks is an empty list .
call the _ _ init _ _ method from the base class of the class SimpleTemplateResponse , with 3 arguments : an empty string , content _ type and status .
self . _ is _ rendered is boolean False .
define the method _ _ getstate _ _ with an argument self .
call the _ _ getstate _ _ method from the base class of the class SimpleTemplateResponse , substitute the result for obj _ dict .
if self . _ is _ rendered is false ,
raise an ContentNotRenderedError exception with an argument string &apos; The response content must be rendered before it can be pickled . &apos; .
for every attr in self.rendering _ attrs ,
if attr is contained in obj _ dict ,
delete entry under the attr key of obj _ dict dictionary .
return obj _ dict .
define the method resolve _ template with 2 arguments : self and template .
if template is an instance of list or tuple types ,
call the method loader.select _ template with an argument template , return the result .
otherwise is template is six.string _ types instance ,
call the method loader.get _ template with an argument template , return the result .
if not ,
return template .
define the method resolve _ context with 2 arguments : self and context .
if context is an instance of Context ,
return context .
if not ,
return an instance of Context class , created with an argument context .
property decorator ,
define the method rendered _ content with an argument self .
call the method self.resolve _ template with an argument self.template _ name , substitute the result for template .
call the method self.resolve _ context with an argument self.context _ data , substitute the result for context .
call the method template.render with an argument context , substitute the result for content .
return content .
define the method add _ post _ render _ callback with 2 arguments : self and callback .
if self . _ is _ rendered is true ,
call the functoin callback with an argument self .
if not ,
append callback to self . _ post _ render _ callbacks list .
define the method render with an argument self .
substitute self for retval .
if self . _ is _ rendered is false ,
substitute self.rendered _ content for self.content.
for every post _ callback in self . _ post _ render _ callbacks ,
call the function post _ callback with an argument retval , substitute the result for newretval .
if newretval is not None ,
substitute newretval for retval .
return retval .
property decorator ,
define the method is _ rendered with an argument self .
return self . _ is _ rendered .
define the method _ _ iter _ _ with an argument self .
if self . _ is _ rendered is false ,
raise an ContentNotRenderedError exception with an string &apos; The response content must be rendered before it can be iterated over . &apos; .
call the method _ _ init _ _ from the base class of the class SimpleTemplateResponse , return the result .
property decorator ,
define the method content with an argument self .
if self . _ is _ rendered is false .
raise an ContentNotRenderedError exception with an sring &apos; The response content must be rendered before it can be accessed . &apos; .
return the content field of the base class of the class SimpleTemplateResponse .
content.setter decorator ,
define the method content with 2 arguments : self and value .
call the method HttpResponse.content.fset with 2 arguments : self and value .
self . _ is _ rendered is boolean True .
derive the class TemplateResponse from the SimpleTemplateResponse base class .
append list with 2 strings : &apos; _ request &apos; and &apos; _ current _ app &apos; to SimpleTemplateResponse.rendering _ attrs , substitute the result for rendering _ attrs .
define the method _ _ init _ _ with 7 arguments : self , request , template , context set to None , content _ type set to None ,
status set to None and current _ app set to None. substitute request for self . _ request .
substitute current _ app for self . _ current _ app .
call the _ _ init _ _ method from the base class of the class TemplateResponse , with 4 arguments : template , context , content _ type , status .
define the method resolve _ context with 2 arguments : self and context .
if context is an instance of Context class .
return context .
return an instance of RequestContext class , created with 3 arguments : self . _ request , context and current _ app set to self . _ current _ app .
derive the class TokenBase from the object base class .
id is None .
value is None .
first and second are None .
define the method nud with 2 arguments : self and parser .
raise an exception parser.error _ class with an argument string &quot; Not expecting &apos; % s &apos; in this position in if tag . &quot; ,
where &apos; % s &apos; is replaced with self.id. define the method led with 3 arguments : self , left and parser .
raise an exception parser.error _ class with an argument string &quot; Not expecting &apos; % s &apos; as infix operator in if tag . &quot; ,
where &apos; % s &apos; is replaced with self.id. define the method display with an argument self .
return self.id.
define the method _ _ repr _ _ with an argument self .
for x in a list containing 3 elements : self.id , self.first and self.second , if x is not None ,
convert x into a string and append it to a list , substitute the resulting list for out. join elements of out into a string , separated with whitespaces , append &apos; ) &apos; to it , append the result to &apos; ( &apos; , return it .
define the function infix with 2 arguments bp and func .
derive the class Operator from the base class TokenBase .
substitute bp for lbp .
define the method led with 3 arguments self , left and parser .
substitute left for self.first.
call the method parser.expression with an argument bp , substitute it for self.seconds.
return self .
define the method eval with 2 arguments self and context .
try ,
call the function func with 3 arguments : context , self.first and self.second , return the result .
if Exception exception is caught ,
return boolean False .
return Operator .
define the function prefix with 2 arguments bp and func .
derive the class Operator from the base class TokenBase .
substitute bp for lbp .
define the method nud with 2 arguments self and parser .
call the method parser.expression with an argument bp , substitute the result for self.first.
self.second is None .
return self .
define the method evalu with 2 arguments self and context .
try ,
call the function func with 2 arguments : context and self.first , return the result .
if Exception exception is caught ,
return boolean False .
return Operator .
OPERATORS is an dictionary with 12 initial entries : result of the function inflix called with 2 arguments , integer 6 ,
and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) or y.eval ( context ) is True , for &apos; or &apos; , result of the function inflix called with 2 arguments , integer 7 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) and y.eval ( context ) is True for &apos; and &apos; , result of the function prefix called with 2 arguments , integer 8 , and lambda function with 2 arguments context and x , returns boolean True if x.eval ( context ) is True for &apos; not &apos; , result of the function inflix called with 2 arguments , integer 9 , and lambda function with 2 arguments context and x , returns boolean True if x.eval ( context ) is contained in y.eval ( context ) for &apos; in &apos; , result of the function inflix called with 2 arguments , integer 9 , and lambda function with 2 arguments context and x , returns boolean True if x.eval ( context ) is not contained in y.eval ( context ) , for &apos; not in &apos; , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) equals y.eval ( context ) for &apos; = &apos; , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) equals y.eval ( context ) for &apos; = = &apos; , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) doesnt equals y.eval ( context ) for &apos; ! = &apos; , result of the function inflix called with 2 arguments , integer 10 and , lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is greater than y.eval ( context ) for &apos; &gt; &apos; , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is greater than or equal to y.eval ( context ) for &apos; &gt; = &apos; , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is smaller than y.eval ( context ) for &apos; &lt; &apos; , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is smaller than or equal to y.eval ( context ) for &apos; &lt; = &apos; , call the function OPERATORS.items , for every key and op in result ,
substitute key for op.id.
derive the class Literal from the TokenBase base class .
id is a string &quot; literal &quot; .
lbp is integer 0 .
define the method _ _ init _ _ with 2 arguments : self and value .
substitute value for self.value.
define the method display with an argument self .
return printable representation of self.value.
define the method nud with 2 arguments : self and parser .
return self .
define the method eval with 2 arguments : self and context .
return self.value.
define the method _ _ repr _ _ with an argument self .
return string &quot; ( % s % r ) &quot; , replace &apos; % s &apos; with self.if and &apos; % r &apos; with self.value.
derive the class EndToken from the TokenBase base class .
lbp is an integer 0 .
define the method nud with 2 arguments : self and parser .
raise an exception parser.error _ class with an argument string &quot; Unexpected end of expression in if tag . &quot; .
EndToken is an instance of EndToken class .
derive the class IfParser from the object base class .
substitute ValueError for error _ class .
define the method _ _ init _ _ with 2 arguments : self and tokens .
substitute length of tokens for l .
mapped _ tokens is an empty list .
i is integer 0 .
while i is smaller than l ,
substitute i-th element of tokens for token .
if token equals a string &quot; not &quot; and i incremented by 1 is lesser than l ,
and element of tokens at i incremented by 1 index equals a string &quot; in &quot; , token is a string &quot; not in &quot; .
increment i by integer 1 .
call the method self.translate _ token with an argument token , append the result to mapped _ tokens .
increment i by integer 1 .
substitute mapped _ tokens for self.tokens.
self.pos is integer 0 .
call the method self.next _ token , substitute the result for self.current _ token .
define the method translate _ token with 2 arguments : self and token .
try ,
substitute OPERATORS dictionary element under token key for op .
if KeyError and TypeError exceptions are caught ,
call the function self.create _ var with an argument token , return the result .
if not ,
call the function op , return the result .
define the method next _ token with an argument self .
if self.pos is greater than or equal to self.tokens ,
return EndToken .
if not ,
substitute element at self.pos index of self.tokens for retval .
increment self.pos by integer 1 .
return retval .
define the method parse with an argument self .
call the method self.expression , substitute the result for retval .
if self.current _ token is not EndToken ,
raise an exception self.error _ class with an argument string &quot; &quot; Unused &apos; % s &apos; at end of if expression &quot; ,
where &apos; % s &apos; is replaced with result of the method self.current _ token.display. return retval .
define the method expression with 2 arguments : self and rbp set to integer 0 .
substitute self.current _ token for t .
call the method self.next _ token , substitute the result for self.current _ token .
call the method t.nud with an argument self , substitute the result for left .
while rbp is smaller than self.current _ token.lbp ,
substitute self.current _ token for t .
call the method self.next _ token , substitute the result for self.current _ token .
call the method t.led with 2 arguments left and self .
return left .
define the method create _ var with 2 arguments : self and value .
return an instance of Literal class , created with an argumen value .
from _ _ future _ _ import unicode _ literals into default name space .
from lib2to3 import fixer _ base into default name space .
from lib2to3.fixer _ util import find _ indentation , Name , syms and touch _ import into default name space .
from lib2to3.pgen2 import token into default name space .
from lib2to3.pytree import Leaf and Node into default name space .
derive the class FixUnicode from the base class fixer _ base.BaseFix.
BM _ compatible is boolean True .
PATTERN is a string &quot; classdef &lt; &apos; class &apos; any + &apos; : &apos; suite &lt; any * funcdef &lt; &apos; def &apos; unifunc = &apos; _ _ unicode _ _ &apos; parameters &lt; &apos; ( &apos; NAME &apos; ) &apos; &gt; any + &gt; any * &gt; &gt; &quot; .
define the method transform with 3 arguments : self , node and results .
substitute value under the &quot; unifunc &quot; key of the results dictionary for unifunc .
strfunc is an instance of a class Name , created with 2 arguments : string &quot; _ _ str _ _ &quot; and prefix as unifunc.prefix.
call the method unifunc.replace with an argument strfunc .
call the method node.clone , substitute the result for klass .
call the method find _ indentation with an argument node , append the result to newline , substitute the result for klass.prefix.
decorator is an instance of class Node , created with 2 arguments : instance of Leaf class created with 2 arguments : token.AT and &quot; @ &apos; ,
and instance of Name class created with an argument string &apos; python _ 2 _ unicode _ compatible &apos; . decorated is an instance of class Node , created with 3 arguments : syms.decorated , list with 2 arguments : decorator and klass ,
and prefix as node.prefix. call the method node.replace with an argument decorated .
call the function touch _ import with 3 arguments : string &apos; django.utils.encoding &apos; , string &apos; python _ 2 _ unicode _ compatible &apos; and decorated .
import module os .
import module sta .
import module sys .
import module tempfile .
from os.path import join , normcase , normpath , abspath , isabs , sep and dirname into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils import six into default name space .
try ,
substitute WindowsError for WindowsError .
if NameError exception is caught ,
derive class WindowsError from Exception base class .
do nothing .
if six.PY2 is true ,
call the function sys.getfilesystemencoding if it evaluates to true , substitute its result for fs _ encoding ,
otherwise call the function sys.getdefaultencoding and substitute its result for fs _ encoding. if six.PY3 is true or os.name equals a string &apos; nt &apos; ,
substitute abspath for abspathu .
if not ,
define the function abspathu with an argument path .
call the function isabs with an argument path , if it evaluates to false ,
get the unicode representation of current working directory , join it and path into a string , substitute the result for path .
call the function normpath with an argument path , return the result .
define the function upath with an argument path .
if six.PY2 is true and path is not an instance of six.text _ type type ,
call the method path.decode with an argument fs _ encoding , return the result .
return path .
define the function npath with an argument path .
if six.PY2 is true and path is not an instance of byes type ,
call the method path.encode with an argument fs _ encoding , return the result .
return path .
define the function safe _ join with 2 arguments base and unpacked dictionary paths .
call the function force _ text with an argument base , substitute the result for base .
paths is a list containing results of the function force _ text called with an argument p , for every p in paths .
join base an unpacked list paths into a string , get the absolute path in unicode representation of the result , substitute the result for final _ path .
get the unicode representation of the absolute path of base , substitute it for base _ path .
if return value of the function normcase called with an argument final _ path doesnt starts with result of the function normcase ,
called with sep appended to base _ path as an argument and results of the function normcase called twice with final _ path , and base _ pah are not equal and directory name of the result of the function normcase called with an argument base _ path , if not equal to the result of the function normcase called with an argument base _ path. raise an ValueError with an argument string &apos; The joined path ( % s ) is located outside of the base path component ( % s ) &apos; ,
where &apos; % s &apos; is replaced with final _ path and base _ path. return final _ path .
define the function rmtree _ errorhandler with 3 arguments func , path and exc _ info .
substitute fist and second element of exc _ info for exctype and value , respectively .
if exctype is not WindowsError or string &apos; Access is denied &apos; is not contained in value converted into a string ,
raise an exception .
call the function os.stat with an argument path , perform bitwise and on 2 operands st _ mode field of the result and stat.S _ IREAD ,
if it is not equal to stat.S _ IREAD , raise an exception .
change access mode of path to stat.S _ IWRITE mode .
call the function func with an argument path .
define the method symlinks _ supported .
call the function tempfile.mkdtemp , substitute the result for tmpdir .
join tmpdir and sting &apos; original &apos; into a file path name , substitute it for original _ path .
join tmpdir and sting &apos; symlink &apos; into a file path name , substitute it for symlink _ path .
make a directory named original _ path .
try ,
make a system symbolic link between original _ path and symlink _ path .
supported is boolean True .
if OSError , NotImplementedError or AttributeError exceptions are caught ,
supported is boolean False .
if not ,
remove symlink _ path file .
finally perform ,
remove original _ path directory .
remove tmpdir directory .
return supported .
import module os .
import module shutil .
import module tarfile .
import module zipfile .
from django.utils import six into default name space .
derive the class ArchiveException from the Exception base class .
derive the class UnrecognizedArchiveFormat from the ArchiveException base class .
define the function extract with 2 arguments path and to _ path set to empty string .
instantiate Archive class with an argument path , with it renamed to archive , perform ,
call the method archive.extract with an argument to _ path .
derive the class Archive from the object base class .
define the method _ _ init _ _ with 2 arguments self and file .
call the method self . _ archive _ cls with an argument file , call the result with an argument file , substitute the result for self . _ archive .
static method ,
define the method _ archive _ cls with an argument file .
cls is None .
if file is an instance of six.string _ types .
substitute file for filename .
if not ,
try ,
substitute file.name for filename .
if AttributeError exception is caught .
raise an UnrecognizedArchiveFormat exception with an argument string &quot; File object not a recognized archive format . &quot; .
convert filename to lowercase , use the result as an argument for the call to the function os.path.splitext ,
substitute the result for base and tail _ ext. get the value under the tail _ ext key of the extension _ map dictionary , substitute it for cls .
if cls is false ,
call the method os.path.splitext with an argument base , substitute the result for base and ext , respectively .
get the value under the ext key of the extension _ map dictionary , substitute it for cls .
if cls is false ,
raise an UnrecognizedArchiveFormat exception with an argument string &quot; Path not a recognized archive format : % s &quot; ,
where &apos; % s &apos; is replaced with filename. return cls .
define the method _ _ enter _ _ with an argument self .
return self .
define the method _ _ exit _ _ with 4 arguments : self , exc _ type , exc _ value and traceback .
call the method self.close.
define the method extract with 2 arguments : self and to _ path set to an empty string .
call the method self . _ archive.extract with an argument to _ path .
define the method list with an argument self .
call the method self . _ archive.list.
define the method close with an argument self .
call the method self . _ archive.close.
derive the class BaseArchive from the object base class .
define the method split _ leading _ dir with 2 arguments self and path .
convert path to a string , substitute the result for path .
strip path of all leading &apos; / &apos; and &apos; \ \ &apos; characters , substitute the result for path .
if &apos; / &apos; is contained in path , and only if &apos; \ \ &apos; is contained in path and index of the first occurrence of &apos; / &apos; in path is lesser than ,
index of the first occurrence of &apos; \ \ &apos; in path , or alternatively if &apos; \ \ &apos; is not contained in path , split path in two parts by &apos; / &apos; character , return the result .
otherwise if &apos; \ \ &apos; is contained in path ,
split path in two parts by &apos; \ \ &apos; string , return the result .
if not ,
return path an an empty string .
define the method has _ leading _ dir with 2 arguments self and paths .
common _ prefix is None .
for every path in paths ,
call the method self.split _ leading _ dir with an argument path , assign the result to prefix and rest , respectively .
if prefix is false ,
return boolean False .
otherwise if common _ prefix is None ,
substitute prefix for common _ prefix .
otherwise if prefix is not equal to common _ prefix ,
return boolean False .
return boolean True .
define the method list with an argument self .
raise an NotImplementedError exception with an argument string &apos; subclasses of BaseArchive must provide an extract ( ) method &apos; .
define the method list with an argument self .
raise an NotImplementedError exception with an argument string &apos; subclasses of BaseArchive must provide a list ( ) method &apos; .
derive the class TarArchive from the BaseArchive base class .
define the method _ _ init _ _ with 2 arguments self and file .
call the method tarfile.open with an argument file , substitute the result for self . _ archive .
define the method _ _ init _ _ with 3 arguments self and unpacked list args and unpacked dictionary kwargs .
define the method list with 3 arguments : self and unpacked list args and unpacked dictionary kwargs .
define the method extract with 2 arguments self and to _ path .
members is a list with elements member for every member in the result of the function self . _ archive.getmembers ,
only if member.name is not equal to string &apos; pax _ global _ header &apos; . call the method self.has _ leading _ dir with an argument list , with elements x.name for every x in members , substitute the result for leading .
for every member in members ,
substitute member.name for name .
if leading is true ,
call the method self.split _ leading _ dir with an argument name , substitute the first element of result for name .
join to _ path and name into a valid system path , substitute the result for filename .
if member is a directory ,
if filename is true and filename path doesnt exist ,
create directories from the elements in filename .
if not ,
try ,
call the method self . _ archive.extractfile with an argument member , substitute the result for extracted .
if KeyError or AttributeError , renamed to exc , exceptions are caught ,
print a string &quot; In the tar file % s the member % s is invalid : % s &quot; , where &apos; % s &apos; is substituted with : name , member.name and exc , respectively .
if not ,
get the directory name of filename , substitute it for dirname .
if dirname is true and dirname directory doesnt exists ,
create directories from the elements in filename .
open filename file in write mode , with the file descriptor renamed to outfile , perform ,
call the method shutil.copyfileobj with 2 arguments : extracted and outfile .
finally ,
if extracted is true ,
call the method extracted.close.
define the method close with an argument self .
call the method self . _ archive.close.
derive the class ZipArchive from the BaseArchive base class .
define the method _ _ init _ _ with 2 arguments self and file .
call the method zipfile.ZipFile with an argument self , substitute the result for self . _ archive .
define the method list with 3 arguments : self and unpacked list args and unpacked dictionary kwargs .
call the method self . _ archive.printdir with 2 arguments : unpacked list args and unpacked dictionary kwargs .
define the method extract with 2 arguments self and to _ path .
call the method self . _ archive.namelist , substitute the result for namelist .
call the method self.has _ leading _ dir with an argument namelist , substitute the result for leading .
for every name in namelist ,
call the method self . _ archive.read with an argument name , substitute the result for data .
if leading is true ,
call the method self.split _ leading _ dir with an argument name , substitute the second element of the result for name .
join to _ path and name into a file path , substitute the result for filename .
get the directory name of filename , substitute the result for dirname .
if dirname is true and dirname path doesnt exists ,
create directories from the elements in filename .
if filename ends with &apos; / &apos; or with &apos; \ \ &apos; ,
if filename path doesnt exists ,
create directories from the elements in filename .
if not ,
open filename file in write mode , with the file descriptor renamed to outfile , perform ,
write data bytes to outfile .
define the method close with an argument self .
call the method self . _ archive.close.
extension _ map is a dictioanry with 6 initial elntries : TarArchive for &apos; .tar &apos; , TarArchive for &apos; .tar.bz2 &apos; , TarArchive for &apos; .tar.gz &apos; ,
from _ _ future _ _ import absolute _ import into default name space .
import module os .
import module signal .
import module sys .
import module time .
import module traceback .
from django.apps import apps into default name space .
from django.conf import settings into default name space .
from django.core.signals import request _ finished into default name space .
try ,
from django.utils.six.moves import _ thread as thread into default name space .
if imoportError exception is caught ,
from django.utils.six.moves import _ dummy _ thread as thread into default name space .
try ,
import threading module .
if ImportError exception is caught ,
do nothing .
try ,
import termios module .
if ImportError exception is caught ,
termios is None .
USE _ INOTIFY is boolean False .
try ,
import pyinotify module .
call the method pyinotify.INotifyWrapper.create , on the return value call the inotify _ init method , substitute the result for fd .
if fd is greater or equal to integer 0 .
USE _ INOTIFY is boolean True .
close fd file descriptor .
if ImportError exception is caught ,
do nothing .
RUN _ RELOADER is boolean True .
FILE _ MODIFIED is integer 1 .
I18N _ MODIFIED is integer 2
_ mtimes is an empty dictionary .
_ win is a tuple containing 1 initial boolean : True is sys.platform equals to string &quot; win32 &quot; , False otherwise .
_ error _ files is an empty list .
_ cached _ modules is an empty set .
_ cached _ filenames is an empty list .
define the function gen _ filenames with an argument only _ new defaulting to boolean False .
declare that we use global variables cached _ modules and _ cached _ filenames in this function .
module _ values is a set created from the elements of sys.modules.values method return value .
if _ cached _ modules equals to module _ values ,
if only _ new is true ,
return an empty list .
if not ,
return _ cached _ filenames .
subtract _ cached _ modules from module _ values , assign the result to new _ modules .
create the list of paths from which filename module was included for every filename in new _ modules , only is filename has &apos; _ _ file _ _ &apos; attribute , substitute the resulting list for new _ filenames .
if _ cached _ filenames is empty and settings.USE _ I18N is True ,
return the directory name two directories up from the _ _ file _ _ path , join it with &apos; conf &apos; and &apos; locale &apos; into valid path , separated by &apos; / &apos; , basedirs is a list containing 2 elements : previous result and string &apos; locale &apos; .
for app _ config in reversed list of apps.get _ app _ configs ( ) elements ,
join app _ config.path and &apos; locale &apos; into a valid directory path , separated by &apos; / &apos; , append it to basedirs .
extend basedirs list with settings.LOCALE _ PATHS .
replace all the elements of the basedir list by its corresponding absolute directory path , only is that directory exists .
for every basedir in basedirs ,
for every dirpath , dirnames and locale _ filenames in directory tree starting at the basedir directory .
for every filenam in locale _ filenames ,
if filename ends with string &apos; .mo &apos; ,
join dirpath and filename into a path separated by &apos; / &apos; , append it to new _ filenames .
if only _ new is True ,
substitute new _ filenames for filelist .
if not ,
sum _ cached _ filenames , new _ filenames and _ error _ files , store the result in filelist .
filenames is an empty list .
for every filename is filelist ,
if filename is empty ,
skip this loop iteration ,
if filename ends with string &quot; .pyc &quot; or it ends with &quot; .pyo &quot; ,
truncate the last element of filename .
if filename ends with string &quot; $ py.class &quot; ,
truncate last 9 elements of filename and append it string &quot; .py &quot; .
if file filename exists ,
append filename to filenames .
add elements from new _ modules set to _ cached _ modules set .
append new _ filenames to _ cached _ filenames .
return filenames .
define the function reset _ translation .
import gettext module .
from django.utils.translation import trans _ real into default namespace .
gettext . _ translations is an empty dictionary .
trans _ real . _ translations is an empty dictionary .
trans _ real . _ default is None .
call the threading.local method , assign the result to trans _ real . _ active .
define the function inotify _ code _ changed .
derive the EventHandler class from the base class pyinotify.ProcessEvent.
modified _ code is None .
define the method process _ default with self class instance and event as arguments .
if event.path ends with string &apos; .mo &apos; ,
EventHandler.modified _ code is I18N _ MODIFIED .
if not ,
EventHandler.modified _ code is FILE _ MODIFIED .
call the pyinotify.WatchManager method , assign the result to wm .
call the method pyinotify.Notifier with wm and EventHandler ( ) as arguments , assign the result to notifier .
define the method update _ watch with sender defaulting to None and dictionary pair of elements kwargs .
if sender is true and sender attribute &apos; handles _ files &apos; is also True ,
return nothing .
perform the bitwise or operation on the next 6 operands pyinotify.IN _ MODIFY pyinotify.IN _ DELETE , pyinotify.IN _ ATTRIB ,
pyinotify.IN _ MOVED _ FROM , pyinotify.IN _ MOVED _ TO and pyinotify.IN _ CREATE , store the result in mask. for every path in return value of the call to the function gen _ filenames with argument only _ new set to boolean True ,
call the method wm.add _ watch with path and mask as arguments .
call the method request _ finished.connect with argument update _ watch .
call the method update _ watch .
call the method notifier.check _ events with argument timeout set to None .
call the method notifier.read _ events .
call the method notifier.process _ events .
call the method notifier.stop.
return EventHandler.modified _ code .
define the function code _ changed .
use the global variables _ mtimes and _ win in this function .
for every filename in gen _ filenames ( ) ,
call the os.stat function with argument filename , store the return value in stat .
substitute stat.st _ mtime for mtime .
if _ win is true ,
decrement mtime by stat.st _ ctime .
if filename is not contained in _ mtimes ,
substitute mtime for the value under the filename key of _ mtimes dictionary .
skip this loop iteration .
if mtime is different than the value of dictionary _ mtimes under the key filename ,
_ mtimes is an empty dictionary .
try ,
remove the first occurrence of the filename value in the _ error _ files list .
if ValueError exception is caught ,
do nothing .
if filename ends with string &apos; .mo &apos; return I18N _ MODIFIED , otherwise return FILE _ MODIFIED .
return boolean False .
define the function check _ errors with argument fn .
define the function wrapper with list args , and dictionary pair of values kwargs as arguments .
try ,
call the function fn with list of arguments args and dictionary of argument values kwargs .
if ImportError , IndentationError , NameError , SyntaxError , TypeError or AttributeErrorexception is caught ,
call the sys.exc _ info function , assign the result to et , ev and tb , respectively .
if &apos; filename &apos; attribute of ev is None ,
call the traceback.extract _ tb method with argument tb , substitute the first element of last row of the result to filename .
if not ,
substitute ev.filename for filename .
if filename is not contained in _ error _ files ,
append filename to _ error _ files .
raise an exception .
return wrapper .
define ensure _ echo _ on function .
if termios is true ,
substitute sys.stdin for fd .
evaluate the fd.isatty method , if the result is true ,
call the method termios.tcgetattr with argument fd , substitute the result for attr _ list .
if fourth element of attr _ list and termios.ECHO are both true ,
perform binary or for operands : fourth element of _ attr _ list and termios.ECHO , store the result in fourth element of attr _ list .
if signal has an attribute &apos; SIGTTOU &apos; ,
call the signal.signal method with signal.SIGTTOU and signal.SIG _ IGN as arguments , store the result in old _ handler .
if not ,
old _ handler is None .
call the method termios.tcsetattr with fd , termios.TCSANOW and attr _ list , as arguments .
if old _ handler is not None ,
call the method signal.signal with signal.SIGTTOU and old _ handler , as arguments .
define the function reloader _ thread .
call the function ensure _ echo _ on .
if USE _ INOTIFY is true ,
substitute inotify _ code _ changed for fn .
if not ,
substitute code _ changed for fn .
while RUN _ RELOADER is true .
assign the return value of the function fn to change .
if change equals to FILE _ MODIFIED ,
call the function sys.exit with argument integer 3 .
otherwise id change equals to I18N _ MODIFIED ,
call the function reset _ translations .
call the function time.sleep with an argument integer 1 .
define the function restart _ with _ reloader .
endless loop ,
in string &apos; -W % s &apos; replace &apos; % s &apos; with o for every o in sys.warnoptions , put the result into a list , append the list to a list containing sys.executable , append sys.argv to the end of the resulting list , substitute the result for args .
if sys.platform equals to string &quot; win32 &quot; ,
args is a list containing arg surrounded by double quotes for every arg in args .
call the method os.environ.copy , substitute the result for new _ environ .
value under the &quot; RUN _ MAIN &quot; key of new _ environ dictionary is a string &apos; true &apos; .
call the function os.spawnve with os.P _ WAIT , sys.executable , args and new _ environ as arguments , substitute the result for exit _ code .
if exit _ code is not equal to integer 3 .
return exit _ code .
define the function python _ reloader with main _ func and kwargs as arguments .
if value under the &quot; RUN _ MAIN &quot; key of the os.environ dictionary equals to string &quot; true &quot; ,
call the function thread.start _ new _ thread with main _ func , args and kwargs as arguments .
try ,
call the function reloader _ thread .
if KeyboardInterrupt exception is caught ,
do nothing .
if not ,
try ,
call the function restart _ with _ reloader , substitute the return value for exit _ code .
if exit _ code is lesser than integer 0 ,
call the function os.kill with os.getpid ( ) and negative exit _ code as arguments .
if not ,
call the function sys.exit with argument exit _ code .
if KeyboardInterrupt exception is caught ,
do nothing ,
define the function jython _ reloader with main _ func , args and kwargs as arguments .
from _ systemrestart import SystemRestart into default name space .
call the function thread.start _ new _ thread with main _ func and args as arguments .
endless loop ,
if return value of the code _ changed function is true ,
raise an SystemRestart exception ,
call the function time.sleep with argument integer 1 .
define the function main , with main _ func , args defaulting to None and kwargs defaulting to None as arguments .
if args is None ,
args is a empty tuple .
if kwargs is None ,
kwargs is a empty dictionary .
if sys.platform starts with string &apos; java &apos; ,
substitute jython _ reloader for reloader .
if not ,
substitute python _ reloader for reloader .
call the function check _ errors with argument main _ func , substitute the result for wrapped _ main _ func .
call the function reloader with wrapped _ main _ func , args and kwargs as arguments .
BASE2 _ ALPHABET is a string &apos; 01 &apos; .
BASE16 _ ALPHABET is a string &apos; 0123456789ABCDEF &apos; .
BASE56 _ ALPHABET is a string &apos; 23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz &apos; .
BASE36 _ ALPHABET is a string &apos; 0123456789abcdefghijklmnopqrstuvwxyz &apos; .
BASE62 _ ALPHABET is string &apos; 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz &apos; .
append string &apos; - _ &apos; to the BASE62 _ ALPHABET , substitute it for BASE64 _ ALPHABET .
derive class BaseCOnverter from object base class .
decimal _ digits is a string &apos; 0123456789 &apos; .
define the initialization function with self class instance , digits and sign defaulting to &apos; -&apos; as arguments .
substitute sign for self.sign.
substitute digits for self.digits.
if sign is contained in self.digits ,
raise ValueError exception with string &apos; Sign character found in converter base digits . &apos; as an argument .
define private method _ _ repr _ _ with argument self .
replace &apos; % s &apos; in the string &quot; &lt; BaseConverter : base % s ( % s ) &gt; &quot; with length of self.digits and self.digits , respectively , return the string .
define the method encode with self class instance and i as arguments .
call the self.convert method with i , self.decimal _ digits , self.digits and &apos; -&apos; as arguments , assign the result to the neg and value , respectively .
if neg is true ,
append value to the self.sign , return the result .
return value .
define the decode method with self class instance and s as arguments .
call the self.convert method with s , self.decimal , self.decimal _ digits and self.sign as arguments , assign the result to the neg and value , respectively .
if neg is true ,
append value to the &apos; -&apos; , substitute it for value .
convert value to an integer , return it .
define convert method with self class instance , number , from _ digits , to _ digits and sign as arguments .
convert number to string , if first element equals to sign ,
convert number to a string , truncate first element .
neg is integer 1 .
if not ,
neg is integer 0 .
x is integer 0 .
for every digit in number coverted to a string ,
multiply x by length of from _ digits add the return value of method from _ digits.index with digit argument , substitute the result for x .
if x equals to integer 0 ,
substitute first element of to _ digits for res .
if not ,
res is an empty string .
while x is greater than zero ,
calculate reminder of division of x by length to _ digits , substitute it for digit .
increment res by element of to _ digit at the digit index .
divide x by length of to _ digits , convert floor value of the result to an integer , substitute it for x .
return neg and res .
call the BaseConverter function with BASE2 _ ALPHABET as argument , store the result in base2 .
call the BaseConverter function with BASE16 _ ALPHABET as argument , store the result in base16 .
call the BaseConverter function with BASE36 _ ALPHABET as argument , store the result in base36 .
call the BaseConverter function with BASE56 _ ALPHABET as argument , store the result in base56 .
call the BaseConverter function with BASE62 _ ALPHABET as argument , store the result in base62 .
call the BaseConverter function with BASE64 _ ALPHABET and sign set to &apos; $ &apos; as arguments , store the result in base64 .
from module _ _ future _ _ import unicode _ literals to default name space .
import hashlib module .
import re module .
import time module .
from django.conf import settings object to the default name space .
from django.core.cache import caches to the default name space .
from django.utils import iri _ to _ uri , force _ bytes , force _ text to the default name space .
from django.utils.http import http _ date to the default name space .
from django.utils.timezone import get _ current _ timezone _ name to the default name space .
from django.utils.translation import get _ language to the default name space .
compile regular expression based on the string &apos; \ s * , \ s * &apos; and assign the result to cc _ delim _ re .
define function patch _ cache _ control , with response and dictionary set of arguments , kwargs , as arguments .
define function dictitem with s as an argument .
split string s once , with &apos; = &apos; sign as a delimiter , assign the resulting list to the t .
if length of t is greater than integer 1 ,
return first element of t converted to lowercase and second element of t , as a tuple .
if not ,
return first element of t converted to lowercase and boolean True , as a tuple .
define function dictvale , with an argument t .
if second element of t is boolean True ,
return first element of t .
if not ,
return string first element of t , &apos; = &apos; , second element of t .
if call to the method response.has _ header with string &apos; Cache-Control &apos; as an argument returns boolean True ,
find the value of response under the key &apos; Cache-Control &apos; , use it as a delimiter to split string ss _ delim _ re ,
assign the result to cc. cc is a dictionary populated with items by calling function dictitem with el as argument , for every el in cc .
if not ,
cc is an empty dictionary .
if cc contains item &apos; max-age &apos; and kwargs contains item &apos; max _ age &apos; ,
convert to integer value of dictionary cc under the key &apos; max-age &apos; ,
if it is smaller than the value of dictionary kwargs under the key &apos; max _ age &apos; , substitute kwargs value under the key &apos; max-age &apos; by it. if cc contains item &apos; private &apos; and kwargs contains item &apos; public &apos; ,
delete dictionary item &apos; private &apos; from cc .
if cc contains item &apos; public &apos; and kwargs contains item &apos; private &apos; ,
delete dictionary item &apos; public &apos; from cc .
for every k and v in items of dictionary kwargs , respectively ,
replace all occurrences of symbol &apos; _ &apos; in string k with symbol &apos; -&apos; , use new string as key to find a value in dictionary cc ,
replace this value with v. call the function dictvalue with el as argument for every el in values of dictionary cc ,
join the resulting sequence in a string with comma as separator , assign the string to cc. substitute response dictionary value under the key &apos; Cache-Control &apos; for cc .
define function get _ max _ age with response as an argument .
if the result to the method call response.has _ header , with string &apos; Cache-Control &apos; as an argument is boolean False ,
return from the function
cc is a dictionary populated with items by calling function _ to _ tuple with el as an argument ,
for every el in split string cc _ delim _ re , with delimiter being the value of dictionary response under the key &apos; Cache-Control &apos; . if cc contains item &apos; max-age &apos; ,
try ,
convert to integer the value of dictionary cc under the key &apos; max-age &apos; , and return it
if exception ValueError or TypeError is raised ,
do nothing .
define the function _ set _ response _ etag , with response as an argument .
if response.streaming is boolean False ,
create md5 hash from string response.content in hexadecimal format , surround the hash with double quotes ,
and store it in the value of the dictionary response under the key &apos; ETag &apos; . return response
define the function patch _ response _ headers , with response and cache _ timeout with None as default value , as arguments .
if cache _ timeout equals to None ,
substitute settings.CACHE _ MIDDLEWARE _ SECONDS for cache _ timeout .
if cache _ timeout is lesser than integer 0 ,
substitute integer 0 for cache _ timeout .
if settings.USE _ ETAGS is True and function call response.has _ header with string &apos; ETag &apos; as argument returns boolean False ,
if object response has an attribute &apos; render &apos; and if response.render is callable object ,
call the method response.add _ post _ render _ callback with _ set _ response _ etag as argument .
if not ,
substitute return value of call to the function _ set _ response _ etag with response as an argument , for response .
if call to the function response.has _ header with string &apos; Last-Modified &apos; as an argument returns boolean False ,
call the function http _ date with no arguments , and substitute its return value
for value of dictionary response under the key &apos; Last-Modified &apos; . if call to the function response.has _ header with &apos; Expires &apos; as argument returns boolean False ,
sum return value of the function call time.time ( ) and cache _ timeout , use it as an argument for function call of http _ date ,
and substitute the return value for value under the key &apos; Expires &apos; of dictionary response. call the function patch _ cache _ control , with response and max _ age set to cache _ timeout as arguments .
define function add _ never _ cache _ headers , with response as an argument .
call the function patch _ response with response and cache _ timeout decremented by integer 1 as arguments .
define function patch _ vary _ headers , with response and newheaders as arguments .
doctring
if call to the function response.has _ header with argument &apos; Vary &apos; returns boolean True ,
split the string cc _ delim _ re with value under the key &apos; Vary &apos; of response dictionary as delimiter , substitute result for vary _ headers .
if not ,
vary _ headers is an empty list .
existing _ headers is a set of lowercase headers for every header in vary _ headers .
put every header in newheaders in a list , only if newheader converted to lowercase does not exist in existing _ headers ,
substitute this list for additional _ headers. join all of the elements of vary _ headers and additional _ headers in a string delimited by a comma ,
substitute it for value of dictionary response under the key &apos; Vary &apos; . define function has _ vary _ header , with response and header _ query as arguments .
if return value of function response.has _ header with string &apos; Vary &apos; as argument is boolean False ,
return boolean False .
split string cc _ delim _ re by value of dictionary response under the key &apos; Vary &apos; as a delimiter , substitute it for vary _ headers .
existing _ headers is a set containing lowercase strings header for every header in vary _ headers .
check if lowercase header _ query exists is existing _ headers , return the boolean result .
define function _ i18n _ cache _ key _ suffix , with request and cache _ key as arguments .
if eather one of settings.USE _ I18N or settings.USE _ L10N is True ,
call the function getattr with request , string &apos; LANGUAGE _ CODE &apos; and function get _ language as arguments ,
append the result at the end of string &apos; .&apos; , append it all at the end of string cache _ key. if settings.USE _ TZ is True ,
call the function force _ text , with the function get _ current _ timezone _ name and errors set to string &apos; ignore &apos; as arguments ,
replace the result for tz _ name. call the method tz _ name.encode with the arguments &apos; ascii &apos; and &apos; ignore &apos; , call the method decode on the result with &apos; ascii &apos; as argument ,
in the resulting string replace all occurrences of &apos; &apos; with &apos; _ &apos; and append it to the end of cache _ key. return cache _ key .
define function _ generate _ cache _ key , with request , method , headerlist and key _ prefix as arguments .
ctx is an hashlib object , for calculating hash function with md5 algorithm .
for every header in headerlist ,
call method request.META.get with arguments header and None .
if value is not None ,
call function force _ bytes with value as argument , use the result to as the result for the call to the methgod ctx.update.
call iri _ to _ uri with return value of the request.build _ absolute _ uri method , us the result as the argument for the call to the
force _ bytes function , use the result as the argument for the call to the hashlib.mdb function , store the result in url. substitute the &apos; % s &apos; in string &apos; views.decorators.cache.cache _ page . % s . % s . % s . % s &apos; with key _ prefix , method ,
return value of method url.hexdigest ( ) , return value of method ctx.hexdigest , respectively , substitute it for cache _ key. call the function _ i18n _ cache _ key _ suffix with request and cache _ key as arguments , return the result .
define the funtion _ generate _ cache _ header _ key with key _ prefix and request as arguments .
call method request.build _ absolute _ uri , use the result as an argument for function call of iri _ to _ uri ,
use the result as an argument for function call of force _ bytes , use the result as an argument for calling the method hashlib.md5 , put the result in url. substitute the &apos; % s &apos; in string &apos; views.decorators.cache.cache _ header . % s . % s &apos; with key _ prefix and result of the function call ,
to the function url.hexdigest ( ) , respectively , substitute it for cache _ key. call the function _ i18n _ cache _ key _ suffix with request and cache _ key as arguments , return the result .
define the function get _ cache _ key , with request key _ prefix set to None , method set to &apos; GET &apos; and cache set to None as arguments .
if key _ prefix is None ,
substitute settings.CACHE _ MIDDLEWARE _ KEY _ PREFIX for key _ prefix .
call the function _ generate _ cache _ header _ key with key _ prefix and request as arguments , substitute the result for cache _ key .
if cache is None ,
set cache to the value of the dictionary caches under the key settings.CACHE _ MIDDLEWARE _ ALIAS .
get the value of dictionary cache under the key cache _ key , if key is not available return None , substitute it for headerlist .
if header list is not None ,
call the function _ generate _ cache _ key with request , method , headerlist , key _ prefix as arguments , return the result .
if not ,
return None .
define function learn _ cache _ key with request , response , cache _ timeout set to None , key _ prefix set to None , cache set to None as arguments .
if key _ prefix is None ,
substitute settings.CACHE _ MIDDLEWARE _ KEY _ PREFIX for key _ prefix .
if cache _ timeout is None ,
substitute settings.CACHE _ MIDDLEWARE _ SECONDS for cache _ timeout .
call function _ generate _ cache _ header _ key with arguments key _ prefix and request , substitute the result for cache _ key .
if cache is None ,
get value under the key settings.CACHE _ MIDDLEWARE _ ALIAS of caches dictionary , substitute with it the cache .
if call to the function response.has _ header with string &apos; Vary &apos; as an argument returns True ,
if eather of settings.USE _ I18N or settings.USE _ L10N is True , set is _ accept _ language _ redundant to True .
headerlist is an empty list .
for every header in list of strings compiled by splitting string cc _ delim _ re with value under the key &apos; Vary &apos; of response dictionary as a delimiter .
convert string header to uppercase and replace all occurrences of &apos; -&apos; with &apos; _ &apos; , substitute it for header .
if header equals a string &apos; ACCEPT _ LANGUAGE &apos; and is _ accept _ language _ redundant is boolean True ,
continue with the next iteration of the for loop .
append header to the string &apos; HTTP _ &apos; , append the result to the list headerlist .
call method sort on the headerlist .
call the method cache.set , with cache _ key , headerlist , cache _ timeout as arguments .
call the function _ generate _ cache _ key with request , request.method , headerlist , key _ prefix as arguments , return the result .
if not ,
call the method cache.set with cache _ key , an empty list and cache _ timeout as arguments .
call the function _ generate _ cache _ key with request , request.method , an empty list and key _ prefix as arguments , return the result .
define function _ to _ tuple with s as an argument .
split string s once , with &apos; = &apos; as delimiter , substitute the result for t .
if length of t equals to integer 2 ,
return tuple , consisting of first element of t converted to lowercase and second element of t .
return tuple , consisting of first element of t converted to lowercase and True .
_ _ all _ _ is an list with an element &apos; luhn &apos; .
from django.utils import six into default name space .
LUHN _ ODD _ LOOKUP is a tuple with 10 elements : integers 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 and 9 .
define the function luhn with an argument candidate .
if candidate is not an instance of six.string _ types ,
convert candidate to a string .
try ,
for every c in reversed order of candidate , convert c into an integer , sum all the results and substitute the result for evens .
for every c in candidate without the last element and in reversed order , convert c into an integer ,
use the result as an key to get the value from the LUHN _ ODD _ LOOKUP dictionary , sum all the results and substitute the result for odds. sum evens and odds , if the result is divisible by integer 10 , return boolean True , if not return boolean False .
if ValueError exception is caught ,
return boolean False .
from _ _ future _ _ import unicode _ literals into default name space .
import module hmac .
import module struc .
import module hashlib .
import module binascii .
import module time .
import module random .
try ,
random is an instance of random.SystemRandom class .
using _ sysrandom is boolean True .
if NotImplementedError exception is caught ,
import warnings .
call the function warnings.warn with an argument ,
string &apos; A secure pseudo-random number generator is not available on your system . Falling back to Mersenne Twister . &apos; . using _ sysrandom is boolean False .
from django.conf import settings into default name space .
from django.utils.encoding import force _ bytes into default name space .
from django.utils import six into default name space .
from django.utils.six.moves import xrange into default name space .
define the function salted _ hmac with 3 arguments : key _ salt , value and secret set to None .
if secret is None ,
substitute settings.SECRET _ KEY for secret .
call the function force _ bytes with an argument key _ salt , substitute the result for key _ salt .
call the function force _ bytes with an argument secret , substitute the result for secret .
call the method hashlib.sha1 with an argument secret appended to key _ salt , call the method digest on the result , return the result .
call the method hmac.new with 3 arguments : key , msg set to result of the function force _ bytes with an argument value ,
and digestmod set to hashlib.sha1 , return the result. define the function constant _ time _ compare with 2 arguments : length set to integer 12 ,
if using _ sysrandom is false ,
format string &quot; % s % s % s &quot; with 3 elements : result of the function random.getstate , result of the call the the function time.time ,
and settings.SECRET _ KEY , call on it method encode with an argument string &apos; utf-8 &apos; , use the result as an argument for the call to the method hashlib.sha256 , call the method digest on the result , use the result as an argument for the call to the function random.seed. call the function random.choice with an argument allowed _ chars , for every i in range of integers from 0 to lengths ,
join the results into a string , return it. if hmac has an attribute &quot; compare _ digest &quot; ,
define the function constant _ time _ compare with 2 arguments : val1 and val2 .
call the function hmac.compare _ digest with 2 arguments : result of the function force _ bytes called with an argument val1 ,
and result of the function force _ bytes called with an argument val2 , return the result. if not ,
call the function constant _ time _ compare with 2 arguments : val1 and val2 .
if lengths of val1 and val2 are not equal ,
return boolean False .
result is an integer 0 .
if six.PY3 is true and val1 and val2 are an instances of bytes ,
zip val1 and va2 into list of tuples , for every x and y in the result ,
perform bitwise exclusive OR on 2 operands x and y , perform bitwise OR with 2 operands : previous result and result , substitute the result for result .
if not ,
zip val1 and va2 into list of tuples , for every x and y in the result ,
perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y ,
perform bitwise OR with 2 operands : previous result and result , substitute the result for result. if result is equal to integer 0 , return boolean True , otherwise return boolean False .
define the function _ bin _ to _ long with an argument x .
call the function binascii.hexlify with an argument x , convert the result to base 16 integer , return the result .
define the function _ long _ to _ bin with 2 arguments : x and hex _ format _ string .
format string hex _ format _ string with x , call the method encode on the result with an argument string &apos; ascii &apos; ,
use the result as an argument for the call to the function binascii.unhexlify , return the result. if hashlib had an instance &quot; pbkdf2 _ hmac &quot; ,
define the function pbkdf2 with 5 arguments : password , salt , iterations , dklen set to integer 0 and digest set to None .
if digest is None ,
substitute hashlib.sha256 for digest .
if dklen is false ,
dklen is None .
call the function force _ bytes with an argument password , substitute the result for password .
call the function force _ bytes with an argument salt , substitute the result for salt .
call the function hashlib.pbkdf2 _ hmac with 5 arguments : field name of the result of the function digest , password , salt ,
iterations and dklen , return the result. if not ,
define the function pbkdf2 with 5 arguments : password , salt , iterations , dklen set to integer 0 and digest set to None .
if iterations is lesser than integer 0 , raise an error .
if digest is false ,
substitute hashlib.sha256 for digest .
call the function force _ bytes with an argument password , substitute the result for password .
call the function force _ bytes with an argument salt , substitute the result for salt .
call the function digest , substitute the filed digest _ size of the result for hlen .
if dklen is false ,
substitute hlen for dklen .
bring intger 2 to integer 32 , decrement the result by 1 , multiply it with hlen , if dklen is greater than the previous result ,
raise an OverflowError exception with an argument string &apos; dklen too big &apos; .
divide negative dklen with hlen , substitute floored result for l .
decrement l by integer 1 , multiply it with hlen , subtract the result from dklen , substitute the result for r .
hex _ format _ string is a string &quot; % % 0 % ix &quot; formated with hlen multiplied with integer 2 .
call the function digest twice , substitute the results for inner , outer , respectively .
if length of password is greater than inner.block _ size ,
call the function digest with an argument password , call the method digest on the result , substitute the result or password .
decrement by length of password , create bytes string with previous result number of characters &apos; \ x00 &apos; ,
append the result to password. call the method password.translate with an argument hmac.trans _ 36 , update inner dictionary with the result .
call the method password.translate with an argument hmac.trans _ 5C , update outer dictionary with the result .
define the function F with an argument i .
call the method struct.pack with 2 arguments : bytes string &apos; &gt; I &apos; and i , append the result to salt , substitute the result or u .
result is an integer 0 .
for every j in range of integers from 0 to iterations converted to an integer ,
call the function inner.copy , substitute the result for dig1 , call the function outer.copy , substitute the result for dig2 .
call the method dig1.update with an argument u .
call the method dig1.digest , use the result as an argument for the call to the function dig2.update.
call the method dig2.digest , substitute the result for u .
call the function _ bin _ to _ long with an argument u perform bitwise exclusive OR with 2 operands , previous result an result ,
substitute the result for result. call the function _ long _ to _ bin with 2 arguments : result and hex _ format _ string , return the result .
call the function F with an argument x , for every x in sequence of integers from 1 to l , not included ,
substitute the results in a list for T. join elements of T in a bytes string , append first r elements of result of the call to the function F with an argument l to it ,
import module os .
import module sys .
from . import six into default name space .
convert six.PY3 to an integer , substitute it for buffering .
if os.name equals string &apos; posix &apos; ,
define the function become _ daemon with 4 arguments : our _ home _ dir set to &apos; .&apos; , out _ log set to a string &apos; / dev / null &apos; ,
try ,
fork a child process , if the result equals integer 0 ,
close the process with an argument 0 .
if OSError , renamed to e , exception is caught ,
call the method sys.stderr.write with an argument string &quot; fork # 1 failed : ( % d ) % s \ n &quot; , formated with e.errno and e.strerror.
close the process with an argument 1 .
call the method os.setsid.
call the method os.chdir with an argument our _ home _ dir .
call the function os.umask with an argument umask .
try ,
fork a child process , if the result equals integer 0 ,
close the process with an argument 0 .
if OSError , renamed to e , exception is caught ,
call the method sys.stderr.write with an argument string &quot; fork # 2 failed : ( % d ) % s \ n &quot; , formated with e.errno and e.strerror.
call the method os . _ exit with an argument integer 1 .
open &apos; / dev / null &apos; file in read mode , substitute the result for si .
open out _ log flie in append mode with buffering size of input buffer , substitute the result for so .
open err _ log flie in append mode with buffering size of input buffer , substitute the result for se .
call the method os.dup2 with 2 arguments : result of the method si.fileno and result of the method sys.stdin.fileno.
call the method os.dup2 with 2 arguments : result of the method so.fileno and result of the method sys.stdout.fileno.
call the method os.dup2 with 2 arguments : result of the method se.fileno and result of the method sys.stderr.fileno.
substitute so and se for sys.stdout and sys.stderr.
if not ,
define the function become _ daemon with 4 argument : our _ home _ dir set to &apos; .&apos; , out _ log set to None , err _ log set to None ,
call the method os.chdir with an argument our _ home _ dir .
call the method os.umask with an argument umask .
call the method sys.stdin.close.
call the method sys.stdout.close.
call the method sys.stderr.close.
if err _ log is true ,
open err _ log file in append mode with buffering size of the input buffer , substitute the result for sys.stderr.
if not ,
sys.stderr is an instance of NullDevice class .
if out _ log is true ,
open out _ log file in append mode with buffering size of the input buffer , substitute the result for sys.stdout.
if not ,
sys.stdout is an instance of NullDevice class .
derive the class NullDevice .
define the method write with 2 arguments : self and s .
do nothing .
import module copy .
import module warnings .
from collections import OrderedDict into default name space .
from django.utils import six into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
derive the class MergeDict from the object base class .
define the method _ _ init _ _ with 2 arguments : self and unpacked list dicts .
call the function warnings.warn with 3 arguments : string &apos; `MergeDict` is deprecated , use `dict.update ( ) ` instead . &apos; ,
RemovedInDjango19Warning and integer 2. substitute dicts for self.dicts.
define the method _ _ bool _ _ with an argument self .
if any element of self.dicts is true , return boolean True , otherwise return boolean False .
define the method _ _ nonzero _ _ with an argument self .
get the type of self object , call its method _ _ bool _ _ with an argument self , return the result .
define the method _ _ getitem _ _ with 2 arguments : self and key .
for every dict _ in self.dicts ,
try ,
return value under key key of dict _ dictionary .
if KeyError exception is caught ,
do nothing .
rise an KeyError exception with an argument key .
define the method _ _ copy _ _ with an argument self .
call the method _ _ copy _ _ with an argument unpacked list self.dicts , return the result .
define the method get with 3 arguments : self , key and default set to None .
try ,
return value under key key of self dictionary
if KeyError exception is caught ,
return default .
define the method getlist with 2 arguments : self and key .
for every dict _ in self.dicts ,
if key is contained in dict _ ,
call the method dict _ .getlist with an argument key , return the result .
return an empty list .
define the method _ iteritems with an argument self .
seen is an empty set .
for every dict _ in self.dicts ,
call the function six.iteritems with an argument dict _ , for every item in the result ,
substitute first element of item for k .
if k is contained in seen ,
skip this loop iteration .
add k to seen .
yield item .
define the method _ iterkeys with an argument self .
call the method self . _ iteritems , for every k and v in the result ,
yield k .
define the method _ itervalues with an argument self .
call the method self . _ iteritems , for every k and v in the result ,
yield v.
if six.PY3 is true ,
substitute _ iteritems for items .
substitute _ iterkeys for keys .
substitute _ itervalues for values .
if not ,
substitute _ iteritems for iteritems .
substitute _ iterkeys for iterkeys .
substitute _ itervalues for itervalues .
define the method items with an argument self .
call the method self.iteritems , return the list of results .
define the method keys with an argument self .
call the method self.iterkeys , return the list of results .
define the method values with an argument self .
call the method self.itervalues , return the list of results .
define the method has _ key with 2 arguments : self and key .
for every dict _ in self.dicts ,
if key is contained in dict _ ,
return boolean True .
return boolean False .
substitute has _ key for _ _ contains _ _ .
substitute _ iterkeys for _ _ iter _ _ .
define the method copy with an argument self .
call the method self . _ _ copy _ _ , return the result .
define the method _ _ str _ _ with an argument self .
get dictionary self items , convert the result into a dictionary , convert the result into a string and return it .
define the method _ _ repr _ _ with an argument self .
join printable representation of d into a string separated with &apos; , &apos; , for every d in self.dicts , substitute the result for dictreprs .
return a string &apos; % s ( % s ) &apos; formated with self . _ _ class _ _ . _ _ name _ _ and dictreprs .
derive the class SortedDict from the dict base class .
define the method _ _ new _ _ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs .
call the method _ _ new _ _ from the base class of the class SortedDict , with 3 arguments : cls , unpacked list args ,
and unpacked dictionary kwargs. instance.keyOrder is an empty list .
return instance .
define the method _ _ init _ _ with 2 arguments : self and data set to None .
call the function warnings.warn with 3 arguments : string &quot; SortedDict is deprecated and will be removed in Django 1.9 . &quot; ,
RemovedInDjango19Warning and stacklevel set to integer 2. if data is None or data is an instance of dict type ,
if data is true , substitute it for data , otherwise data is an empty list .
call the method _ _ init _ _ from the base class of the class SortedDict , called with an argument data .
if data is true , substitute list created from elements of data , substitute it for self.keyOrder , otherwise self.keyOrder is an empty list .
if not ,
call the method _ _ init _ _ from the base class of the class SortedDict .
substitute _ _ setitem _ _ filed of the base class of the class SortedDict for super _ set .
for every key and value in data ,
if key is not contained in self ,
append key to self.keyOrder.
call the function super _ set with 2 arguments : key and value .
define the method _ _ deepcopy _ _ with 2 arguments : self and memo .
call the method self . _ _ class _ _ with an argument list , with 2 elements : key and result of the function copy.deepcopy ,
called with 2 arguments : value and memo , for every key and value in result for the method self.items , return the result. define the method _ _ copy _ _ with an argument self .
call the method self.copy , return the result .
define the method _ _ setitem _ _ with 3 arguments : self , kay and value .
if key is not contained in self ,
append key to self.keyOrder.
call the method _ _ setitem _ _ from the base class of the class SortedDict , with 2 arguments key and value .
define the method _ _ delitem _ _ with 2 arguments : self and key .
call the method _ _ delitem _ _ from the base class of the class SortedDict , with an argument key .
remove key element from self.keyOrder dictionary .
define the method _ _ iter _ _ with an argument self .
return iterable self.keyOrder.
define the method _ _ reversed _ _ with an argument self .
reverse order of elements of self.keyOrder , return the result .
define the method pop with 3 arguments : self , k and unpacked list args .
call the method pop from the base class of the class SortedDict , with 2 arguments k and unpacked list args ,
substitute the result for result. try ,
remove k element from self.keyOrder dictionary .
if ValueError exception is caught ,
do nothing .
return result .
define the method popitem with an argument self .
call the method popitem from the base class of the class SortedDict , substitute the result for result .
remove first element of result from self.keyOrder dictionary .
return result .
define the method _ iteritems with an argument self .
for every key in self.keyOrder ,
yield key and value under key key of self dictionary .
define the method _ iterkeys with an argument self .
for every key in self.keyOrder ,
yield key .
define the method _ itervalues with an argument self .
for every key in self.keyOrder ,
yield value under key key of self dictionary .
if six.PY3 is true ,
substitute _ iteritems for items .
substitute _ iterkeys for keys .
substitute _ itervalues for values .
if not ,
substitute _ iteritems for iteritems .
substitute _ iterkeys for iterkeys .
substitute _ itervalues for itervalues .
define the method items with an argument self .
put a tuple with 2 elements : k and value under k key of self dictionary into a list , for every k in self.keyOrder ,
return resulting list. define the method keys with an argument self .
return hard copy of self.keyOrder elements .
define the method values with an argument self .
append value under k key of self dictionary to a list , for every k in self.keyOrder , return the result .
define the method update with 2 arguments : self and dict _ .
call the method six.iteritems with an argument dict _ , for every k and v in the result ,
substitute v for value under the k key of self dictionary .
define the method setdefault with 3 arguments : self , key and default .
if key is not contained in self ,
append key to self.keyOrder dictionary .
call the method setdefault from the base class of the class SortedDict , with 2 arguments key and default , return the result .
define the method copy with an argument self .
call the method self . _ _ class _ _ with an argument self , return the result .
define the method _ _ repr _ _ with an argument self .
for every k and v in result of the function six.iteritems , called with an argument self ,
joining string &apos; % r : % r &apos; formated with k and v into a string , separated with &apos; , &apos; , use it to format a string &apos; { % s } &apos; , return it. define the method clear with an argument self .
call the method clear from the base class of the class SortedDict .
self.keyOrder is an empty list .
derive the class OrderedSet from the object base class .
define the method _ _ init _ _ with 2 arguments : self and iterable set to None .
self.dict is an instance of OrderedDict class , created with arguments : tuples with 2 argument x and None , for every x in iterables ,
if iterable is true , otherwise use an empty list as an argument. define the method add with 2 arguments : self and item .
value under the item key of self.dict dictionary is None .
define the method remove with 2 arguments : self and item .
delete entry under item key of self.dict dictionary .
define the method discard with 2 arguments : self and item .
try ,
remove item from self dictionary .
if KeyError exception is caught ,
do nothing .
define the method _ _ iter _ _ with an argument self .
convert keys of dictionary self.dict into a iterable , return it .
define the method _ _ contains _ _ with 2 arguments : self and item .
if item is contained in self.dict , return boolean True , otherwise return boolean False .
define the method _ _ nonzero _ _ with an argument self .
convert self.dict into boolean , return the result .
derive the class MultiValueDictKeyError from the KeyError base class .
do nothing .
derive the class MultiValueDict from the dict base class .
define the method _ _ init _ _ with 2 arguments : self and key _ to _ list _ mapping set to an empty tuple .
call the method _ _ init _ _ from the base class of the class MultiValueDict , with an argument key _ to _ list _ mapping .
define the method _ _ repr _ _ with an argument self .
return a string &quot; &lt; % s : % s &gt; &quot; formated with self . _ _ class _ _ . _ _ name _ _ ,
and a result of the method _ _ repr _ _ called from instance of base class of the MultiValueDict class. define the method _ _ getitem _ _ with 2 arguments : self and key .
try ,
call the method _ _ getitem _ _ from the base class of the class MultiValueDict , with an argument key , substitute the result for list _ .
if KeyError exception is caught ,
raise an MultiValueDictKeyError exception with printable representation of key .
try ,
return last element of list _ .
if IndexError exception is caught ,
return an empty list .
define the method _ _ setitem _ _ with 3 arguments : self , key and value .
call the method _ _ setitem _ _ from the base class of the class MultiValueDict , with 2 arguments key and list containing element value .
define the method _ _ copy _ _ with an argument self .
call the method self . _ _ class _ _ with an argument list , with elements : tuples with 2 elements : k and hard copy of list v ,
for every k and v in result of method the self.lists. define the method _ _ deepcopy _ _ with 2 arguments : self and memo set to None .
if memo is None ,
memo is an empty dictionary .
call the method self . _ _ class _ _ , substitute the result for result .
substitute result for value under the id of self key of memo dictionary .
for every key and value in items of dictionary self ,
call the method dict . _ _ setitem _ _ with 3 arguments : result , result of the function copy.deepcopy , called with 2 arguments : key ,
and memo , and result of the function copy.deepcopy called with 2 arguments : value and memo. return result .
define the method _ _ getstate _ _ with an argument self .
call the method self . _ _ dict _ _ .copy , substitute the result for obj _ dict .
value under &apos; _ data &apos; key of obj _ dict is a dictionary created with tuples containing 2 elements : k and result of the function ,
self.getlist with an argument k , for every k in self. return obj _ dict .
define the method _ _ setstate _ _ with 2 arguments : self and obj _ dict .
remove element under &apos; _ data &apos; key of obj _ dict dictionary , if it exists substitute it for data , if not data is an empty list .
call the method data.items , for every k and v in the result ,
call the method self.setlist with 2 arguments : k and v.
update self . _ _ dict _ _ dictionary with obj _ dict .
define the method get with 3 arguments : self , key and default set to None .
try ,
substitute value under the key key of self dictionary for val .
if KeyError exception is caught ,
return default ,
if val equals an empty list .
return default .
return val .
define the method getlist with 3 arguments : self , key and default set to None .
try ,
call the method _ _ getitem _ _ from the base class of the class MultiValueDict , with an argument key , return the result ..
if KeyError exception is caught ,
if default is None ,
return an empty list .
return default .
define the method setlist with 3 arguments : self , key and list _ .
call the method _ _ setitem _ _ from the base class of the class MultiValueDict , with 2 arguments key and list _ .
define the method setdefault with 3 arguments : self , key and default set to None .
if key is not contanied in self ,
substitute default for value under the key key of self dictionary .
return value under the key key of self dictionary .
define the method setlistdefault with 3 arguments : self , key and default _ list set to None .
if key is not contained in self ,
if default _ list is None ,
default _ list is an empty list .
call the method self.setlist with 2 arguments : key and default _ list .
call the method self.getlist with an argument key , return the result .
define the method appendlist with 3 arguments : self , key and value .
call the method self.setlistdefault with an argument key , append value to the result .
define the method _ iteritems with an argument self .
for every key in self ,
yield key and value under the key key of self dictionary .
define the method _ iterlists with an argument self .
call the function six.iteritems with an argument : instance of base class of the MultiValueDict class , return the result .
define the method _ itervalues with an argument self .
for every key in self ,
yield value under key key of self dictionary .
if six.PY3 is true ,
substitute _ iteritems for items .
substitute _ iterlists for lists .
substitute _ itervalues for values .
if not ,
substitute _ iteritems for iteritems .
substitute _ iterlists for iterlists .
substitute _ itervalues for itervalues .
define the method items with an argument self .
call the method self.iteritems , return list of results .
define the method lists with an argument self .
call the method self.iterlists , return list of results .
define the method values with an argument self .
call the method self.itervalues , return list of results .
define the method copy with an argument self .
call the method copy.copy with an argument self , return the result .
define the method update with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
if length of args is greater than integer 1 ,
raise an TypeError with an argument string &quot; update expected at most 1 arguments , got % d &quot; formated with length of args .
if args is true ,
substitute first args for other _ dict .
if other _ dict is an instance of MultiValueDict .
call the method other _ dict.lists , for every key and value _ list in result ,
call the method self.setlistdefault with an argument key , extend the result with value _ list .
if not ,
trym
for every key and value in items of other _ dict dictionary ,
call the method self.setlistdefault with an argument key , append value to the result .
if TypeError exception is caught ,
raise an ValueError with an argument string &quot; MultiValueDict.update ( ) takes either a MultiValueDict or dictionary &quot; .
call the function six.iteritems with an argument kwargs , for every key and value in the result ,
call the method self.setlistdefault with an argument key , append value to the result .
define the method dict with an argument self .
return dictionary created with tuples with 2 elements : key and value under the key key of self dictionary , for every key in self .
derive the class ImmutableList from the tuple base class .
define the method _ _ new _ _ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs .
if &apos; warning &apos; is contained in kwargs ,
substitute value under &apos; warning &apos; key of kwargs dictionary for warning .
delete element under &apos; warning &apos; key of kwargs dictionary .
if not ,
warning is a string &apos; ImmutableList object is immutable . &apos; .
call the method tuple . _ _ new _ _ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs , substitute the result for self .
substitute warning for self.warning.
return self .
define the method complain with 3 arguments : self , unpacked dictionary wargs and unpacked dictionary kwargs .
if self.warning is an instance of Exception class ,
raise self.warning.
if not ,
raise an raise self.warning with an argument self.warning.
substitute complain for _ _ delitem _ _ .
substitute complain for _ _ delslice _ _ .
substitute complain for _ _ iadd _ _ .
substitute complain for _ _ imul _ _ .
substitute complain for _ _ setitem _ _ .
substitute complain for _ _ setslice _ _ .
substitute complain for append .
substitute complain for extend .
substitute complain for insert .
substitute complain for pop .
substitute complain for remove .
substitute complain for sort .
substitute complain for reverse .
derive the class DictWrapper from the dict base class .
define the method _ _ init _ _ with 4 arguments : self , data , func and prefix .
call the method _ _ init _ _ with an argument data , from the base class of the class DictWrapper .
substitute func for self.func.
substitute prefix for self.prefix.
define the method _ _ getitem _ _ with 2 arguments : self and key .
if key starts with self.prefix.
use _ func is boolean True .
key is a list with elements of list key from length of self.prefixes index to the end ,
if not ,
use _ func is boolean False .
call the method _ _ getitem _ _ with an argument key from the base class of the class DictWrapper , substitute the result for value .
if use _ func is true ,
call the method self.func with an argument value .
return value .
from _ _ future _ _ import unicode _ literals into default name space .
import module re .
import module time .
import module calendar .
import module datetime .
from django.utils.dates import MONTHS , MONTHS _ 3 , MONTHS _ ALT , MONTHS _ AP , WEEKDAYS and WEEKDAYS _ ABBR into default name space .
from django.utils.translation import ugettext as _ into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils import six into default name space .
from django.utils.timezone import get _ default _ timezone , is _ aware and is _ naive into default name space .
compile regex from a string &apos; ( ? &lt; ! \ \ ) ( &#91; aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ &#93; ) &apos; , substitute it for re _ formatchars .
compile regex from a string &apos; \ \ ( . ) &apos; , substitute it for re _ escaped .
derive the class Formatter from object base class .
define the function format with 2 arguments self and formatstr .
pieces is an empty list .
call the function force _ text with an argument formatstr , use the result as an argument for the call to the method ,
re _ formatchars.split , for every i and piece in enumerated result , if i is even number ,
get attribute piece of the self object , call it and use the result as an argument for the call to the function force _ text ,
append the result to pieces. otherwise if piece is true ,
call the method re _ escaped.sub with 2 arguments : raw string &apos; \ 1 &apos; and piece , append the result to pieces .
join elements of pieces into a string , return it .
derive the class TimeFormat from the base class Formatter .
define the method _ _ init _ _ with 2 arguments : self and obj .
substitute obj for self.data.
self.timezone is None .
if obj is an instance of datetime.datetime ,
call the function is _ naive with an argument obj .
call the function get _ default _ timezone , substitute the result for self.timezone.
if not ,
substitute obj.tzinfo for self.timezone.
define the method a with an argument self .
if self.data.hour is greater than integer 11 ,
call the function _ with an argument string &apos; p.m. &apos; , return the result .
call the function _ with an argument string &apos; a.m. &apos; , return the result .
define the method A with an argument self .
if self.data.hour is greater than integer 11 ,
call the function _ with an argument string &apos; PM &apos; , return the result .
call the function _ with an argument string &apos; AM &apos; , return the result .
define the method B with an argument self .
raise an NotImplementedError exception with an argument string &apos; may be implemented in a future release &apos; .
define the method e with an argument self .
if self.timezone is false ,
return an empty string .
try ,
is self.data has an attribute &apos; tzinfo &apos; and self.data.tzinfo is true ,
call the method self.data.tzinfo.tzname with an argument self.data , if it is true , return it , otherwise return an empty string .
if NotImplementedError exception is caught ,
do nothing .
return an empty string .
define the method f with an argument self .
if self.data.minute equals integer 0 ,
call the method self.g , return the result .
return a string &apos; % s : % s &apos; formated with the results of the functions self.g and self.i , respectivley .
define the method g with an argument self .
if self.data.hour equals integer 0 ,
return integer 12 .
if self.data.hour is greater than inreger 12 ,
subtract integer 12 from self.data.hour , return the result .
return self.data.hour.
define the method G with an argument self .
return self.data.hour.
define the method h with an argument self .
return a string &apos; % 02d &apos; formated with the result of the function self.g.
define the method H with an argument self .
return a string &apos; % 02d &apos; formated with the result of the function self.G.
define the method i with an argument self .
return a string &apos; % 02d &apos; formated with self.data.minute.
define the method O with an argument self .
if self.timezone is false ,
return an empty string .
call the method self.Z , substitute the result for seconds .
if seconds smaller than integer 0 , sign is &apos; -&apos; , otherwise sign is &apos; + &apos; ,
substitute absolute seconds for seconds .
return a string &quot; % s % 02d % 02d &quot; formated with sign , floored result of the division of seconds by integer 3000 ,
reminder of the division of floored result of division of seconds by 60 , by integer 60. define the method P with an argument self .
if self.data.minute equals integer 0 and self.data.hour equals integer 0 ,
call the function _ with an argument string &apos; midnight &apos; , return the result .
if self.data.minute equals integer 0 and self.data.hour equals integer 12 ,
call the function _ with an argument string &apos; noon &apos; , return the result .
return a string &apos; % 02d &apos; formated with self.data.month.
define the method s with an argument self .
return a string &apos; % 02d &apos; formated with self.data.second.
define the method T with an argument self .
if self.timezone is false ,
return an empty string .
if self.timezone is true , call the method self.timezone.tzname with an argument self.data , substitute the result for name ,
otherwise name is None. if name is None ,
call the method self.format with an argument string &apos; 0&apos; , substitute the result for name .
call the function six.text _ type with an argument name , return the result .
define the method u with an argument self .
return a string &apos; % 06d &apos; formated with self.data.microsecond.
define the method Z with an argument self .
if self.timezone is true ,
return an empty string .
call the method self.timezone.utcoffset with an argument self.data , substitute the result for offset .
multiply offset.days with 86400 , add offset.seconds to the result , return the result .
derive the class DateFormat from the base class TimeFormat .
year _ days is a list with 13 elements : None , integer 0 , integer 31 , integer 59 , integer 90 , integer 120 , integer 151 , integer 181 ,
integer 212 , integer 243 , integer 273 , integer 304 and integer 334. define the method b with an argument self .
return the value under the self.data.month key of the MONTHS _ 3 dictionary .
define the method c with an argument self .
call the method self.data.isoformat , return the result .
define the method d with an argument self .
return a string &apos; % 02d &apos; formated with self.data.day.
define the method D with an argument self .
call the method self.data.weekday , use the result as an key for obtaining WEEKDAYS _ ABBR dictionary value , return it .
define the method E with an argument self .
return the value under the self.data.month key of the MONTHS _ ALT dictionary .
define the method F with an argument self .
return the value under the self.data.month key of the MONTHS dictionary .
define the method I with an argument self .
if self.timezone is true and call to the method self.timezone.dst with an argument self.data , evaluates to true ,
return string &apos; 1&apos; .
if not ,
return string &apos; 0&apos; .
define the method j with an argument self .
return self.data.day.
define the method l with an argument self .
call the method self.data.weekday , use the result as an key for obtaining WEEKDAYS dictionary value , return it .
define the method L with an argument self .
call the method calendar.isleap with an argument self.data.year , return the result .
define the method m with an argument self .
return a string &apos; % 02d &apos; formated with self.data.month.
define the method M with an argument self .
get the value under the self.data.month key of the MONTHS _ 3 dictionary , call on it the method title , return the result .
define the method n with an argument self .
return self.data.month.
define the method N with an argument self .
return the value under the self.data.month key of the MONTHS _ AP dictionary .
define the method o with an argument self .
call the method self.data.isocalendar , return the first element of the result .
define the method r with an argument self .
call the method return self.format with an argument string &apos; D , j M Y H : i : s O &apos; , return the result .
define the method S with an argument self .
if self.data.day equals integer 11 , 12 or 13 ,
return string &apos; th &apos; .
divide self.data.day by 10 , substitute reminder of the result for last .
if las equals integer 1 ,
return string &apos; st &apos; .
if las equals integer 2 ,
return string &apos; nd &apos; .
if las equals integer 3 ,
return string &apos; rd &apos; .
return string &apos; th &apos; .
define the method t with an argument self .
call the method calendar.monthrange with 2 arguments : self.data.year and self.data.month ,
format string &apos; % 02d &apos; with the second element of the result , return it. define the method U with an argument self .
if self.data is an instance of datetime.datetime and result of the function is _ aware called with an argument self.data evaluates to true ,
call the method self.data.utctimetuple , use the result as an argument for the call to the function calendar.timegm ,
return result converted into an integer. if not ,
call the method self.data.timetuple , use the result as an argument for the call to the function time.mktime ,
return result converted into an integer. define the method w with an argument self .
call the method self.data.weekday , increment the result by an integer 1 , divide it with integer 7 , return the reminder of the division .
define the method W with an argument self .
week _ number is None .
call the method self.data.replace with 2 arguments : month as integer 1 and day as integer 1 , on the result call the method ,
weekday , increment the result by integer 1 and substitute it for jan1 _ weekday. call the method self.data.weekday , increment the result by integer 1 , substitute the result for weekday .
call the method self.z , substitute the result for day _ of _ year .
if day _ of _ year is smaller than or equalt to jan1 _ weekday subtracted from integer 8 and jan1 _ weekday is greater than integer 4 ,
if jan1 _ weekday equals integer 5 , or if jan1 _ weekday equals integer 6 and call to the function calendar.isleap ,
with an argument self.data.year decremented by 1 , evaluates to true , week _ number is integer 53 .
if not ,
week _ number is integer 52 .
if not ,
call the function calendar.isleap with an argument self.data.year , if it evaluates to true ,
i is integer 366 .
if not ,
i is integer 365 .
subtract day _ of _ year from i , if the result is smaller than the result of subtraction of weekday from integer 4 ,
week _ number is integer 1 .
if not ,
sum day _ of _ year , result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1 _ weekday .
divide j by integer 7 , substitute the floored result for week _ number .
if jan1 _ weekday is greater than integer 4 ,
decrement week _ number by integer 1 .
return week _ number .
define the method y with an argument self .
call the function six.text _ type with an argument self.data.year , return the result without the first 2 elements .
define the method Y with an argument self .
return self.data.year.
define the method z with an argument self .
append self.data.day to the value under the self.data.month key of the self.year _ days dictionary , substitute the result for doy .
if call to the method self.L evaluates to true , and result of the call to the method self.data.month is greater than integer 2 ,
increment doy by integer 1 .
return doy .
define the function format with 2 arguments : value and format _ string .
df is an instance of DateFormat class , created with an argument value .
call the method df.format with an argument format _ string , return the result .
define the function time _ format with 2 arguments : value and format _ string .
tf is an instance of TimeFormat class , created with an argument value .
call the method tf.format with an argument format _ string , return the result .
import module datetime .
import module re .
from django.utils import six into default name space .
from django.utils.timezone import utc and get _ fixed _ timezone into default name space .
compile regex from raw string &apos; ( ? P &lt; year &gt; \ d { 4 } ) - ( ? P &lt; month &gt; \ d { 1,2 } ) - ( ? P &lt; day &gt; \ d { 1,2 } ) $ &apos; , substitute it for date _ re .
compile regex from raw string &apos; ( ? P &lt; hour &gt; \ d { 1,2 } ) : ( ? P &lt; minute &gt; \ d { 1,2 } ) ( ? : : ( ? P &lt; second &gt; \ d { 1,2 } ) ( ? : \ . ( ? P &lt; microsecond &gt; \ d { 1,6 } ) \ d { 0,6 } ) ? ) ? &apos; ,
substitute it for time _ re. compile regex from raw string &apos; ( ? P &lt; year &gt; \ d { 4 } ) - ( ? P &lt; month &gt; \ d { 1,2 } ) - ( ? P &lt; day &gt; \ d { 1,2 } ) &#91; T &#93; ( ? P &lt; hour &gt; \ d { 1,2 } ) : ( ? P &lt; minute &gt; \ d { 1,2 } ) &apos;
&apos; ( ? : : ( ? P &lt; second &gt; \ d { 1,2 } ) ( ? : \ . ( ? P &lt; microsecond &gt; \ d { 1,6 } ) \ d { 0,6 } ) ? ) ? ( ? P &lt; tzinfo &gt; Z &#124; &#91; + - &#93; \ d { 2 } ( ? : : ? \ d { 2 } ) ? ) ? $ &apos; , substitute it for datetime _ re. define the function parse _ date with an argument value .
match regex date _ re with value , substitute the result for match .
if match is true ,
call the method match.groupdict , use the result as an argument for the call to the function six.iteritems ,
for every k and v in the previous result , add a key into a dictionary : v converted to an integer for k , substitute the resulting dictionary for kw. call the method datetime.date with an argument unpacked dictionary kw , return the result .
define the function parse _ time with an argument value .
match regex time _ re with value , substitute the result for match .
if match is true ,
call the method match.groupdict , substitute the result for kw .
if value under the &apos; microsecond &apos; key of the kw dictionary is true ,
left justify value under the &apos; microsecond &apos; key of the kw dictionary , in the field of width 6 , fill the rest with &apos; 0&apos; ,
substitute the result for value under the &apos; microsecond &apos; key of the kw dictionary. update a dictionary with an entry v converted to an integer for k , for every k and v in result of the function six.iteritems ,
called with an argument kw , only if v is not None , substitute the result for kw. call the method datetime.time with an argument unpacked dictionary kw , return the result .
define the function parse _ datetime with an argument value .
match regex datetime _ re with value , substitute the result for match .
if match is true ,
call the method match.groupdict , substitute the result for kw .
if value under the &apos; microsecond &apos; key of the kw dictionary is true ,
left justify value under the &apos; microsecond &apos; key of the kw dictionary , in the field of width 6 , fill the rest with &apos; 0&apos; ,
substitute the result for value under the &apos; microsecond &apos; key of the kw dictionary. remove entry under the &apos; tzinfo &apos; key of the kw dictionary , substitute it for tzinfo .
if tzinfo equals a string &apos; Z &apos; ,
substitute utc for tzinfo .
otherwise if tzinfo is not None ,
if length of tzinfo is greater than integer 3 , convert elements of tzinfo from indexes 1 to 3 to an integer ,
substitute the result for offset _ mins , otherwise offset _ mins is integer 0. convert elements of tzinfo from indexes 1 to 3 to an integer , multiply it by integer 60 and increment it by offset _ mins ,
substitute the result for offset. if first element of tzinfo equals &apos; -&apos; ,
multiply offset by integer -1 .
call the function get _ fixed _ timezone with an argument offset , substitute the result for tzinfo .
update a dictionary with an entry v converted to an integer for k , for every k and v in result of the function six.iteritems ,
called with an argument kw , only if v is not None , substitute the result for kw. substitute tzinfo for value under the &apos; tzinfo &apos; key of the kw dictionary .
call the method datetime.datetime with an argument unpacked dictionary kw , return the result .
from django.utils.translation import ugettext _ lazy as _ and pgettext _ lazy into default name space .
WEEKDAYS is an dictionary with 7 entries : result of the call to the function _ with an argument string &apos; Monday &apos; for 0 ,
result of the call to the function _ with an argument string &apos; Tuesday &apos; for 1 , result of the call to the function _ with an argument string &apos; Wednesday &apos; for 2 , result of the call to the function _ with an argument string &apos; Thursday &apos; for 3 , result of the call to the function _ with an argument string &apos; Friday &apos; for 4 , result of the call to the function _ with an argument string &apos; Saturday &apos; for 5 , and result of the call to the function _ with an argument string &apos; Sunday &apos; for 6 . WEEKDAYS _ ABBR is an dictionary with 7 entries : result of the call to the function _ with an argument string &apos; Mon &apos; for 0 ,
result of the call to the function _ with an argument string &apos; Tue &apos; for 1 , result of the call to the function _ with an argument string &apos; Wed &apos; for 2 , result of the call to the function _ with an argument string &apos; Thu &apos; for 3 , result of the call to the function _ with an argument string &apos; Fri &apos; for 4 , result of the call to the function _ with an argument string &apos; Sat &apos; for 5 , and result of the call to the function _ with an argument string &apos; Sun &apos; for 6 . WEEKDAYS _ REV is an dictionary with 7 entries : 0 for &apos; monday &apos; , 1 for &apos; tuesday &apos; , 2 for &apos; wednesday &apos; , 3 for &apos; thursday &apos; , 4 for &apos; friday &apos; , 5 for &apos; saturday &apos; and 6 for &apos; sunday &apos; .
MONTHS is an dictionary with 12 entries : result of the call to the function _ with an argument string &apos; January &apos; for 1 ,
result of the call to the function _ with an argument string &apos; February &apos; for 2 , result of the call to the function _ with an argument string &apos; March &apos; for 3 , result of the call to the function _ with an argument string &apos; April &apos; for 4 , result of the call to the function _ with an argument string &apos; May &apos; for 5 , result of the call to the function _ with an argument string &apos; June &apos; for 6 , result of the call to the function _ with an argument string &apos; July &apos; for 7 , result of the call to the function _ with an argument string &apos; August &apos; for 8 , result of the call to the function _ with an argument string &apos; September &apos; for 9 , result of the call to the function _ with an argument string &apos; October &apos; for 10 , result of the call to the function _ with an argument string &apos; November &apos; for 11 , and result of the call to the function _ with an argument string &apos; December &apos; for 12 . MONTHS _ 3 is an dictionary with 12 entries : result of the call to the function _ with an argument string &apos; jan &apos; for 1 ,
result of the call to the function _ with an argument string &apos; feb &apos; for 2 , result of the call to the function _ with an argument string &apos; mar &apos; for 3 , result of the call to the function _ with an argument string &apos; apr &apos; for 4 , result of the call to the function _ with an argument string &apos; may &apos; for 5 , result of the call to the function _ with an argument string &apos; jun &apos; for 6 , result of the call to the function _ with an argument string &apos; jul &apos; for 7 , result of the call to the function _ with an argument string &apos; aug &apos; for 8 , result of the call to the function _ with an argument string &apos; sep &apos; for 9 , result of the call to the function _ with an argument string &apos; oct &apos; for 10 , result of the call to the function _ with an argument string &apos; nov &apos; for 11 , result of the call to the function _ with an argument string &apos; dec &apos; for 12 . MONTHS _ 3 _ REV is an dictionary with 12 entries : 1 for &apos; jan &apos; , 2 for &apos; feb &apos; , 3 for &apos; mar &apos; , 4 for &apos; apr &apos; , 5 for &apos; may &apos; , 6 for &apos; jun &apos; ,
7 for &apos; jul &apos; , 8 for &apos; aug &apos; , 9 for &apos; sep &apos; , 10 for &apos; oct &apos; , 11 for &apos; nov &apos; and 12 for &apos; dec &apos; . MONTHS _ AP is an dictionary with 12 entries : result of the function pgettext _ lazy with 2 arguments : &apos; abbrev. month &apos; and &apos; Jan. &apos; for 1 ,
result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; Feb. &apos; for 2 , result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; March &apos; for 3 , result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; April &apos; for 4 , result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; May &apos; for 5 , result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; June &apos; for 6 , result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; July &apos; for 7 , result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; Aug. &apos; for 8 , result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; Sept . &apos; for 9 , result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; Oct. &apos; for 10 , result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; Nov. &apos; for 11 , result of the function pgettext _ lazy with 2 arguments : strings &apos; abbrev. month &apos; and &apos; Dec. &apos; for 12 , MONTHS _ ALT is an dictionary with 12 entries : result of the function pgettext _ lazy with 2 arguments : &apos; alt. month &apos; and &apos; January &apos; for 1 ,
from datetime import date as real _ date and datetime as real _ datetime into default name space .
import module re .
import module time .
derive the class date from the real _ date base class .
define the method strftime with 2 arguments : self and fmt .
call the function strftime with 2 arguments : self and fmt , return the result .
derive the class datetime from the real _ datetime base class .
define the method strftime with 2 arguments : self and fmt .
call the function strftime with 2 arguments : self and fmt , return the result .
decorator classmethod ,
define the method combine with 3 arguments : cls , date and time .
call the function cls with 8 arguments : date.year , date.month , date.day , time.hour , time.minute , time.second , time.microsecond ,
and time.tzinfo , return the result. define the method date with an argument self .
call the function data with 3 arguments : self.year , self.month and self.day , return the result .
define the function new _ date with an argument d .
call the function data with 3 arguments : d.year , d.month and d.day , return the result .
define the function new _ datetime with an argument d .
kw is a list with 3 elements : d.year , d.month and d.day.
if d is an instance of real _ datetime class ,
extend list kw with a list with 5 elements : d.hour , d.minute , d.second , d.microsecond and d.tzinfo.
call the function datetime with an argument unpacked list kw , return the result .
compile the regex from the raw string &quot; ( ( ^ &#124; &#91; ^ % &#93; ) ( % % ) * % &#91; sy &#93; ) &quot; , substitute the result for _ illegal _ formatting .
define the function _ findall with 2 arguments text and substr .
sites is an empty list .
i is integer 0 .
endless loop ,
call the method text.find with 2 arguments : substr and i , substitute the result for j .
if j equals to integer -1 ,
break from the loop execution .
append j to sites .
add j and integer 1 , substitute the result for i .
return sites .
define the function strftime with 2 arguments dt and fmt .
if dt.year is greater than or equal to integer 1900 ,
call the method strftime with an argument fmt , from the base class of the type of dt class .
call the method _ illegal _ formatting.search with an argument fmt , substitute the result for illegal _ formatting .
if illegal _ formatting is true ,
raise an TypeError exception with an argument : result of the method illegal _ formatting.group called with an argument ,
integer 0 , appended to a string &quot; strftime of dates before 1900 does not handle &quot; . substitute dt.year for year .
subtract year from integer 2000 , substitute the result for delta .
floor the division of delta by integer 100 and delta by integer 400 , sum the two results , multiply integer 6 by it , substitute the result for off .
sum year and off , substitute the result for year .
subtract year from integer 2000 , divide the result by integer 28 , floor the result , multiply it with 28 and increment by year ,
substitute the result for year. call the method dt.timetuple , substitute the result for timetuple .
call the function time.strftime with 2 arguments : fmt and and timetuple without the first element ,
added to a tuple with an element year , substitute the result for s1. call the function _ findall with 2 arguments : s1 and year converted into a string , substitute the result for sites1 .
call the function time.strftime with 2 arguments : fmt and and timetuple without the first element ,
added to a tuple with an element sum of year an integer 28 , substitute the result for s2. call the function _ findall with 2 arguments : s2 and sum of year and integer 28 , converted into a string , substitute the result for sites2 .
sites is an empty list .
if site is contained in sites1 ,
if site is contained in sites2 ,
append site to sites .
substitute s1 for s .
syear is a string &quot; % 04d &quot; formated with dt.year.
for every site in sites ,
concatenate first site elements of s , syear and elements of s from the site incremented by integer 4 index , substitute the result for s .
return s .
define the function deconstructible with 2 arguments : unpacked list args and unpacked dictionary kwargs .
remove elements under the &apos; path &apos; key of the kwargs dictionary , if it exists substitute it for path , if not path is None .
define the function decorator with an argument klass .
define the method _ _ new _ _ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs .
call the method _ _ new _ _ with an argument cls from the base class of the klass function .
obj . _ constructor _ args is a tuple with 2 elements : args and kwargs .
return obj .
define the function deconstruct with an argument obj .
return a tuple with 3 elements : if path is true , path , in not , a string &apos; % s . % s &apos; formated with obj . _ _ class _ _ . _ _ module _ _ ,
and obj . _ _ class _ _ . _ _ name _ _ , first element of obj . _ constructor _ args and second element of obj . _ constructor _ args. klass . _ _ new _ _ is a static method of the function _ _ new _ _ .
substitute deconstruct for klass.deconstruct.
return klass .
if args is true ,
return decorator .
call the function decorator with 2 arugments : unpacked list args and unpacked dictionary kwargs , return the result .
from functools import wraps , update _ wrapper and WRAPPER _ ASSIGNMENTS into default name space .
from django.utils import six into default name space .
derive the class classonlymethod from the classmethod base class .
define the method _ _ get _ _ with 3 arguments : self , instance and owner .
if instance is not None ,
raise an AttributeError exception with an argument string &quot; This method is available only on the view class . &quot; .
call the method _ _ get _ _ with 2 arguments : instance and owner , from the base class of the classonlymethod class , return the result .
define the function method _ decorator with an argument decorator .
define the function _ dec with an argument func .
define the method _ wrapper with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
decorator decorator .
define the function bound _ func with 2 arguments : unpacked list args2 and unpacked dictionary kwargs2 .
call the method func . _ _ get _ _ with 2 arguments : self and type of self object , call the result with 2 arguments :
unpacked list args2 and unpacked dictionary kwargs2 , return the result. call the function bound _ func with 2 arguments : unpacked list args and unpacked dictionary kwargs , return the result .
decorator decorator .
define the function dummy with 2 arguments : unpacked list args and unpacked dictionary kwargs .
do nothing .
call the function update _ wrapper with 2 arguments : _ wrapper and dummy .
call the function update _ wrapper with 2 arguments : _ wrapper and func .
return _ wrapper .
call the function update _ wrapper with 3 arguments : _ dec , decorator and assigned as result of the function available _ attrs ,
called with an argument decorator. if decorator has an attribute &apos; process _ view &apos; ,
_ dec . _ _ name _ _ is a string &apos; method _ decorator ( % s ) &apos; formated with decorator . _ _ name _ _ .
if not ,
_ dec . _ _ name _ _ is a string &apos; method _ decorator ( % s ) &apos; formated with decorator . _ _ class _ _ . _ _ name _ _ .
return _ dec .
define the function decorator _ from _ middleware _ with _ args with an argument middleware _ class .
call the function make _ middleware _ decorator with an argument middleware _ class , return the result .
define the function decorator _ from _ middleware with an argument middleware _ class .
call the function make _ middleware _ decorator with an argument middleware _ class , call the result , return the new result .
define the function available _ attrs with an argument fn .
if six.PY3 is true ,
return WRAPPER _ ASSIGNMENTS .
if not ,
if fh has an attribute a , for every a in WRAPPER _ ASSIGNMENTS , put a into a tuple , return the resulting tuple .
define the function make _ middleware _ decorator with an argument middleware _ class .
define the function make _ decorator with 2 arguments : unpacked list m _ args and unpacked dictionary m _ kwargs .
call the function middleware _ class with 2 arguments : unpacked list m _ args and unpacked dictionary m _ kwargs ,
substitute the middleware. define the function _ decorator with an argument view _ func .
decorator function wraps with 2 arguments : view _ func and assigned set to result of the function available _ attrs ,
called with an argument view _ func. define the function _ wrapped _ view with 3 arguments : request , unpacked list args and unpacked dictionary kwargs .
if middleware has an attribute &apos; process _ request &apos; ,
call the method middleware.process _ request with an argument request , substitute the result for result .
if result is not None ,
return result .
if middleware has an attribute &apos; process _ view &apos; ,
call the method middleware.process _ view with 4 arguments : request , view _ func , args and kwargs , substitute the result for result .
if result is not None ,
return result .
try ,
call the function view _ func with 3 arguments : request , unpacked list args , unpacked dictionary kwargs , substitute the result for response .
if Exception , renamed to e , exception is caught ,
if middleware has an attribute &apos; process _ exception &apos; ,
call the method middleware.process _ exception with 2 arguments : request and e , substitute the result for result .
if result is not None ,
return result ,
raise an exception .
if response has an attribute &apos; render &apos; and response.render is a callable object ,
if middleware has an attribute &apos; process _ response &apos; ,
call the method middleware.process _ template _ response with 2 arguments : request and response , substitute the result for response .
if middleware has an attribute &apos; process _ response &apos; ,
callback is an lambda function with an argument response and with return value result of the method middleware.process _ response ,
called with 2 arguments : request and response. call the method response.add _ post _ render _ callback with an argument callback .
if not ,
if middleware has an attribute &apos; process _ response &apos; ,
call the method middleware.process _ response with 2 arguments : request and response , return the result .
return response .
return _ wrapped _ view .
return _ decorator .
return _ make _ decorator .
import module inspect .
import module warnings .
derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class .
do nothing .
derive the class RemovedInDjango19Warning from DeprecationWarning base class .
do nothing .
substitute RemovedInDjango19Warning for RemovedInNextVersionWarning .
derive the class warn _ about _ renamed _ method from object base class .
deifne the method _ _ init _ _ with 5 arguments : self , class _ name , old _ method _ name , new _ method _ name and deprecation _ warning .
substitute class _ name for self.class _ name .
substitute old _ method _ name for self.old _ method _ name .
substitute new _ method _ name for new _ method _ name .
substitute deprecation _ warning for self.deprecation _ warning .
define the method _ _ call _ _ with 2 arguments : self and f .
define the function wrapped with 2 arguments : unpacked list args and unpacked dictionary kwargs .
call the function warnings.warn with 3 arguments : string &quot; ` % s . % s` is deprecated , use ` % s` instead . &quot; ,
formated with 3 elements : self.class _ name , self.old _ method _ name and self.new _ method _ name , self.deprecation _ warning and integer 2. call the function f with a arguments : unpacked list args and unpacked dictionary kwargs , return the result .
return wrapped .
derive the class RenameMethodsBase from type base class .
renamed _ methods is an tuple .
define the method _ _ new _ _ with 4 arguments : cls , name , bases and attrs .
call the method _ _ new _ _ with 4 arguments : cls , name , bases and attrs , from the base class of the class RenameMethodsBase .
call the method inspect.getmro with an argument new _ class , for every base in the result ,
substitute base . _ _ name _ _ for class _ name .
for every renamed _ method in cls.renamed _ methods ,
substitute first element of renamed _ method for old _ method _ name .
get the value under the old _ method _ name key of the base . _ _ dict _ _ dictionary , substitute it for old _ method .
substitute second element of renamed _ method for new _ method _ name .
get the value under the new _ method _ name key of the base . _ _ dict _ _ dictionary , substitute it for new _ method .
substitute third element of renamed _ method for deprecation _ warning .
call the function warn _ about _ renamed _ method with 2 arguments : class _ name and unpacked list renamed _ method , substitute the result for wrapper .
if new _ method is false and old _ method is true ,
call the function warnings.warn with 3 arguments : string &quot; ` % s . % s` method should be renamed ` % s` . &quot; ,
formated with 3 elements : class _ name , old _ method _ name and new _ method _ name , deprecation _ warning and integer 2. set new _ method _ name attribute of the base object to old _ method .
set old _ method _ name attribute of the base object to the result of the function wrapper called with an argument old _ method .
if old _ method is false and new _ method is true ,
set old _ method _ name attribute of the base object to the result of the function wrapper called with an argument new _ method .
return new _ class .
import module warnings .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
call the function warnings.warn with 3 arguments : string &quot; django.utils.dictconfig will be removed in Django 1.9 . &quot; ,
RemovedInDjango19Warning and stacklevel set to integer 2. import module logging.handlers.
import module re .
import module sys .
import module types .
from django.utils import six into default name space .
compile regex from string &apos; ^ &#91; a-z _ &#93; &#91; a-z0-9 _ &#93; * $ &apos; in case insensitive mode , substitute it for IDENTIFIER .
define the function valid _ ident with an argument s .
match string s with regex IDENTIFIER , substitute the result for m .
if m is false ,
raise an ValueError exception with an argument string &apos; Not a valid Python identifier : % r &apos; formated with s .
return boolean True .
try ,
from logging import _ checkLevel .
if ImportError exception is caught ,
define the function _ checkLevel with an argument level .
if level is an instance of int type ,
substitute level for rv .
otherwise if level converted into a string equals level ,
if level is not contained in logging . _ levelNames ,
raise an ValueError exception with an argument string &apos; Unknown level : % r &apos; formated with level .
substitute value under level key of logging . _ levelNames dictionary for rv .
if not ,
raise an TypeError exception with an argument string &apos; Level not an integer or a valid string : % r &apos; formated with level .
return rv .
derive the class ConvertingDict from dict base class .
define the method _ _ getitem _ _ with 2 arguments : self and key .
call the method dict . _ _ getitem _ _ with 2 arguments self and key , substitute the result for value .
call the method self.configurator.convert with an argument value , substitute the result for result .
if value is not contained in result ,
substitute result for self dictionary under key key .
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
substitute self for result.parent.
substitute key for result.key.
return result .
define the method get with 3 arguments : self , key and default set to None .
get value under key key of self dictionary , if it doesnt exists return default , substitute the result for value .
call the method self.configurator.convert with an argument value , substitute the result for result .
if value is not contained in result ,
substitute result for value under key key of self dictionary .
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
substitute self for result.parent.
substitute key for result.key.
return result .
define the method pop with 3 arguments : self , key and default set to None .
remove value under key key of self dictionary , if it doesnt exists return default , substitute the result for value .
call the method self.configurator.convert with an argument value .
if value is not contained in result ,
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
substitute self for result.parent.
substitute key for result.key.
return result .
derive the class ConvertingList from list base class .
define the method _ _ getitem _ _ with 2 arguments : self and key .
call the method list . _ _ getitem _ _ with 2 arguments self and key , substitute the result for value .
call the method self.configurator.convert with an arugment value , substitute the result for result .
if value is not contained in result ,
substitute result for value under key key of self dictionary .
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
substitute self for result.parent.
substitute key for result.key.
return result .
define the method pop with 2 arguments : self and idx set to negative integer 1 .
remove idx-th element from self list .
call the method self.configurator.convert with an argument value , substitute the result for result .
if value is not contained in result ,
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
substitute self for result.parent.
return result .
derive the class ConvertingTuple from tuple base class .
define the method _ _ getitem _ _ with 2 arguments : self and key .
call the method tuple . _ _ getitem _ _ with 2 arguments : self and key , substitute the result for value .
call the method self.configurator.convert with an argument value , substitute the result for result .
if value is not contained in result ,
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
substitute self for result.parent.
substitute key for result.key.
return result .
derive the class BaseConfigurator from object base class .
compile a regex from raw string &apos; ^ ( ? P &lt; prefix &gt; &#91; a-z &#93; + ) : / / ( ? P &lt; suffix &gt; . * ) $ &apos; , substitute it for CONVERT _ PATTERN .
compile a regex from raw string &apos; ^ \ s * ( \ w + ) \ s * &apos; , substitute it for WORD _ PATTERN .
compile a regex from raw string &apos; ^ \ . \ s * ( \ w + ) \ s * &apos; , substitute it for DOT _ PATTERN .
compile a regex from raw string &apos; ^ \ &#91; \ s * ( \ w + ) \ s * \ &#93; \ s * &apos; , substitute it for INDEX _ PATTERN .
compile a regex from raw string &apos; ^ \ d + $ &apos; , substitute it for DIGIT _ PATTERN .
value _ converters is a dictionary with 2 entries : &apos; ext _ convert &apos; for &apos; ext &apos; and &apos; cfg _ convert &apos; for &apos; cfg &apos; .
substitute _ _ import _ _ for importer .
define the method _ _ init _ _ with 2 arguments : self and config .
self.config is an instance of ConvertingDict , called with an argument config .
substitute self for self.config.configurator.
define the method resolve with 2 arguments : self and s .
split s into parts by &apos; .&apos; , substitute the result for name .
remove first element from name , substitute the result for used .
try ,
call the method self.importer with an argument used , substitute the result for found .
for every frag in name .
append &apos; .&apos; to frag , append the result to used .
try ,
get frag attribute from found object , substitute it for found .
if AttributeError exception is caught ,
call the method self.importer with an argument used .
get frag attribute from found object , substitute it for found .
return found .
if ImportError exception is caught ,
call the method sys.exc _ info , substitute the result without the first element for e and tb .
raise an ValueError exception with an argument string &apos; Cannot resolve % r : % s &apos; , formated with s and e .
substitute e and tb for v. _ _ cause _ _ and v. _ _ traceback _ _ .
raise an v exception .
define the method ext _ convert with 2 arguments : self and value .
call the method self.resolve with an argument value , return the result .
define the method cfg _ convert with 2 arguments : self and value .
substitute value for rest .
match rest string with self.WORD _ PATTERN regex , substitute the result for m .
if m is None ,
raise an ValueError exception with an argument string &quot; Unable to convert % r &quot; formated with value .
if not ,
call the method m.end , slice list rest from previous result as starting index to the end , substitute the result for rest .
call the method m.groups , use the first element of the result as key for obtaining value from self.config dictionary ,
substitute it for d. while rest is true ,
match rest string with self.DOT _ PATTERN regex , substitute the result for m .
if m is true ,
call the method m.groups , use the first element of the result as key for obtaining value from d dictionary ,
if not ,
match rest string with self.INDEX _ PATTERN regex , substitute the result for m .
if m is true ,
call the method m.groups , substitute the first element of the result for idx .
match rest string with self.DIGIT _ PATTERN regex , if it evaluates to false ,
substitute value under idx key of dictionary d for d .
if not ,
try ,
convert idx to an integer , substitute it or n .
substitute value under n key of dictionary d for d .
if TypeError exception is caught ,
substitute value under idx key of dictionary d for d .
if m is true ,
call the method m.end , slice list rest from previous result as starting index to the end , substitute the result for rest .
if not ,
raise an ValueError exception with an argument string &apos; Unable to convert % r at % r &apos; formated with value and rest .
return d .
define the method convert with 2 arguments : self and value .
if vale is not an instance of ConvertingDict and value is an instance of dict type ,
value is an instance of ConvertingDict class , created with an argument value .
substitute self for value.configurator.
otherwise if vale is not an instance of ConvertingList and value is an instance of list type ,
value is an instance of ConvertingList class , created with an argument value .
substitute self for value.configurator.
otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type ,
value is an instance of ConvertingTuple class , created with an argument value .
substitute self for value.configurator.
otherwise if vale is an instance of value ,
match value string with regex self.CONVERT _ PATTERN , substitute the result for m .
if m is true ,
call the method m.groupdict , substitute the result for d .
substitute value under the &apos; prefix &apos; key of dictionary d , substitute it for prefix .
remove self.value _ converters dictionary element under prefix key , if it exists substitute it for converter , if not , converter is None .
if converter is true ,
substitute value under the &apos; suffix &apos; key of dictionary d , substitute it for suffix .
get converter attribute from self object , substitute it for converter .
call the function converter with an argument suffix , substitute the result for value .
return value .
define the method configure _ custom with 2 arguments : self and config .
remove config dictionary element under &apos; ( ) &apos; key , substitute it for c .
if c doesnt have an attribute &apos; _ _ call _ _ &apos; and types has an &apos; ClassType &apos; attribute and type of c is not equal to types.ClassType ,
call the method self.resolve with an argument c , substitute the result for c .
remove config dictionary element under &apos; .&apos; key , if it exists substitute it for props , if not , props is None .
kwargs is a dictionary with elements : config dictionary element under k key for k , for every k in result of function valid _ ident ,
called with an argument k. call the function c with an argument unpacked dictionary kwargs , substitute the result for result .
if props is true ,
for every name and value in items of props dictionary ,
set result attribute name to value value .
return result .
define the method as _ tuple with 2 arguments : self and value .
if valu is an instance of list type ,
convery value into a tuple , substitute it for value .
return value .
derive the class DictConfigurator from the BaseConfigurator base class .
define the method configure with an argument self .
substitute self.config for config .
if string &apos; version &apos; is not contained in config ,
raise an ValueError exception with an argument string &quot; dictionary doesn &apos;t specify a version &quot; .
if config dictionary value under &apos; version &apos; key is not equal to integer 1 ,
raise an ValueError exception with an argument string &quot; Unsupported version : % s &quot; formated with value under &apos; version &apos; key of config dictionary .
get config dictionary element under &apos; incremental &apos; key , if it exists substitute it for incremental , if not ,
incremental is boolean False . EMPTY _ DICT is an empty dictionary .
call the method logging . _ acquireLock .
try ,
if incremental is true ,
get config dictionary element under &apos; handlers &apos; key , if it exists substitute it for handlers , if not , handlers is EMPTY _ DICT .
if first two elements of sys.version _ info equal to integers 2 ant 7 , respectively ,
for every name in handlers ,
if name is not contained in logging . _ handlers ,
raise an ValueError exception with an argument string &apos; No handler found with name % r &apos; formated with name .
if not ,
try ,
substitute value under name key of logging . _ handlers dictionary for handler .
substitute value under name key of handlers dictionary for handler _ config .
get handler _ config dictionary element under &apos; level &apos; key , if it exists substitute it for level , if not , level is None .
if level is true ,
call the function _ checkLevel with an argument level , use the result as an argument for the call to the function handler.setLevel.
if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to configure handler % r : % s &apos; formated with name and e .
get config dictionary element under &apos; loggers &apos; key , if it exists substitute it for loggers , if not , loggers is EMPTY _ DICT .
for every name in loggers ,
try ,
call the method self.configure _ logger with 3 arguments : name , value under name key of loggers dictionary and boolean True .
if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to configure logger % r : % s &apos; formated with name and e .
get config dictionary element under &apos; root &apos; key , if it exists substitute it for root , if not , root is None .
if root is true ,
try ,
call the method self.configure _ root with 2 arguments : root and boolean True .
if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to configure root logger : % s &apos; formated with e .
if not ,
remove config dictionary element under &apos; disable _ existing _ loggers &apos; key , if it exists substitute it for disable _ existing , if not ,
disable _ existing is boolean True. call the method logging . _ handler.clear.
delete logging . _ handlerList list .
get config dictionary element under &apos; formatters &apos; key , if it exists substitute it for formatters , if not , formatters is EMPTY _ DICT .
for every name in formatters ,
try ,
call the method self.configure _ filter with an argument value under name key of formatters dictionary ,
substitute the result for formatters dictionary value under name key. if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to configure formatter % r : % s &apos; formated with name and e .
get config dictionary element under &apos; filters &apos; key , if it exists substitute it for filters , if not , filters is EMPTY _ DICT .
for every name in filters ,
try ,
call the method self.configure _ filter with an argument value under name key of filters dictionary ,
substitute the result for filters dictionary value under name key. if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to configure filter % r : % s &apos; formated with name and e .
get config dictionary element under &apos; handlers &apos; key , if it exists substitute it for handlers , if not , handlers is EMPTY _ DICT .
sort elements of handlers , for every name in result ,
try ,
call the method self.configure _ handler with an argument value under name key of handlers dictionary , substitute the result for handler .
substitute name for handler.name.
substitute handler for value under name key of handlers dictionary .
if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to configure handler % r : % s &apos; formated with name and e .
substitute logging.root for root .
convert root.manager.loggerDict into a list , substitute it for existing .
sort elements of list existing .
child _ loggers is an empty list .
get config dictionary element under &apos; loggers &apos; key , if it exists substitute it for loggers , if not , loggers is EMPTY _ DICT .
for every name in loggers ,
if name is contained in existing ,
get the index of first occurrence of name in existing , substitute it for i .
append &apos; .&apos; to name , substitute the result for prefixed .
substitute length of prefixed for pflen .
substitute length of existing for num _ existing .
increment i by integer 1 , substitute the result for i .
while i is lesser than num _ existing and first pflen elements of i-th element of existing equals prefixed ,
append i-th element of existing to child _ loggers .
increment i by integer 1 , substitute the result for i .
remove name from existing .
try ,
call the method self.configure _ logger with 2 arguments : name and value under loggers dictionary key name .
if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to configure logger % r : % s &apos; formated with name and e .
for every log in existing ,
get the value under log key of root.manager.loggerDict dictionary , substitute it for logger .
if log is contained in child _ loggers ,
substitute logging.NOTSET for logger.level.
logger.handlers is an empty list .
logger.propagate is boolean True .
otherwise if disable _ existing is true ,
logger.disabled is boolean True .
get config dictionary element under &apos; root &apos; key , if it exists substitute it for root , if not , root is None .
if root is true ,
try ,
call the method self.configure _ root with an argument root .
if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; &apos; Unable to configure root logger : % s &apos; formated with e .
finally perform ,
call the method logging . _ releaseLock .
define the method configure _ formatter with 2 arguments : self and config .
if string &apos; ( ) &apos; is contained in config ,
substitute config dictionary value under &apos; ( ) &apos; key for factory .
try ,
call the method self.configure _ custom with an argument config , substitute the result for result .
if TypeError , renamed to te , exception is caught ,
if string &quot; &apos; format &apos; &quot; is not contained in e converted into a string ,
raise an exception .
remove config dictionary entry under &apos; format &apos; key , substitute it for value under &apos; fmt &apos; key of config dictionary .
substitute factory for value under &apos; ( ) &apos; key of config dictionary .
call the method self.configure _ custom with an argument config , substitute the result for result .
if not ,
get config dictionary element under &apos; format &apos; key , if it exists substitute it for fmt , if not , fmt is None .
get config dictionary element under &apos; datefmt &apos; key , if it exists substitute it for dfmt , if not , dfmt is None .
call the method logging.Formatter with 2 arguments : fmt and dfmt , substitute the result for result .
return result .
define the method configure _ filter with 2 arguments : self and config .
if string &apos; ( ) &apos; is contained in config ,
call the method self.configure _ custom with an argument config , substitute the result for result .
if not ,
remove config dictionary element under &apos; name &apos; key , if it exists substitute it for name , if not , name is an empty string .
call the method logging.Filter with an argument name , substitute the result for result .
return result .
define the method add _ filters with 3 arguments : self , filterer and filters .
for every f in filters ,
try ,
get the value under f key of dictionary under &apos; filters &apos; key of self.config dictionary ,
use the result as an argument for the call to the method filterer.addFilter. if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to add filter % r : % s &apos; formated with f and e .
define the method configure _ handler with 2 arguments : self and config .
remove config dictionary element under &apos; formatter &apos; key , if it exists substitute it for formatter , if not , formatter is None .
if formatter is true ,
try ,
get the value under formatter key of dictionary under &apos; formatters &apos; key of self.config dictionary , substitute the result for formatter .
if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to set formatter % r : % s &apos; formated with formatter and e .
remove config dictionary element under &apos; level &apos; key , if it exists substitute it for level , if not , level is None .
remove config dictionary element under &apos; filter &apos; key , if it exists substitute it for filters , if not , filters is None .
if string &apos; ( ) &apos; is contained in config ,
remove config dictionary element under &apos; ( ) &apos; key , substitute it for c .
if c doesnt have an attribute &apos; _ _ call _ _ &apos; , and types has an attribute &apos; ClassType &apos; , and type of c is not equal to types.ClassType ,
call the method self.resolve with an argument c , substitute the result for c .
substitute c for factory .
if not ,
remove config dictionary element under &apos; class &apos; key , use it as an argument for the call to the method self.resolve ,
substitute the result for klass. if klass is a subclass of logging.handlers.MemoryHandler base class and string &apos; target &apos; is contained in config ,
try ,
get value under &apos; target &apos; key of config dictionary , use it as a key to get the value from the dictionary ,
under the &apos; handlers &apos; key of self.config dictionary , substitute the result for value under &apos; target &apos; key of config dictioanry. if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to set target handler % r : % s &apos; ,
formated with value under &apos; target &apos; key of config dictionary and e. otherwise if klass is a subclass of logging.handlers.SMTPHandler and string &apos; mailhost &apos; is contained in config ,
call the method self.as _ tuple with an argument value under &apos; mailhost &apos; key of config dictionary ,
substitute the result for value under &apos; mailhost &apos; key of config dictionary. otherwise if klass is subclass of logging.handlers.SysLogHandler class , and string &apos; address &apos; is contained in config ,
call the method self.as _ tuple with an argument value under &apos; address &apos; key of config dictionary ,
substitute the result for value under &apos; address &apos; key of config dictionary. substitute klass for factory .
kwargs is a dictionary created with tuples with 2 elements : k and value under k key of config dictionary ,
for every k in config , only if result of the function valid _ ident called with an argument k evaluates to true. try ,
call the function factory with an argument unpacked dictionary kwargs , substitute the result for result .
if TypeError , renamed to te , exception is caught ,
if &quot; &apos; stream &apos; &quot; is not contained in te converted into a string ,
raise an exception .
remove element under &apos; stream &apos; key of kwargs dictionary , substitute the result for value under &apos; strm &apos; key of kwargs dictionary .
call the function factory with an argument unpacked dictionary kwargs , substitute the result for result .
if formatter is true ,
call the method result.setFormatter with an argument formatter .
if level is not None ,
call function _ checkLevel with an argument level , use the result as an argument for the method result.setLevel.
if filters is true ,
call the method self.add _ filters with 2 arguments : result and filters .
return result .
define the method add _ handlers with 3 arguments : self , logger and handlers .
for every h in handlers ,
try ,
call the method logger.addHandler with an argument : h-th element of value under &apos; handlers &apos; key of self.config dictionary .
if StandardError , renamed to e , exception is caught ,
raise an ValueError exception with an argument string &apos; Unable to add handler % r : % s &apos; formated with h and e .
define the method common _ logger _ config with 4 arguments : self , logger , config and incremental set to boolean False .
get value under the &apos; level &apos; key of the config dictioanry , if it exists substitute it for level , if not level is None .
if level is not None ,
call the function _ checkLevel with an argument level , use the result as an argument for the call to the method logger.setLevel.
if incremental is true ,
for every h in elements of logger.handlers list ,
call the method logger.removeHandler with an argument h .
get value under the &apos; handlers &apos; key of the config dictioanry , if it exists substitute it for handlers , if not handlers is None .
if handlers is true ,
call the method self.add _ handlers with 2 arguments : logger and handlers .
get value under the &apos; filters &apos; key of the config dictioanry , if it exists substitute it for filters , if not filters is None .
if filters is true ,
call the method self.add _ filters with 2 arguments : logger and filters .
define the method configure _ logger with 4 arguments : self , name , config , incremental set to boolean False .
call the method logging.getLogger with an argument name , substitute the result for logger .
call the method self.common _ logger _ config with 3 arguments : logger , config and incremental .
get value under the &apos; propagate &apos; key of the config dictioanry , if it exists substitute it for propagate , if not propagate is None .
if propagate is not None ,
substitute propagate for logger.propagate.
define the method configure _ root with 3 arguments : self , config and incremental set to boolean False .
call the method logging.getLogger , substitute the result for root .
call the method self.common _ logger _ config with 3 arguments : root , config and incremental .
substitute DictConfigurator for dictConfigClass .
define the function dictConfig with an argument config .
call the method dictConfigClass with an argument config , call the method configure on the result .
from _ _ future _ _ import unicode _ literals into default name space .
import module codecs .
import module datetime .
from decimal import Decimal into default name space .
import module locale .
from django.utils.functional import Promise into default name space .
from django.utils import six into default name space .
from django.utils.six.moves.urllib.parse import quote into default name space .
derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError .
define the private method _ _ init _ _ , with self instance of this class , obj and list of arbitrary length * args as arguments .
assign obj to the obj field of self instance of this class .
call the initialization method UnicodeDecodeError . _ _ init _ _ , with self instance of this class and * args as arguments .
define the private method _ _ str _ _ , with self instance of this class as the only argument .
call the method UnicodeDecodeError . _ _ str _ _ , with self as the argument , substitute the result for original .
in the string &apos; % s . You passed in % r ( % s ) &apos; replace every % s with original and type of the object self.obj as strings , respectively ,
and replace % r with self.obj , return the result. define function python _ 2 _ unicode _ compatible , with klass as an argument .
if field PY2 of the module six is boolean True ,
if string &apos; _ _ str _ _ &apos; is not contained in _ _ dict _ _ field of klass ,
raise the exception ValueError , with string as argument , &quot; @ python _ 2 _ unicode _ compatible cannot be applied &quot; ,
&quot; to % s because it doesn &apos;t define _ _ str _ _ ( ) . &quot; , replace % s with string value of klass . _ _ name _ _ . substitute _ _ str _ _ filed of klass for _ _ unicode _ _ field of klass .
define lambda function with self class instance as the argument , lambda function body encapsulates the call to the method ,
str . _ _ unicode _ _ ( ) .encode ( &apos; utf-8 &apos; ) , call the lambda function and put the result in the _ _ str _ _ filed of klass. return klass .
define the function smart _ text , with s , encoding set to string &apos; utf-8 &apos; , strings _ only set to False , errors set to &apos; strict &apos; as arguments .
if s is instance of a class Promise ,
return s .
return the result of the call to the function force _ text , with s , encoding , string _ only and errors as arguments .
_ PROTECTED _ TYPES is a tuple containing next elements , six.integer _ types , type of None , type of float , Decimal , detetime.datetime ,
datetime.date and datetime.time. define the function is _ protected _ type with obj as the only argument .
check if obj is instance of the object _ PROTECTED _ TYPES , return the boolean result .
define the function force _ text , with s , encoding set to &apos; utf-8 &apos; , strings _ only set to False , errors set to string &apos; strict &apos; as arguments .
if s is the instance of the object six.text _ type ,
return s .
if the boolean return vale of the call to the function is _ protected _ type ( s ) and string _ onlys are boolean True ,
return s .
try ,
if s is not an instance of the object six / string _ types ,
if PY3 filed of six is boolean True ,
if s is an instance of object bytes ,
call the function six.text _ type with s , encoding and errors as the arguments , substitute the result for s .
if not ,
call the function six.text _ type with s as an argument , substitute the result for s .
otherwise , if s has an attribute &apos; _ _ unicode _ _ &apos; ,
call the function six.text _ type with s as an argument , substitute result for s .
if not ,
call the function six.text _ type with return value of the function bytes ( s ) , encoding and errors as the arguments ,
substitute the result for s. if not ,
call the method s.decode with encoding and errors as the arguments , substitute the result for s .
if an exception of the type UnicodeDecodeError , renamed to e , is caught ,
if s is not an instance of the object Exception ,
raise an exception DjingoUnicodeDecodeError , with s and list of arguments * args from object e , as the arguments .
if not ,
for every arg in s , call the function force _ text with arg , encoding , strings _ only and errors as arguments ,
join the result in a string separated by whitespaces , substitute it for s. return s .
define function smart _ bytes with s , encoding set to string &apos; utf-8 &apos; , strings _ only set to False and errors set to string &apos; strict &apos; , as arguments .
if s is an instance of an object Promise .
return s .
evaluate the function force _ bytes , with the arguments s , encoding , strings _ only and errors , return the result .
define function force _ bytes with s , encoding set to &apos; utf-8 &apos; , strings _ only set to False and errors set to &apos; strict &apos; as arguments .
if s is an instance of an object bytes .
if encoding equals to string &apos; utf-8 &apos; .
return s .
if not ,
evaluate the method s.decode with string &apos; utf-8 &apos; and errors as the arguments ,
on the result call the method encode with the arguments encoding and errors , return the result. if strings _ only and boolean return value of the call to the function is _ protected _ type for argument s are boolean True ,
return s .
if s is an instance of an object six.memoryview.
evaluate the function bytes with the argument s , and return the result .
if s is an instance of an object Promise .
return six.text _ type ( s ) .encode ( encoding , errors ) .
if s is not an instance of the object six.string _ types ,
try ,
if PY3 field of six is boolean True ,
evaluate the method six.text _ type ( s ) , on the result call the method encode with encoding as an argument , return the result .
if not ,
evaluate the function bytes with the argument s , and return the result .
if the UnicodeEncodeError exception is caught ,
if s is an instance of the subclass Exception ,
for every arg in s , evaluate the function force _ bytes for the arguments arg , encoding , strings _ only and errors ,
put the results in a list , join the list elements in a string separated by whitespace separator , return the string as the bytes string. evaluate the method six.text _ type ( s ) , on the result call the method encode with the arguments encoding and errors , return the result .
if not ,
evaluate the member method of s , encode with the encoding and errors as the arguments , return the result .
if PY3 field of module six is boolean True ,
substitute smart _ text for smart _ str .
substitute force _ text for force _ str .
if not ,
substitute smart _ bytes for smart _ str .
substitute force _ bytes for force _ str .
substitute smart _ text for smart _ unicode .
substitute force _ text for force _ unicode .
define the function iri _ to _ uri with iri as an argument .
if iri is not initialized ,
return iri .
call the function quote with return value of the evaluated function force _ bytes ( iri ) ,
and with safe set to bytes string &quot; / # % &#91; &#93; = : ; $ &amp; ( ) + , ! ? * @ &apos; ~ &quot; , return the result. define function filepath _ to _ uri with path as the argument .
if path is not initialized ,
return path .
evaluate function force _ bytes with path as the argument , replace all of the occurancies of the &quot; \ \ &quot; with &quot; / &quot; in the resulting string ,
call the function quote with the result and with the safe set to bytes string &quot; / ~ ! * ( ) &apos; &quot; , return the function result. define the function get _ system _ encoding without the input arguments .
try ,
evaluate the function getdefaultlocale from the module locale , if second element of return value exists assign it to encoding ,
otherwise assign string &apos; ascii &apos; to encoding. call the method lookup with the encoding as the argument .
if the Exception exception is caught ,
substitute string &apos; ascii &apos; for encoding .
return encoding .
evaluate the function get _ system _ encoding ( ) , substitute the return vale for DEFAULT _ LOCALE _ ENCODING .
from _ _ future _ _ import unicode _ literals into default name space .
import module datetime .
from django.utils.xmlutils import SimplerXMLGenerator into default name space .
from django.utils.encoding import force _ text and iri _ to _ uri into default name space .
from django.utils import datetime _ safe into default name space .
from django.utils import six into default name space .
from django.utils.six import StringIO into default name space .
from django.utils.six.moves.urllib.parse import urlparse into default name space .
from django.utils.timezone import is _ aware into default name space .
define the function rfc2822 _ date with an argument date .
months is a tuple with 12 elements : strings &apos; Jan &apos; , &apos; Feb &apos; , &apos; Mar &apos; , &apos; Apr &apos; , &apos; May &apos; , &apos; Jun &apos; , &apos; Jul &apos; , &apos; Aug &apos; , &apos; Sep &apos; , &apos; Oct &apos; , &apos; Nov &apos; and &apos; Dec &apos; .
days is a tuple with 7 elements : strings &apos; Mon &apos; , &apos; Tue &apos; , &apos; Wed &apos; , &apos; Thu &apos; , &apos; Fri &apos; , &apos; Sat &apos; and &apos; Sun &apos; .
call the method datetime _ safe.new _ datetime with an argument date , substitute the result for date .
call the method date.weekday , use the result as an key to obtain the value from the days dictionary , substitute it for dow .
decrement date.month by integer 1 , use the result as an key to obtain the value from the months dictionary , substitute it for month .
call the function date.strftime with an argument string &apos; % s , % % d % s % % Y % % H : % % M : % % S &apos; formated with dow and month ,
substitute the result for time _ str. if six.PY2 is true ,
call the method time _ str.decode with an argument string &apos; utf-8 &apos; , substitute the result for time _ str .
call the function is _ aware with an argument date , if it evaluates to true ,
call the method date.tzinfo.utcoffset with an argument date , substitute the result for offset .
multiply offset.days , integer 24 and integer 60 , sum the result with floored result of dividing offset.seconds by integer 60 ,
substitute the result for timezone. divide timezone by integer 60 , substitute the quotient of the division for hour and reminder for minute .
format string &apos; % + 03d % 02d &apos; with hour and minute , append it to time _ str , return the result .
if not ,
append string &apos; -0000 &apos; to time _ str , return the result .
define the function rfc3339 _ date with an argument date .
call the function datetime _ safe.new _ datetime with an argument date , substitute the result for date .
call the function date.strftime with an argument string &apos; % Y- % m- % dT % H : % M : % S &apos; , substitute the result for time _ str .
if six.PY2 ,
call the method time _ str.decode with an argument string &apos; utf-8 &apos; , substitute the result for time _ str .
call the function is _ aware with an argument date , if it evaluates to true ,
call the method date.tzinfo.utcoffset with an argument date , substitute the result for offset .
multiply offset.days , integer 24 and integer 60 , sum the result with floored result of division of offset.seconds ,
and integer 60 , substitute the result for timezone. divide timezone by integer 60 , substitute the quotient of the division for hour and reminder for minute .
format string &apos; % + 03d : % 02d &apos; with hour and minute , append it to time _ str , return the result .
if not ,
append &apos; Z &apos; to time _ str , return the result .
define the function get _ tag _ uri with 2 arguments : url and date .
call the method urlparse with an argument url , substitute the result for bits .
d is an empty string .
if date is not None ,
call the function datetime _ safe.new _ datetime with an argument date , on the result call the method strftime with an argument ,
string &apos; % Y- % m- % d &apos; , convert the result into a string and append it to &apos; , &apos; , substitute the result for d. format string &apos; tag : % s % s : % s / % s &apos; with bits.hostname , d , bits.path and bits.fragment , return it .
derive the class SyndicationFeed from the object base class .
define the method _ _ init _ _ with 15 elements : self , title , link , description , language set to None , author _ email set to None ,
author _ name set to None , author _ link set to None , subtitle set to None , categories set to None , feed _ url set to None , feed _ copyright set to None , feed _ guid set to None , ttl set to None and unpacked dictionary kwargs. to _ unicode is an lambda function with an argument s , result is the result of the function force _ text ,
called with 2 arguments : s and string _ only as boolean True. if categories is true ,
categories is a list containing the results of the function force _ text , called with an argument c , for every c in categories .
if ttl is not None ,
call the function force _ text with an argument ttl , substitute the result for ttl .
self.feed is an dictionary with 13 initial entries , result of the function to _ unicode called with an argument title for &apos; title &apos; ,
result of the function iri _ to _ uri called with an argument link for &apos; link &apos; , result of the function to _ unicode called with an argument description for &apos; description &apos; , result of the function to _ unicode called with an argument language for &apos; language &apos; , result of the function to _ unicode called with an author _ email description for &apos; author _ email &apos; , result of the function to _ unicode called with an argument author _ name for &apos; author _ name &apos; , result of the function iri _ to _ uri called with an argument author _ link for &apos; author _ link &apos; , result of the function to _ unicode called with an argument subtitle for &apos; subtitle &apos; , if true , categories is value for &apos; categories &apos; key , if not , empty tuple is value for &apos; categories &apos; key , result of the function iri _ to _ uri called with an argument feed _ url for &apos; feed _ url &apos; , result of the function to _ unicode called with an argument feed _ copyright for &apos; feed _ copyright &apos; , if true , feed _ guid is value for &apos; id &apos; key , if not , lik is value for &apos; id &apos; key and ttl for &apos; ttl &apos; . update self.feed dictionary with kwargs .
self.items is an empty list .
define the method add _ item with 17 arguments : self , title , link , description , author _ email set to None , author _ name set to None ,
to _ unicode is an lambda function with an argument s , result is the result of the function force _ text ,
called with 2 arguments : s and string _ only as boolean True. if categories is true ,
categories is a list containing the results of the function to _ unicode , called with an argument c , for every c in categories .
if ttl is not None ,
call the function force _ text with an argument ttl , substitute the result for ttl .
item is a dictionary with 15 initial entries : result of the function to _ unicode called with an argument title for &apos; title &apos; ,
result of the function iri _ to _ uri called with an argument link for &apos; link &apos; , result of the function to _ unicode called with an argument description for &apos; description &apos; , result of the function to _ unicode called with an argument author _ email for &apos; author _ email &apos; , result of the function to _ unicode called with an argument author _ name for &apos; author _ name &apos; , result of the function iri _ to _ uri called with an author _ link link for &apos; author _ link &apos; , pubdate for &apos; pubdate &apos; , updateddate for &apos; updateddate &apos; , result of the function to _ unicode called with an comments author _ name for &apos; comments &apos; , result of the function to _ unicode called with an argument unique _ id ) for &apos; unique _ id ) &apos; , unique _ id _ is _ permalink for &apos; unique _ id _ is _ permalink &apos; , enclosure for &apos; enclosure &apos; , if true , categories is value for &apos; categories &apos; key , if not , empty tuple is value for &apos; categories &apos; key , result of the function to _ unicode called with an argument item _ copyright for &apos; item _ copyright &apos; , ttl for &apos; ttl &apos; . update dictionary item with an argument kwargs .
append item to self.items.
define the method num _ items with an argument self .
return length of self.items.
define the method root _ attributes with an argument self .
return an empty dictionary .
define the method add _ root _ elements with 2 arguments self and handler .
do nothing .
define the method item _ attributes with 2 arguments self and item .
return an empty dictionary .
define the method add _ item _ elements with 2 arguments , handler self and item .
do nothing .
define the method write with 3 arguments self , outfile and encoding .
raise an NotImplementedError with an argument string &apos; subclasses of SyndicationFeed must provide a write ( ) method &apos; .
define the method writeString with 2 arguments self and encoding .
s is an instance of StringIO class .
call the method self.write with 2 arguments : s and encoding .
call the method s.getvalue , return the result .
define the method latest _ post _ date with an argument self .
latest _ date is None .
date _ keys is a tuple with 2 arguments : strings &apos; updateddate &apos; and &apos; pubdate &apos; .
for every item in self.items ,
for every date _ key in date _ keys ,
get the value under the date _ key key of the item dictionary , substitute it for item _ date .
if item _ date is true ,
if latest _ date is None or item _ date is greater than latest _ date ,
substitute item _ date for latest _ date .
if latest _ date is true , return it , if not , call the method datetime.datetime.now and return the result .
derive the class Enclosure from the object base class .
define the method _ _ init _ _ with 4 arguments : self , url , length and mime _ type .
substitute length and mime _ type for self.length and self.mime _ type .
call the function iri _ to _ uri with an argument url , substitute the result for self.url.
derive the class RssFeed from the SyndicationFeed base class .
mime _ type is a string &apos; application / rss + xml ; charset = utf-8 &apos; .
define the method write with 3 arguments : self , outfile and encoding .
handler is an instance of SimplerXMLGenerator class , created with 2 arguments : outfile and encoding .
call the method handler.startDocument.
call the method handler.startElement with 2 arguments : string &quot; rss &quot; and result of the method self.rss _ attributes .
call the method handler.startElement with 2 arguments : string &quot; channel &quot; and result of the method self.root _ attributes .
call the method self.add _ root _ elements with an argument handler .
call the method self.write _ items with an argument handler .
call the method self.endChannelElement with an argument handler .
call the method handler.endElement with an argument string &apos; rss &apos; .
define the method rss _ attributes with an argument self .
return a dictionary with 2 elements : self . _ version for &quot; version &quot; and &quot; http : / / www.w3.org / 2005 / Atom &quot; for &quot; xmlns : atom &quot; .
define the method write _ items with 2 arguments : self and handler .
for every item in self.items ,
call the method handler.startElement with 2 arguments : string &quot; item &quot; and result of the method self.item _ attributes with an argument item .
call the method self.add _ item _ elements with 2 arguments : handler and item .
call the method handler.endElement with an argument string &apos; item &apos; .
define the method add _ root _ elements with 2 arguments : self and handler .
call the method handler.addQuickElement with 2 arguments : string &apos; title &apos; and value under the &apos; title &apos; key of the self.feed dictionary .
call the method handler.addQuickElement with 2 arguments : string &apos; link &apos; and value under the &apos; link &apos; key of the self.feed dictionary .
call the method handler.addQuickElement with 2 arguments : string &apos; description &apos; and value under the &apos; description &apos; key of the self.feed dictionary .
if value under the &apos; feed _ url &apos; key of the self.feed dictionary is not None ,
call the method handler.addQuickElement with 3 arguments : string &apos; atom : link &apos; , None and dictionary with 2 entries : &apos; self &apos; for &apos; rel &apos; ,
value under the &apos; feed _ url &apos; key of the self.feed dictionary for &apos; href &apos; . if value under the &apos; language &apos; key of the self.feed dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; language &apos; and value under the &apos; language &apos; key of the self.feed dictionary .
for every cat in value under the &apos; categories &apos; key of the self.feed dictionary .
call the method handler.addQuickElement with 2 arguments : string &quot; category &quot; and cat .
if value under the &apos; feed _ copyright &apos; key of the self.feed dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; copyright &apos; and value under the &apos; feed _ copyright &apos; key of the self.feed dictionary .
call the method handler.addQuickElement with 2 arguments : string &apos; lastBuildDate &apos; and result of the function rfc2822 _ date ,
called with an argument result of the method self.latest _ post _ date. if value under the &apos; ttl &apos; key of the self.feed dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; ttl &apos; and value under the &apos; ttl &apos; key of the self.feed dictionary .
define the method endChannelElement with 2 arguments : self and handler .
call the method handler.endElement with an argument string &apos; channel &apos; .
derive the class RssUserland091Feed from the RssFeed base class .
_ version is a string &quot; 0.91 &quot; .
define the method add _ item _ elements with 3 arguments : self , handler and item .
call the method handler.addQuickElement with 2 arguments : string &apos; title &apos; and value under the &apos; title &apos; key of the item dictionary .
call the method handler.addQuickElement with 2 arguments : string &apos; link &apos; and value under the &apos; link &apos; key of the item dictionary .
if value under the &apos; description &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; description &apos; and value under the &apos; description &apos; key of item dictionary .
derive the class Rss201rev2Feed from the RssFeed base class .
_ version is a string &quot; 2.0 &quot; .
define the method add _ item _ elements with 3 arguments : self , handler and item .
call the method handler.addQuickElement with 2 arguments : string &apos; title &apos; and value under the &apos; title &apos; key of the item dictionary .
call the method handler.addQuickElement with 2 arguments : string &apos; link &apos; and value under the &apos; link &apos; key of the item dictionary .
if value under the &apos; description &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; description &apos; and value under the &apos; description &apos; key of the item dictionary .
if values under &quot; author _ name &quot; and &quot; author _ email &quot; keys of the item dictionary are both true ,
call the method handler.addQuickElement with an argument string &quot; author &quot; , &quot; % s ( % s ) &quot; ,
formated with values under the &apos; author _ email &apos; and &apos; author _ name &apos; keys of item dictionary. otherwise if value under the &quot; author _ email &quot; key of the item dictionary is true ,
call the method handler.addQuickElement with 2 arguments : string &apos; author &apos; and value under the &apos; author _ email &apos; key of the item dictionary .
otherwise if value under the &quot; author _ name &quot; key of the item dictionary is true ,
call the method handler.addQuickElement with 3 arguments : string &apos; dc : creator &apos; ,
value under the &apos; author _ name &apos; key of the item dictionary and dictionary with an entry : &quot; http : / / purl.org / dc / elements / 1.1 / &quot; for &quot; xmlns : dc &quot; . if value under the &apos; pubdate &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; pubDate &apos; and result of the function rfc2822 _ date ,
called with value under the &apos; pubdate &apos; key of the item dictionary. if value under the &apos; comments &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; comments &apos; and value under the &apos; comments &apos; key of the item dictionary .
if value under the &apos; unique _ id &apos; key of the item dictionary is not None ,
guid _ attrs is an empty dictionary .
if value object the &apos; unique _ id _ is _ permalink &apos; key of the item dictionary is an instance of bool type ,
covert to string value under the &apos; unique _ id _ is _ permalink &apos; key of the item dictionary , convert it to lowercase ,
substitute the result for value under the &apos; isPermaLink &apos; key of the guid _ attrs dictionary. call the method handler.addQuickElement with 3 arguments : string &apos; guid &apos; , value under the &apos; unique _ id &apos; key of the item dictionary ,
and guid _ attrs. if value under the &apos; ttl &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; ttl &apos; and value under the &apos; ttl &apos; key of the item dictionary .
if value under the &apos; enclosure &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 3 arguments : string &apos; title &apos; , an empty string and a dictionary with 3 entries :
field url of the value under the &apos; enclosure &apos; key of the item dictionary for &apos; url &apos; , field length of the value under the &apos; enclosure &apos; key of the item dictionary for &apos; length &apos; , and field mime _ type of the value under the &apos; enclosure &apos; key of the item dictionary for &apos; type &apos; . for every cat in value under the &apos; categories &apos; key of the item dictionary ,
call the method handler.addQuickElement with 2 arguments : string &apos; category &apos; and cat .
derive the class Atom1Feed from the SyndicationFeed base class .
mime _ type is a string &apos; application / atom + xml ; charset = utf-8 &apos; .
ns is a string &quot; http : / / www.w3.org / 2005 / Atom &quot; .
define the method write with 3 arguments : self , outfile and encoding .
handler is an instance of SimplerXMLGenerator class , created with 2 arguments : outfile and encoding .
call the method handler.startDocument.
call the method handler.startElement with 2 arguments : string &apos; feed &apos; and result of the method self.root _ attributes .
call the method self.add _ root _ elements with an argument handler .
call the method self.write _ items with an argument handler .
call the method handler.endElement with an argument string &apos; feed &apos; .
define the method root _ attributes with an argument self .
if value under the &apos; language &apos; key of the self.feed dictionary is not None ,
return a dictionary with 2 entries : value under the &apos; language &apos; key of the self.feed dictionary for &quot; xml : lang &quot; ,
and self.ns for &quot; xmlns &quot; . if not ,
return a dictionary with an entry : self.ns for &quot; xmlns &quot; .
define the method add _ root _ elements with 2 arguments : self and handler .
call the method handler.addQuickElement with 2 arguments : string &apos; title &apos; and value under the &apos; title &apos; key of the self.feed dictionary .
call the method handler.addQuickElement with 3 arguments : string &apos; link &apos; , an empty string and a dictionary with 2 entries :
&apos;alternate &apos; for &apos; rel &apos; and value under the &apos; link &apos; key of self.feed dictionary for &apos; href &apos; . if value under the &apos; feed _ url &apos; key of the self.feed dictionary is not None ,
call the method handler.addQuickElement with 3 arguments : string &apos; link &apos; , an empty string and a dictionary with 2 entries :
&apos;self &apos; for &apos; rel &apos; and value under the &apos; feed _ url &apos; key of self.feed dictionary for &apos; href &apos; . call the method handler.addQuickElement with 2 arguments : string &apos; title &apos; and value under the &apos; title &apos; key of the self.feed dictionary .
call the method handler.addQuickElement with 2 arguments : string &apos; updated &apos; and result of the function rfc3339 _ date ,
called with an argument result of the method self.latest _ post _ date. if value under the &apos; author _ name &apos; key of the self.feed dictionary is not None ,
call the method handler.startElement with 2 arguments : string &apos; author &apos; and an empty dictionary .
call the method handler.addQuickElement with 2 arguments : string &apos; name &apos; and value under the &apos; author _ name &apos; key of the self.feed dictionary .
if value under the &apos; author _ email &apos; key of the self.feed dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; email &apos; and value under the &apos; author _ email &apos; key of the self.feed dictionary .
if value under the &apos; author _ link &apos; key of the self.feed dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; uri &apos; and value under the &apos; author _ link &apos; key of the self.feed dictionary .
call the method handler.endElement with an argument string &apos; author &apos; .
if value under the &apos; subtitle &apos; key of the self.feed dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; subtitle &apos; and value under the &apos; subtitle &apos; key of the self.feed dictionary .
for every cat in value under the &apos; categories &apos; key of the self.feed dictionary .
call the method handler.addQuickElement with 3 arguments : string &apos; category &apos; , an empty string and a dictionary with an entry :
cat for &apos; term &apos; . if value under the &apos; feed _ copyright &apos; key of the self.feed dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; rights &apos; and value under the &apos; feed _ copyright &apos; key of the self.feed dictionary .
define the method write _ items with 2 arguments : self and handler .
for every item in self.items ,
call the method handler.startElement with 2 arguments : string &apos; entry &apos; and result of the function self.item _ attributes ,
called with an argument item. call the method self.add _ item _ elements with 2 arguments : handler and item .
call the method handler.endElement with an argument string &apos; entry &apos; .
define the method add _ item _ elements with 3 arguments : self , handler and item .
call the method handler.addQuickElement with 2 arguments : string &apos; title &apos; and value under the &apos; title &apos; key of the item dictionary .
call the method handler.addQuickElement with 3 arguments : string &apos; link &apos; , an empty string and a dictionary with 2 entries :
value under the &apos; link &apos; key of item dictionary for &apos; href &apos; and &quot; alternate &quot; for &quot; rel &quot; . if value under the &apos; pubdate &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; published &apos; and result of the function rfc3339 _ date ,
called with an argument value under the &apos; pubdate &apos; key of the item dictionary. if value under the &apos; updateddate &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; updated &apos; and result of the function rfc3339 _ date ,
called with an argument value under the &apos; updateddate &apos; key of the item dictionary. if value under the &apos; author _ name &apos; key of the item dictionary is not None ,
call the method handler.endElement with 2 arguments : string &apos; author &apos; and an empty dictionary .
call the method handler.addQuickElement with 2 arguments : string &apos; name &apos; and value under the &apos; author _ name &apos; key of the item dictionary .
if value under the &apos; author _ email &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; email &apos; and value under the &apos; author _ email &apos; key of the item dictionary .
if value under the &apos; author _ link &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; uri &apos; and value under the &apos; author _ link &apos; key of the item dictionary .
call the method handler.endElement with an argument string &apos; author &apos; .
if value under the &apos; unique _ id &apos; key of the item dictionary is not None ,
substitute value under &apos; unique _ id &apos; key of item dictionary for unique _ id .
if not ,
call the function get _ tag _ uri with 2 arguments : values under &apos; link &apos; and &apos; pubdate &apos; keys of item dictionary , substitute the result for unique _ id .
call the method handler.addQuickElement with 2 arguments : string &apos; id &apos; and unique _ id .
if value under the &apos; description &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 3 arguments : string &apos; summary &apos; , value under the &apos; description &apos; key of item dictionary ,
and dictionary with an entry : &apos; html &apos; for &apos; type &apos; . if value under the &apos; enclosure &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 3 arguments : string &apos; link &apos; , an empty string and a dictionary with 4 entries :
&quot; enclosure &quot; for &apos; rel &apos; , field url of value under the &quot; enclosure &quot; key of item dictionary for &apos; href &apos; , field length of value under the &quot; enclosure &quot; key of item dictionary for &apos; length &apos; , and field mime _ type of value under the &quot; enclosure &quot; key of item dictionary for &apos; type &apos; . for every cat in value under &apos; categories &apos; key of item dictionary ,
call the method handler.addQuickElement with 3 arguments : string &apos; link &apos; , an empty string and a dictionary with an entry :
cat for &apos; term &apos; . if value under the &apos; item _ copyright &apos; key of the item dictionary is not None ,
call the method handler.addQuickElement with 2 arguments : string &apos; rights &apos; and value under the &apos; item _ copyright &apos; key of the item dictionary .
substitute Rss201rev2Feed for DefaultFeed .
from _ _ future _ _ import absolute _ into default name space .
import module decimal .
import module datetime .
from importlib import import _ module into default name space .
import module unicodedata .
from django.conf import settings into default name space .
from django.utils import dateformat , numberformat and datetime _ safe into default name space .
from django.utils.encoding import force _ str into default name space .
from django.utils.functional import lazy into default name space .
from django.utils.safestring import mark _ safe into default name space .
from django.utils import six into default name space .
from django.utils.translation import get _ language , to _ locale and check _ for _ language into default name space .
_ format _ cache is an empty dictionary .
_ format _ modules _ cache is an empty dictionary .
ISO _ INPUT _ FORMATS is a dictionary with 3 entries : tuple with an element string &apos; % Y- % m- % d &apos; for &apos; DATE _ INPUT _ FORMATS &apos; ,
tuple with 3 elements : strings &apos; % H : % M : % S &apos; , &apos; % H : % M : % S. % f &apos; and &apos; % H : % M &apos; for &apos; TIME _ INPUT _ FORMATS &apos; , tuple with 4 elements : strings &apos; % Y- % m- % d % H : % M : % S &apos; , &apos; % Y- % m- % d % H : % M : % S. % f &apos; , &apos; % Y- % m- % d % H : % M &apos; and &apos; % Y- % m- % d &apos; for &apos; DATETIME _ INPUT _ FORMATS &apos; . define the function reset _ format _ cache .
use global variables _ format _ cache and _ format _ modules _ cache .
_ format _ cache is an empty dictionary .
_ format _ modules _ cache is an empty dictionary .
define the function iter _ format _ modules with 2 arguments : lang and format _ module _ path set to None .
call the function check _ for _ language with an argument lang , if it evaluates to false ,
return nothing .
if format _ module _ path is None .
substitute settings.FORMAT _ MODULE _ PATH for settings.FORMAT _ MODULE _ PATH .
format _ locations is an empty list .
if format _ module _ path is true ,
if format _ module _ path is an instance of six.string _ types ,
format _ module _ path is a list containing an element format _ module _ path .
for every path in format _ module _ path ,
concatenate path and string &apos; . % s &apos; , append the result to format _ module _ path .
append string &apos; django.conf.locale. % s &apos; to format _ locations .
call the function to _ locale with an argument lang , substitute the result for locale .
locales is a list with an element locale .
if &apos; _ &apos; is contained in locale ,
split locale by &apos; _ &apos; , append the first element of the result to locales .
for every location in format _ locations ,
for every loc in locales ,
try ,
call the function import _ module with an argument string &apos; % s.formats &apos; formated with location , which is formated with loc ,
yield the result. if ImportError exception is caught ,
do nothing .
define the function get _ format _ modules with 2 arguments : lang set to None and reverse set to boolean False .
if lang is None ,
call the function get _ language , substitute the result for lang .
call the method _ format _ modules _ cache.setdefault with 2 arguments : lang and list created out of the results of the function ,
iter _ format _ modules called with 2 arguments : lang and settings.FORMAT _ MODULE _ PATH , substitute the result for modules. if reverse is true ,
reverse the order of modules elements , put them into a list , return it .
return modules.s
define the function get _ format with 3 arguments : format _ type , lang set to None and use _ l10n set to None .
call the function force _ str with an argument format _ type , substitute the result for format _ type .
if use _ l10n is true , or if use _ l10n is None and settings.USE _ L10N is true ,
if lang is None ,
call the function get _ language , substitute the result for lang .
cache _ key is a tuple with 2 argumetns : format _ type and lang .
try ,
substitute value under the cache _ key key of the _ format _ cache dictionary for cached .
if cached is not None ,
return cached .
if not ,
get format _ type attribute of the settings object , return it .
if KeyError exception is caught ,
call the function get _ format _ modules with an argument lang , for every module in the result ,
try ,
get format _ type attribute of module object , substitute the result for val .
get the value under the if iso _ input not in val key of the ISO _ INPUT _ FORMATS dictionary , if it doesnt exists return an empty tuple ,
for every iso _ input in the result , if iso _ input is not contained in val ,
if val is an instance of tuple ,
convert val to an list , substitute it for val .
append iso _ input to val .
substitute val for the value under the cache _ key key of the _ format _ cache dictionary .
return val .
if AttributeError exception is caught ,
do nothing .
value under the cache _ key key of the _ format _ cache dictionary is None .
get format _ type attribute of the settings object , return it .
call the function lazy with 4 arguments : get _ format , six.text _ type , list and tuple , substitute the result for get _ format _ lazy .
define the function date _ format with 3 arguments : value , format set to None and use _ l10n set to None .
call the function dateformat.format with 2 arguments : value and result of the function get _ format called with 2 arguments :
format , if its true , otherwise string &apos; DATE _ FORMAT &apos; and use _ l10n as use _ l10n , return the result. define the function time _ format with 3 arguments : value , format set to None and use _ l10n set to None .
call the function dateformat.time _ format with 2 arguments : value and result of the function get _ format called with 2 arguments :
format , if its true , otherwise string &apos; TIME _ FORMAT &apos; and use _ l10n as use _ l10n , return the result. define the function number _ format with 4 arguments : value , decimal _ pos set to None , use _ l10n set to None ,
if use _ l10n is true , or use _ l10n is None and settings.USE _ L10N is true ,
call the function get _ language , substitute the result for lang .
if not ,
lang is None .
call the method numberformat.format with 6 arguments : value , result of the function get _ format called with 3 arguments :
string &apos; DECIMAL _ SEPARATOR &apos; , lang and use _ l10n set to use _ l10n , decimal _ pos , result of the function get _ format called with 3 arguments : string &apos; NUMBER _ GROUPING &apos; , lang and use _ l10n as use _ l10n , result of the function get _ format called with an argument : string &apos; THOUSAND _ SEPARATOR &apos; , lang and use _ l10n as use _ l10n and force _ grouping as force _ grouping , return the result. define the function localize with 2 arguments value and use _ l10n set to None .
if value is an instance of bool .
call the function six.text _ type with an argument value , use the result as an argument for the call to the function mark _ safe ,
return the result. otherwise if value is an instance of decimal.Decimal , float or six.integer _ types ,
call the function number _ format with 2 arguments : value and use _ l10 as use _ l10n , return the result .
otherwise if value is an instance of datetime.datetime ,
call the function date _ format with 2 arguments : value , string &apos; DATETIME _ FORMAT &apos; and use _ l10n as use _ l10n , return the result .
otherwise if value is an instance of datetime.date ,
call the function date _ format with 2 arguments : value and use _ l10n as use _ l10n , return the result .
otherwise if value is an instance of datetime.time ,
call the function time _ format with 3 arguments : value , string &apos; TIME _ FORMAT &apos; and use _ l10n as use _ l10n , return the result .
if not ,
return value .
define the function localize _ input with 2 arguments value and default set to None .
otherwise if value is an instance of decimal.Decimal , float or six.integer _ types ,
call the function number _ format with an argument value , return the result .
otherwise if value is an instance of datetime.datetime ,
call the method datetime _ safe.new _ datetime with an argument value , substitute the result for value .
call the function force _ str with an argument : default if it is true , or if not , first element of the result of the function ,
get _ format called with an argument string &apos; DATETIME _ INPUT _ FORMATS &apos; , substitute the result for format. call the method value.strftime with an argument format , return the result .
otherwise if value is an instance of datetime.date ,
call the method datetime _ safe.new _ date with an argument value , substitute the result for value .
call the function force _ str with an argument : default if it is true , or if not , first element of the result of the function ,
get _ format called with an argument string &apos; DATE _ INPUT _ FORMATS &apos; , substitute the result for format. call the method value.strftime with an argument format , return the result .
otherwise if value is an instance of datetime.time ,
call the function force _ str with an argument : default if it is true , or if not , first element of the result of the function ,
get _ format called with an argument string &apos; TIME _ INPUT _ FORMATS &apos; , substitute the result for format. call the method value.strftime with an argument format , return the result .
return value .
define the function sanitize _ separators with an argument value .
if settings.USE _ L10N is true and value is an instance of six.string _ types ,
parts is an empty list .
call the function get _ format with an argument string &apos; DECIMAL _ SEPARATOR &apos; , substitute the result for decimal _ separator .
if decimal _ separator is contained in value ,
split value into two parts by decimal _ separator , assign the result to value and decimals .
append decimals to parts .
if settings.USE _ THOUSAND _ SEPARATOR is true ,
call the function get _ format with an argument string &apos; THOUSAND _ SEPARATOR &apos; , substitute the result for thousand _ sep .
call the function unicodedata.normalize with 2 arguments : string &apos; NFKD &apos; and thousand _ sep , put the result and thousand _ sep into a set ,
for every replacement in the resulting set , replace every occurrence of replacement in value for an empty string , substitute the result for value .
append value to parts .
reverse order of parts , join them into a string , separated with &apos; .&apos; , substitute the result for value .
return value .
import module copy .
import module opera .
from functools import wraps into default name space .
import module sys .
import module warnings .
from django.utils import six into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
from django.utils.six.moves import copyreg into default name space .
define the function curry with 3 arguments : _ curried _ func , unpacked list args and unpacked dictionary kwargs .
define the function _ curried with 2 arguments : unpacked list moreargs and unpacked dictionary morekwargs .
call the function _ curried _ func with 2 arguments : list moreargs appended to args and unpacked ,
unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping , return the result. return _ curried .
define the function memoize with 3 arguments : func , cache and num _ args .
call the function warnings.warn with 3 arguments :
string &quot; memoize wrapper is deprecated and will be removed in Django 1.9 . Use django.utils.lru _ cache instead . &quot; , RemovedInDjango19Warning and stacklevel set to integer 2. decorator function wraps with an argument func .
define the function wrapper with an argument unpacked list args .
mem _ args is a list containing of first num _ args elements of args list .
if mem _ args is contained in cache ,
get the value under the mem _ args key of the cache dictionary , return it .
call the function func with an argument unpacked list args , substitute the result for result .
substitute result for value under the mem _ args key of the cache dictionary .
return result .
return wrapper .
derive the class cached _ property from the object base class .
define the method _ _ init _ _ with 3 arguments : self , func and name set to None .
substitute func for self.func.
if name is true , substitute it for self.name , otherwise substitute func . _ _ name _ _ for self.name.
define the method _ _ get _ _ with 3 arguments : self , instance and name type to None .
if instance is None ,
return self .
call the function self.func with an argument instance , substitute the result for res and value under the self.name key of the instance . _ _ dict _ _ dictionary .
return res .
derive the class Promise from the object base class .
do nothing .
define the function lazy with 2 arguments : func and unpacked list resultclasses .
decorator total _ ordering ,
derive the class _ _ proxy _ _ from the Promise base class .
_ _ dispatch is None .
define the method _ _ init _ _ with 3 arguments : self , args and kw .
substitute args for self . _ _ args .
substitute kw for self . _ _ kw .
if self . _ _ dispatch is None .
call the method self . _ _ prepare _ class _ _ .
define the method _ _ reduce _ _ with an argument self .
return a tuple wit 2 elements : _ lazy _ proxy _ unpickle and tuple with 3 elements : func , self . _ _ args , self . _ _ kw and resultclasses .
classmethod decorator ,
define the method _ _ prepare _ class _ _ with an argument self .
cls . _ _ dispatch is an empty dictionary .
for every resultclass in resultclasses ,
value under the resultclass key of the cls . _ _ dispatch dictionary is an empty dictionary .
call the method resultclass.mro , reverse the order of elements , for every type _ in the result .
for every k and v in result of the call to the method type _ . _ _ dict _ _ .items ,
call the method cls . _ _ promise _ _ with 3 arguments : resultclass , k and v , substitute the result for meth .
if cls has an attribute k ,
skip this loop iteration ,
set k attribute of cls object to meth .
if bytes is contained in resultclasses , cls . _ delegate _ bytes is boolean True , otherwise it is boolean False .
if six.text _ type is contained in resultclasses , cls . _ delegate _ text is boolean True , otherwise it is boolean False .
if cls . _ delegate _ bytes and cls . _ delegate _ text are both false , raise an error , with an argument string &quot; Cannot call lazy ( ) with both bytes and text return types . &quot; .
if cls . _ delegate _ text is true ,
if six.PY3 is true ,
substitute cls . _ _ text _ cast for cls . _ _ str _ _ .
if not ,
substitute cls . _ _ text _ cast for cls . _ _ text _ cast .
otherwise if cls . _ delegate _ bytes is true ,
if six.PY3 is true ,
substitute cls . _ _ bytes _ cast for cls . _ _ bytes _ _ .
if not ,
substitute cls . _ _ bytes _ cast for cls . _ _ str _ _ .
class method decorator ,
define the method _ _ promise _ _ with 4 arguments : cls , klass , funcname and method .
define the method _ _ wrapper _ _ with 3 arguments : self , unpacked list args and unpacked dictionary kw .
call the function func with 2 arguments : unpacked list self . _ _ args and unpacked dictionary self . _ _ kw , substitute the result for res .
get the type of res , call the method mro on the result , for every t in the result ,
if t is contained in self . _ _ dispatch ,
get the value under the funcname key of the t-th elment of self . _ _ dispatch dictionary , call the result with 3 arguments : res ,
unpacked list args and unpacked dictionary kw , return the result. raise an TypeError exception with an argument sting &quot; Lazy object returned unexpected type . &quot; .
if klass is not contained in cls . _ _ dispatch ,
value under the klass key of the cls . _ _ dispatch dictionary is an empty dictionary .
substitute method for value under the funcname key of the dictionary under the klass key of the cls . _ _ dispatch dictionary .
return _ _ wrapper _ _ .
define the method _ _ text _ cast with an argument self .
call the function func with 2 arguments : unpacked list self . _ _ args and unpacked dictionary self . _ _ kw , return the result .
define the method _ _ bytes _ cast with an argument self .
call the function func with 2 arguments : unpacked list self . _ _ args and unpacked dictionary self . _ _ kw ,
use the result as an argument for the call to the function bytes , return the result. define the method _ _ cast with an argument self .
if self . _ delegate _ bytes is true ,
call the method self . _ _ bytes _ cast , return the result .
otherwise if self . _ delegate _ text is true ,
call the method self . _ _ text _ cast , return the result .
if not ,
call the function func with 2 arguments : unpacked list self . _ _ args and unpacked dictionary self . _ _ kw , return the result .
define the method _ _ ne _ _ with 2 arguments : self and other .
if other is an instance of Promise class ,
call the method other . _ _ cast , substitute the result for other .
call the method self . _ _ cast , if the result doesnt equal to other , return boolean True , otherwise return boolean False .
define the method _ _ ne _ _ with 2 arguments : self and other .
if other is an instance of Promise class ,
call the method other . _ _ cast , substitute the result for other .
call the method self . _ _ cast , if the result equals other , return boolean True , otherwise return boolean False .
define the method _ _ lt _ _ with 2 arguments : self and other .
if other is an instance of Promise ,
call the method other . _ _ cast , substitute the result for other .
call the method self . _ _ cast , if the result is lesser than other , return boolean True , otherwise return boolean False .
define the method _ _ hash _ _ with an argument self .
call the method self . _ _ cast , return the hash value of the result .
define the method _ _ mod _ _ with 2 arguments : self and rhs .
if self . _ delegate _ bytes and six.PY2 are both true ,
call the function bytes with an argument self , divide the result with rhs and return the reminder of the division .
otherwise if self . _ delegate _ text is true ,
call the function six.text _ type with an argument self , divide the result with rhs and return the reminder of the division .
call the function sself . _ _ cast with an argument self , divide the result with rhs and return the reminder of the division .
define the method _ _ deepcopy _ _ with 2 arguments : self and memo .
get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it .
return self .
decorator function wraps with an argument func .
define the function _ _ wrapper _ _ with 2 arguments : unpacked list args and unpacked dictionary kw .
call the function _ _ proxy _ _ with 2 arguments : args and kw , return the result .
return _ _ wrapper _ _ .
define the function _ lazy _ proxy _ unpickle with 4 arguments : func , args , kwargs and unpacked list resultclasses .
call the function lazy with 2 arguments : func and unpacked list resultclasses , call the result with 2 arguments : unpacked list args ,
and unpacked dictionary kwargs. define the function allow _ lazy with 2 arguments : func and unpacked list resultclasses .
decorator function wraps with an argument func .
define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwargs .
call the function six.itervalues with an argument kwargs , convert the result to a list and append it to a list containing args ,
for every arg in the result , if arg is an instance of Promise class ,
break from the loop execution ,
if not ,
call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs .
call the function lazy with 2 arguments : func and unpacked list resultclasses , call the result with 2 arguments : unpacked list args ,
and unpacked dictionary kwargs , return the result. return wrapper .
empty is an instance of object class .
define the function new _ method _ proxy with an argument func .
define the method inner with 2 arguments : self and unpacked list args .
if self . _ wrapped is contained in empty ,
call the method self . _ setup .
call the function func with 2 arguments : self . _ wrapped and unpacked list args .
self . _ wrapped .
derive the class LazyObject from the object base class .
_ wrapped is None .
define the method _ _ init _ _ with an argument self .
substitute empty for self . _ wrapped .
call the function new _ method _ proxy with an argument getattr , substitute the result for _ _ getattr _ _ .
define the method _ _ setattr _ _ with 3 arguments : self , name and value .
if name equals string &quot; _ wrapped &quot; ,
substitute value under the &quot; _ wrapped &quot; key of the self . _ _ dict _ _ dictionary .
if not ,
if self . _ wrapped is empty ,
call the method self . _ setup .
set name attribute of self . _ wrapped object to value .
define the method _ _ delattr _ _ with 2 arguments self and name .
if name equals string &quot; _ wrapped &quot; ,
raise an TypeError exception with an argument sting &quot; can &apos;t delete _ wrapped . &quot; .
if self . _ wrapped is empty ,
call the method self . _ setup .
delete name attribute from self . _ wrapped object .
define the method _ setup with an argument self .
raise an NotImplementedError exception with an argument sting &apos; subclasses of LazyObject must provide a _ setup ( ) method &apos; .
define the method _ _ getstate _ _ with an argument self .
if self . _ wrapped is empty ,
call the method self . _ setup .
return self . _ wrapped . _ _ dict _ _ .
classmethod decorator ,
define the method _ _ newobj _ _ with 2 arguments cls and unpacked list args .
call the method cls . _ _ new _ _ with 2 arguments : cls and unpacked list args .
define the method _ _ reduce _ ex _ _ with 2 arguments self and proto .
if proto is greater than or equal to integer 2 ,
return a tuple with 3 elements : self . _ _ newobj _ _ , tuple with an element self . _ _ class _ _ and result of the method self . _ _ getstate _ _ .
if not ,
return a tuple with 3 elements : copyreg . _ reconstructor , tuple with 3 elements : self . _ _ class _ _ , object and None ,
and result of the method self . _ _ getstate _ _ . define the method _ _ deepcopy _ _ with 2 arguments self and memo .
if self . _ wrapped is empty ,
get type of self , call it and substitute the result for result .
get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it .
return result .
call the method copy.deepcopy with 2 arguments : self . _ wrapped and memo , return the result .
if six.PY3 is true ,
call the function new _ method _ proxy with an argument bytes , substitute the result for _ _ bytes _ _ .
call the function new _ method _ proxy with an argument str , substitute the result for _ _ str _ _ .
call the function new _ method _ proxy with an argument bool , substitute the result for _ _ bool _ _ .
if not ,
call the function new _ method _ proxy with an argument str , substitute the result for _ _ str _ _ .
call the function new _ method _ proxy with an argument unicode , substitute the result for _ _ unicode _ _ .
call the function new _ method _ proxy with an argument bool , substitute the result for _ _ nonzero _ _ .
call the function new _ method _ proxy with an argument dir , substitute the result for _ _ dir _ _ .
cal the method operator.attrgetter with an argument string &quot; _ _ class _ _ &quot; , use the result as an argument for the call to the function ,
new _ method _ proxy , _ _ class _ _ is an property object created with previous result as an argument. call the function new _ method _ proxy with an argument operator.eq , substitute the result for _ _ eq _ _ .
call the function new _ method _ proxy with an argument operator.ne , substitute the result for _ _ ne _ _ .
call the function new _ method _ proxy with an argument hash , substitute the result for _ _ hash _ _ .
call the function new _ method _ proxy with an argument operator.getitem , substitute the result for _ _ getitem _ _ .
call the function new _ method _ proxy with an argument operator.setitem , substitute the result for _ _ setitem _ _ .
call the function new _ method _ proxy with an argument operator.delitem , substitute the result for _ _ delitem _ _ .
call the function new _ method _ proxy with an argument len , substitute the result for _ _ len _ _ .
call the function new _ method _ proxy with an argument operator.contains , substitute the result for _ _ contains _ _ .
substitute super for _ super .
derive the class SimpleLazyObject from the LazyObject base class .
define the method _ _ init _ _ with 2 arguments self and func .
substitute func for value under the &apos; _ setupfunc &apos; key of the self . _ _ dict _ _ dictionary .
call the function _ super with 2 arguments : class SimpleLazyObject and self , call the method _ _ init _ _ on the result .
define the method _ setup with an argument self .
call the method self . _ setupfunc , substitute the result for self . _ wrapped .
define the method _ _ repr _ _ with an argument self .
if self . _ wrapped is empty ,
substitute self . _ setupfunc for repr _ attr .
if not ,
substitute self . _ wrapped for repr _ attr .
return a string &apos; &lt; % s : % r &gt; &apos; , format it with _ _ name _ _ field of the self class and repr _ attr .
define the method _ _ deepcopy _ _ with 2 arguments self and memo .
if self . _ wrapped is empty ,
result is an instance of SimpleLazyObject class , created with an argument self . _ setupfunc .
get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it .
return result .
call the method copy.deepcopy with 2 arguments : self . _ wrapped and memo , return the result .
derive the class lazy _ property from the property base class .
define the method _ _ new _ _ with 5 arguments : cls , fget set to None , fset set to None , fdel set to None and doc set to None .
if fget is not None ,
decorator function wraps with an argument fget .
define the function fget with 3 arguments : instance , instance _ type set to None and name set to fget . _ _ name _ _ .
get name attribute from the instance object , call it and return the result .
if fset is not None ,
decorator function wraps with an argument fset .
define the function fset with 3 arguments : instance , valse to None and name set to fset . _ _ name _ _ .
get name attribute from the instance object , call it with an argument value and return the result .
if fdel is not None ,
decorator function wraps with an argument fdel .
define the function fdel with 2 arguments : instance and name set to fdel . _ _ name _ _ .
get name attribute from the instance object , call it and return the result .
return an property object with getter function fget , setter function fset , destructor fdel and documentation string doc .
define the function partition with 2 arguments : predicate and values .
results is a tuple with 2 elements , 2 empty lists .
for every item in values ,
call the function predicate with an argument item , use it as a key to get results dictionary value , append item to it .
return results .
if sys.version _ info is greater than or equal to a tuple with 3 elements : integers 2 , 7 and 2 , respectively ,
from functools import total _ ordering .
if not ,
define the function total _ ordering with an argument cls .
convert is a dictionary with 4 initial entries : list with 3 tuples : tuple with 2 elements : string &apos; _ _ gt _ _ &apos; ,
and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than other or self is equal to other , tuple with 2 elements : string &apos; _ _ le _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean True if self is lesser than other or self is equal to other , tuple with 2 elements : string &apos; _ _ ge _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than other , for &apos; _ _ lt _ _ &apos; , list with 3 tuples : tuple with 2 elements : string &apos; _ _ ge _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than or equal to other , or self is equal to other , tuple with 2 elements : string &apos; _ _ lt _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean True if self is lesser than or equal to other , or self is not equal to other , tuple with 2 elements : string &apos; _ _ gt _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than or equal to other , for &apos; _ _ le _ _ &apos; , list with 3 tuples : tuple with 2 elements : string &apos; _ _ lt _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than other or self is equal to other , tuple with 2 elements : string &apos; _ _ ge _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean True if self is greater than other or self is equal to other , tuple with 2 elements : string &apos; _ _ le _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than other , for &apos; _ _ gt _ _ &apos; , and list with 3 tuples : tuple with 2 elements : string &apos; _ _ le _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean True if self is not greater than or is not equal to other , or self is equal to other , tuple with 2 elements : string &apos; _ _ gt _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean True if self is greater than or not equal to other , or self is not equal to other , tuple with 2 elements : string &apos; _ _ lt _ _ &apos; , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than or equal to other , for &apos; _ _ ge _ _ &apos; , convert cls to a dictionary , convert the result into a set and convert convert into a set , roots is a set of differences of the two previous sets .
if roots is false ,
raise an ValueError exception with an argument string &apos; must define at least one ordering operation : &lt; &gt; &lt; = &gt; = &apos; .
get maximal element from roots and substitute it for root .
get the value under the root key of the convert dictionary , for every opname and opfunc in the result ,
if opname is not contained in roots ,
substitute opname for opfunc . _ _ name _ _ .
get opname attribute from int object , substitute its field _ _ doc _ _ for opfunc . _ _ doc _ _ .
set opname attribute of cls object to opfunc .
return cls .
from _ _ future _ _ import unicode _ literals into default name space .
import module re .
import module sys .
from django.utils.encoding import force _ text and force _ str into default name space .
from django.utils.functional import allow _ lazy into default name space .
from django.utils.safestring import SafeData and mark _ safe into default name space .
from django.utils import six into default name space .
from django.utils.six.moves.urllib.parse import quote , unquote , urlsplit and urlunsplit into default name space .
from django.utils.text import normalize _ newlines into default name space .
from .html _ parser import HTMLParser and HTMLParseError into default name space .
TRAILING _ PUNCTUATION is a list with 7 elements : &apos; .&apos; , &apos; , &apos; , &apos; : &apos; , &apos; ; &apos; , &apos; . ) &apos; , &apos; &quot; &apos; and &apos; \ &apos; &apos; .
WRAPPING _ PUNCTUATION is a list with 6 elements : tuple with 2 elements : &apos; ( &apos; and &apos; ) &apos; , tuple with 2 elements : &apos; &lt; &apos; and &apos; &gt; &apos; ,
tuple with 2 elements : &apos; &#91; &apos; and &apos; &#93; &apos; , tuple with 2 elements : &apos; &amp; lt &apos; and &apos; &amp; gt &apos; , tuple with 2 elements : &apos; &quot; &apos; and &apos; &quot; &apos; , and tuple with 2 elements : &apos; \ &apos; &apos; and &apos; \ &apos; &apos; . DOTS is a list with 6 elements : strings &apos; &amp; middot ; &apos; , &apos; * &apos; , &apos; \ u2022 &apos; , &apos; &amp; # 149 ; &apos; , &apos; &amp; bull ; &apos; and &apos; &amp; # 8226 ; &apos; .
call the function re.compile with raw string &apos; &amp; ( ? ! ( \ w + &#124; # \ d + ) ; ) &apos; , substitute the result for unencoded _ ampersands _ re .
call the function re.compile with raw string &apos; ( \ s + ) &apos; , substitute the result for word _ split _ re .
call the function re.compile with 2 arguments : raw string &apos; ^ https ? : / / \ &#91; ? \ w &apos; and re.IGNORECASE , substitute the result for simple _ url _ re .
call the function re.compile with 2 arguments : raw string &apos; ^ www \ . &#124; ^ ( ? ! http ) \ w &#91; ^ @ &#93; + \ . ( com &#124; edu &#124; gov &#124; int &#124; mil &#124; net &#124; org ) ( $ &#124; / . * ) $ &apos; ,
and re.IGNORECASE , substitute the result for simple _ url _ re. call the function re.compile with raw string &apos; &amp; ( ? ! ( \ w + &#124; # \ d + ) ; ) &apos; , substitute the result for simple _ email _ re .
call the function re.compile with raw string &apos; ( &lt; a &#91; ^ &gt; &#93; * ? ) target = &#91; ^ \ s &gt; &#93; + &apos; , substitute the result for link _ target _ attribute _ re .
call the function re.compile with 2 arguments :
raw string &apos; ( ? : &lt; br clear = &quot; all &quot; &gt; &#124; &lt; i &gt; &lt; \ / i &gt; &#124; &lt; b &gt; &lt; \ / b &gt; &#124; &lt; em &gt; &lt; \ / em &gt; &#124; &lt; strong &gt; &lt; \ / strong &gt; &#124; &lt; \ / ? smallcaps &gt; &#124; &lt; \ / ? uppercase &gt; ) &apos; and re.IGNORECASE , substitute the result for html _ gunk _ re. call the function re.compile with 2 arguments : raw string &apos; ( ( ? : &lt; p &gt; ( ? : % s ) . * ? &#91; a-zA-Z &#93; . * ? &lt; / p &gt; \ s * ) + ) &apos; ,
formated with string created by joining elements of result of the function re.escape with an argument x , with separator &apos; &#124; &apos; , for every x in DOTS , and re.DOTALL , substitute the result for hard _ coded _ bullets _ re. call the function re.compile with raw string &apos; ( ? : &lt; p &gt; ( ? : &amp; nbsp ; &#124; \ s &#124; &lt; br \ / &gt; ) * ? &lt; / p &gt; \ s * ) + \ Z &apos; , substitute the result for trailing _ empty _ content _ re .
define the function escape with an argument text .
call the function force _ text with an argument text , replace every occurrence of &apos; &amp; &apos; in the result with &apos; &amp; amp ; &apos; ,
every occurrence of &apos; &lt; &apos; with &apos; &amp; lt ; &apos; , every occurrence of &apos; &gt; &apos; with &apos; &amp; gt ; &apos; , every occurrence of &apos; &quot; &apos; with &apos; &amp; quot ; &apos; , and every occurrence of &quot; &apos; &quot; with &apos; &amp; # 39 ; &apos; , call the function mark _ safe with the previous result as an argument , return the result. call the function allow _ lazy with 2 arguments : escape , six.text _ type , substitute the result for escape .
_ js _ escapes is a dictionary with 11 initial entries : &apos; \ \ u005C &apos; for integer representation of string &apos; \ \ &apos; ,
&apos; \ \ u0027 &apos; for integer representation of string &apos; \ &apos; , &apos; \ \ u0022 &apos; for integer representation of string &apos; &quot; &apos; , &apos; \ \ u003E &apos; for integer representation of string &apos; &gt; &apos; , &apos; \ \ u003C &apos; for integer representation of string &apos; &lt; &apos; , &apos; \ \ u0026 &apos; for integer representation of string &apos; % &apos; , &apos; \ \ u003D &apos; for integer representation of string &apos; = &apos; , &apos; \ \ u002D &apos; for integer representation of string &apos; -&apos; , &apos; \ \ u003B &apos; for integer representation of string &apos; ; &apos; , &apos; \ \ u2028 &apos; for integer representation of string &apos; \ u2028 &apos; and &apos; \ \ u2029 &apos; for integer representation of string &apos; \ u2029 &apos; . for eery z in range of integers from 0 to 31 , update _ js _ escapes dictionary with &apos; \ \ u % 04X &apos; formated with z ,
for integer representation of z converted into a string. define the function escapejs with an argument value .
call the function force _ text with an argument value , call the method translate on the result , with an argument _ js _ escapes ,
use the result as an argument for the call to the mark _ safe function , return the result. call the function allow _ lazy with 2 arguments : escapejs , six.text _ type , substitute the result for escapejs .
define the function conditional _ escape with an argument text .
if text has an &apos; _ _ html _ _ &apos; attribute ,
call the method text . _ _ html _ _ , return the result .
if not ,
call the function escape with an argument text , return the result .
define the function format _ html with 3 arguments : format _ string , unpacked list args and unpacked dictionary kwargs .
map elements from args through the function conditional _ escape , substitute the result for args _ safe .
kwargs _ safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs ,
with value result of the conditional _ escape function called with an argument v for key k. call the method format _ string.format with 2 arguments : unpacked list args _ safe and unpacked dictionary kwargs _ safe ,
use the result as an argument for the call to the function mark _ safe , return the result. define the function format _ html _ join with 3 arguments : sep , format _ string and args _ generator .
join results of format _ html called with 2 arguments : format _ string and tuple with an element args , into a string ,
separated with result of the function conditional _ escape with an argument sep , for every args in args _ generator , use the result as an argument for the call to the function mark _ safe , return the result. define the function linebreaks with 2 arguments : value and autoescape set to boolean False .
call the function normalize _ newlines with an argument value , substitute the result for value .
call the method re.split with 2 arguments : string &apos; \ n { 2 , } &apos; and value , substitute the result for paras .
if autoescape is true ,
call the function escape with an argument p , replace every occurrence of &apos; \ n &apos; in the result for &apos; &lt; br / &gt; &apos; ,
format the string &apos; &lt; p &gt; % s &lt; / p &gt; &apos; with the result , for every p in paras , substitute list of results for paras. if not ,
replace every occurrence of &apos; \ n &apos; in p for &apos; &lt; br / &gt; &apos; ,
format the string &apos; &lt; p &gt; % s &lt; / p &gt; &apos; with the result , for every p in paras , substitute list of results for paras. join elements of paras into a string separated with &apos; \ n \ n &apos; , return the result .
call the function allow _ lazy with 2 arguments : linebreaks , six.text _ type , substitute the result for linebreaks .
derive the class MLStripper from the HTMLParser base class .
define the method _ _ init _ _ with an argument self .
if fist and second element of sys.version _ info equals to integer 3 and 2 , respectively ,
call the method HTMLParser . _ _ init _ _ with 2 arguments : self and strict set to boolean False .
if not ,
call the method HTMLParser . _ _ init _ _ with an argument self .
call the method self.reset.
self.fed is an empty list .
define the method handle _ data with 2 arguments self and d .
append d to self.fed.
define the method handle _ entityref with 2 arguments self and name .
format string &apos; &amp; % s ; &apos; with name , append it to self.fed.
define the method handle _ charref with 2 arguments self and name .
format string &apos; &amp; # % s ; &apos; with name , append it to self.fed.
define the method get _ data with an argument self .
join elements of self.fed into a string , return the result .
define the function _ strip _ once with an argument value .
s is an instance of MLStripper class .
try ,
call the method s.feed with an argument value .
if HTMLParseError exception is caught ,
return value .
try ,
close file descriptor s .
if HTMLParseError or UnboundLocalError exceptions are caught ,
sum the result of the method s.get _ data and s.rawdata , return the result .
if not ,
call the method s.get _ data , return the result .
define the function strip _ tags with an argument value .
while &apos; &lt; &apos; is contained in value and &apos; &gt; &apos; is contained in value ,
call the function _ strip _ once with an argument value , substitute the result for new _ value .
if new _ value equals value ,
break from the loop execution .
substitute new _ value for value .
return value .
call the function allow _ lazy with an argument strip _ tags , substitute the result for strip _ tags .
define the function remove _ tags with 2 arguments : html and tags .
tags is a list containing results of the function re.escape with an argument tag , for every tag in tags split into words .
join elements of tags into a string , separated with &apos; &#124; &apos; , format string &apos; ( % s ) &apos; with it , substitute the result for tags _ re .
call the function re.compile with 2 arguments : raw string &apos; &lt; % s ( / ? &gt; &#124; ( \ s + &#91; ^ &gt; &#93; * &gt; ) ) &apos; formated with tags _ re and re.U ,
substitute the result for starttag _ re. call the function re.compile with an argument string &apos; &lt; / % s &gt; &apos; formated with tags _ re , substitute the result for endtag _ re .
call the function starttag _ re.sub with 2 arguments : an empty string and html , substitute the result for html .
call the function endtag _ re.sub with 2 arguments : an empty string and html , substitute the result for html .
return html .
call the function allow _ lazy with 2 arguments : remove _ tags , six.text _ type , substitute the result for remove _ tags .
define the function strip _ spaces _ between _ tags with an argument value .
call the method re.sub with 3 arguments : raw string &apos; &gt; \ s + &lt; &apos; , string &apos; &gt; &lt; &apos; and result of the function force _ text ,
called with an argument value , return the result. call the function allow _ lazy with 2 arguments : strip _ spaces _ between _ tags , six.text _ type , substitute the result for strip _ spaces _ between _ tags .
define the function strip _ entities with an argument value .
call the method re.sub with 3 arguments : raw string &apos; &amp; ( ? : \ w + &#124; # \ d + ) ; &apos; , empty string and result of the function force _ text ,
called with an argument value , return the result. call the function allow _ lazy with 2 arguments : strip _ entities , six.text _ type , substitute the result for strip _ entities .
define the function smart _ urlquote with an argument url .
try ,
call the function urlsplit with an argument url , assign the result to scheme , netloc , path , query and fragment , respectively .
try ,
call the method netloc.encode with an argument string &apos; idna &apos; , call the method decode on the result with an argument &apos; ascii &apos; ,
substitute the result for netloc. if UnicodeError exception is caught ,
do nothing .
if not ,
call the function urlunsplit with an argument tuple with 4 elements : scheme , netloc , path , query and fragment , substitute the result for url .
if ValueError exception is caught ,
do nothing .
call the function force _ str with an argument url , use the result as an argument for the call to the function unquote , substitute the result for url .
call the function quote with 2 arguments : url and safe as bytes string &apos; ! * \ &apos; ( ) ; : @ &amp; = + $ , / ? # &#91; &#93; ~ &apos; , substitute the result for url .
call the function force _ text with an argument url , return the result .
define the function urlize with 4 arguments : text , trim _ url _ limit set to None , nofollow set to boolean False ,
define the function trim _ url with 2 arguments : x and limit set to trim _ url _ limit .
if limit is None or length of x is lesser than or equal to limit ,
return x .
return a string &apos; % s ... &apos; formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit .
if text is an instance of SafeData , safe _ input is boolean True , otherwise is boolean False .
call the function force _ text with an argument text , split by it word _ split _ re , substitute it for words .
for every i and word in enumerated iterable words ,
if &apos; .&apos; is contained in words or &apos; @ &apos; is contained in word or &apos; : &apos; is contained in word ,
substitute empty string , word an empty string for lead , middle and trail , respectively .
for every punctuation in TRAILING _ PUNCTUATION ,
if middle ends with punctuation ,
substitute elements of middle from the beginning to the negative length of punctuation , for middle .
sum punctuation and trail , substitute the result for trail .
for every opening and closing in WRAPPING _ PUNCTUATION ,
if middle starts with opening ,
substitute elements of middle from length of opening index to the end , for middle .
sum lead and opening , substitute the result for lead .
if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one ,
substitute elements of middle from the beginning to the negative length of closing , for middle .
sum trail and closing , substitute the result for lead .
url is None .
if nofollow is true nofollow _ attr is a string &apos; rel = &quot; nofollow &quot; &apos; , otherwise nofollow _ attr is an empty string .
call the method simple _ url _ re.match with an argument middle , if it evaluates to true ,
call the function smart _ urlquote with an argument middle , substitute the result for url .
otherwise if call the method simple _ url _ 2 _ re.match with an argument middle evaluates to true ,
call the function smart _ urlquote with an argument string &apos; http : / / % s &apos; formated with an argument middle , substitute the result for url .
otherwise if &apos; : &apos; is not contained in middle and result of the function simple _ email _ re.match called with an argument middle ,
evaluates to true , split middle into two parts from the right by &apos; @ &apos; character , assign the resulting parts to local and domain .
try ,
call the method domain.encode with an argument string &apos; idna &apos; , call the method decode on the result with an argument string &apos; ascii &apos; ,
substitute the result for domain. if UnicodeError exception is caught ,
skip this loop iteration .
url is a string &apos; mailto : % s @ % s &apos; formated with local and domain .
nofollow _ attr is an empty string .
if url is true ,
call the function trim _ url with an argument middle , substitute the result for trimmed .
if autoescape is true and safe _ input is false ,
call the function escape with an argument lead , substitute the result for lead , call the function escape with an argument trail ,
substitute the result for trail. call the function escape with an argument url , substitute the result for url , call the function escape with an argument trimmed ,
substitute the result for trimmed. middle is a string &apos; &lt; a href = &quot; % s &quot; % s &gt; % s &lt; / a &gt; &apos; formated with url , nofollow _ attr and trimmed .
format string &apos; &lt; a href = &quot; % s &quot; % s &gt; % s &lt; / a &gt; &apos; with lead , middle and trail , use it as an argument for the call to the function mark _ safe ,
substitute the result for i-th element of words. if not ,
if safe _ input is true ,
call the function mark _ safe with an argument word , substitute the result for i-th element of words .
otherwise if autoescape is true ,
call the function escape with an argument word , substitute the result for i-th element of words .
otherwise if safe _ input is true ,
call the function mark _ safe with an argument word , substitute the result for i-th element of words .
otherwise if autoescape is true ,
call the function escape with an argument word , substitute the result for i-th element of words .
join elements of words into a string , return it .
call the function allow _ lazy with 2 arguments : urlize , six.text _ type , substitute the result for urlize .
define the function avoid _ wrapping with an argument value .
replace every occurrence of &apos; &apos; in value for &apos; \ xa0 &apos; , return the result .
from django.utils.six.moves import html _ parser as _ html _ parse into default name space .
import module re .
import module sys .
substitute version _ info from module sys for surrent _ version .
set use _ workaround to boolean True if current _ version tuple elements are smaller than the tuple ( 2,7,3 ) , respectively ,
or if current _ version is greater than ( 3,0 ) , but smaller than ( 3,2,3 ) , otherwise set use _ workaround to boolean False. substitute HTMLParseError from the module _ html _ parser for HTMLParseError .
if use _ workaround is boolean False ,
if tuple current _ version elements are greater or equal to ( 3 , 4 ) , respectively ,
derive the class HTMLParser from the base class HTMLParser located in the module _ html _ parser .
define the initialization method _ _ init _ _ , with self instance of this class , convert _ charrefs set to boolean False ,
and dictionary of arbitrary length * * kwargs as arguments. call the initialization method for the base class , _ html _ parser.HTMLParser. _ _ init _ _ with self ,
convert _ charrefs set to convert _ charrefs and dictionary * * kwargs as the arguments. if not ,
substitute HTMLParser from the module _ html _ parser for HTMLParser .
if not ,
compile a regular expression pattern string &apos; ( &#91; a-zA-Z &#93; &#91; -.a-zA-Z0-9 : _ &#93; * ) ( ? : \ s &#124; / ( ? ! &gt; ) ) * &apos; into a regular expression object and assign it to tagfind .
derive the class HTMLParser from the base class HTMLParser located in the module _ html _ parser .
define initialization method _ _ init _ _ with self instance of the class as an argument .
call the initialization method _ html _ parser.HTMLParser. _ _ init _ _ ( self ) for the base class .
set field cdata _ tag for this class instance to None .
define method set _ cdata _ mode , with self class instance and tag as the arguments .
try ,
set field interesting for this class instance to interesting _ cdata from module _ html _ parser .
if AttributeError exception is caught ,
replace &apos; % s &apos; in the string &apos; &lt; / \ s * % s \ s * &gt; &apos; with the result of the function call tag.lower ( ) ,
use it and the re.I as the input arguments for function re.compile , put the result in the self.interesting. evaluate function tag.lower , without the arguments , put the result in the self.cdata _ tag .
define method clear _ cdata _ mode , with self class instance as an argument .
substitute _ html _ parser.interesting _ normal for self.interesting.
set self.cdata _ tag to None .
define method parse _ starttag with self class instance and i as the arguments .
set self . _ _ starttag _ text to None .
call the method self.check _ for _ whole _ start _ tag with i as an argument , substitute result for the endpos .
if endpos is lesser than zero ,
return endpos .
substitute self.rawdata for rawdata .
slice the list from the i-th to the endpos-th element , substitute it for self . _ _ starttag _ text .
attrs is a empty list .
match the rawdata from the position i + 1 , with tagfind pattern , assign the result to the match .
if match evaluates to False throw an exception with the string message &apos; unexpected call to parse _ starttag ( ) &apos; .
find the ending position of the regular expression match of the object match , substitute the result for k .
find the first subgroup of the matched string from the match object , convert it to lowercase , substitute it for tag and self.lasttag.
as long k is smaller than endpos ,
match the rawdata from the position k , with attrfind pattern , assign the result to the m .
if m is not False , None is considered False ,
breaks from the smallest enclosing loop .
find the first , second and third subgroup of the m regular expression match , assign the result to the attrname , rest and attrvalue , respectively .
if rest is not False , None is considered False ,
set attrvalue to None .
otherwise , if first and the last character of attrvalue are &apos; \ &apos; charter or first and last character of attrvalue are &apos; &quot; &apos; character ,
remove first and last character from the attrvalue , substitute it for attrvalue .
if attrvalue is not an empty string ,
call the method unescape with attrvalue as the argument on the self class instance , substitute the result for attrvalue .
form the tuple from the attrname converted to lowercase and attrvalue , append it to the end of attrs .
find the ending position of the regular expression match of the object match , substitute the result for k .
slice the rawdata string from the k-th to the endpos-th index , remove the whitespaces from the start and the end of the string , substitute it for end .
if end is not a &apos; &gt; &apos; or &apos; / &gt; &apos; character ,
evaluate the self.getpos ( ) and assign the result to the lineno and offset respectfully .
if self . _ _ stattag _ text contains newline character ,
increment the lineno by the count of the newlines in self . _ _ starttag _ text .
find the last index of newline occurrence in self . _ _ starttag _ text , subtract it from total length of self . _ _ starttag _ text ,
substitute the result for offset. if not ,
increment the offset by the length of self . _ _ starttag _ text .
slice the rawdata from k to endpos , then take the first 20 elements of the previous slice ,
with it replace % r in the string &quot; junk characters in start tag : % r &quot; , call the method self.error with the resulting string as an argument. if string end ends with string &apos; / &gt; &apos; ,
call the method self.handle _ startendtag with tag and attrs as the arguments .
if not ,
call the method self.handle _ starttag , with tag and attrs as the arguments .
if tag is contained in self.CDATA _ CONTENT _ ELEMENTS ,
call the method self.set _ cdata _ mode with tag as the argument .
return endpos .
define the method parse _ endtag with self class instance and i as the arguments .
substitute self.rawdata for rawdata .
take two characters from the i-th element of rawdata , if they are not equal to the string &apos; &lt; / &apos; ,
throw an exception with string &quot; unexpected call to parse _ endtag &quot; as the message. search anywhere in the rawdata string starting from the ( i + 1 ) -th element for the _ html _ parser.endendeag , replace the result for match .
if there is no match ,
return integer -1 .
find the ending position of the regular expression match of the object match , substitute the result for j .
match the rawdata from the position i , with _ html _ parser.endtagfind pattern , assign the result to the match .
if there is no match ,
if self.cdata _ tag is not None ,
slice the rawdata to obtain substring from i-th to j-th element , use it as the argument for the method call to the self.handle _ data .
return j .
slice the rawdata from i-th to the j-th element , replace with it &apos; % r &apos; in the string &quot; bad end tag : % r &quot; , use it to call the method self.error.
find the first subgroup of the matched string from the match object , strip the whitespaces from the begging and end , replace it for tag .
if self.cdata _ tag is not None ,
convert tag to lowercase if it is not equal to self.cdata _ tag ,
slice the rawdata to obtain substring from i-th to j-th element , use it as the argument for the method call to the self.handle _ data .
return j .
convert tag to lowercase , use it as the argument for the call to the method self.handle _ endtag .
call the method self.clear _ cdata _ mode .
return j .
from _ _ future _ _ import unicode _ literals into default name space .
import module base64 .
import module calendar .
import module datetime .
import module re .
import module sys .
from binascii import Error as BinasciiError into default name space .
from email.utils import formatdate into default name space .
from django.utils.datastructures import MultiValueDict into default name space .
from django.utils.encoding import force _ str and force _ text into default name space .
from django.utils.functional import allow _ lazy into default name space .
from django.utils import six into default name space .
from django.utils.six.moves.urllib.parse import quote , quote _ plus , unquote , unquote _ plus , urlparse , urlencode as original _ urlencode .
call the function re.compile with an argument raw string &apos; ( ? : W / ) ? &quot; ( ( ? : \ \ . &#124; &#91; ^ &quot; &#93; ) * ) &quot; &apos; , substitute the result for ETAG _ MATCH .
MONTHS is a list with 12 elements : strings &apos; jan &apos; , &apos; feb &apos; , &apos; mar &apos; , &apos; apr &apos; , &apos; may &apos; , &apos; jun &apos; , &apos; jul &apos; , &apos; aug &apos; , &apos; sep &apos; , &apos; oct &apos; , &apos; nov &apos; , and &apos; dec &apos; .
_ _ D is a raw string &apos; ( ? P &lt; day &gt; \ d { 2 } ) &apos; .
_ _ D2 is a raw string &apos; ( ? P &lt; day &gt; &#91; \ d &#93; \ d ) &apos; .
_ _ M is a raw string &apos; ( ? P &lt; mon &gt; \ w { 3 } ) &apos; .
_ _ Y is a raw string &apos; ( ? P &lt; year &gt; \ d { 4 } ) &apos; .
_ _ Y2 is a raw string &apos; ( ? P &lt; year &gt; \ d { 2 } ) &apos; .
_ _ T is a raw string &apos; ( ? P &lt; hour &gt; \ d { 2 } ) : ( ? P &lt; min &gt; \ d { 2 } ) : ( ? P &lt; sec &gt; \ d { 2 } ) &apos; .
call the function re.compile with an argument raw string &apos; ^ \ w { 3 } , % s % s % s % s GMT $ &apos; formated with _ _ D , _ _ M , _ _ Y and _ _ T ,
substitute the result for RFC1123 _ DATE. call the function re.compile with an argument raw string &apos; ^ \ w { 6,9 } , % s- % s- % s % s GMT $ &apos; formated with _ _ D , _ _ M , _ _ Y2 and _ _ T ,
substitute the result for RFC850 _ DATE. call the function re.compile with an argument raw string &apos; ^ \ w { 3 } % s % s % s % s $ &apos; formated with _ _ M , _ _ D2 , _ _ T and _ _ Y ,
substitute the result for ASCTIME _ DATE. define the function urlquote with 2 arguments : url and safe set to &apos; / &apos; .
call the function quote with 2 arguments : result of the function force _ str called with an argument url ,
and result of the function force _ str called with an argument safe , use the result as an argument for the call to the function force _ text , return the result. call the function allow _ lazy with 2 arguments : urlquote and six.text _ type , substitute the result for urlquote .
define the function urlquote _ plus with 2 arguments : url and safe set to an empty string .
call the function quote _ plus with 2 arguments : result of the function force _ str called with an argument url ,
and result of the function force _ str called with an argument safe , use the result as an argument for the call to the function force _ text , return the result. call the function allow _ lazy with 2 arguments : urlquote _ plus and six.text _ type , substitute the result for urlquote _ plus .
define the function urlunquote with an argument quoted _ url .
call the function force _ str with an argument quoted _ url , use the result as an argument for the call to the function unquote ,
use the result as an argument for the call to the function force _ text , return the result. call the function allow _ lazy with 2 arguments : urlunquote and six.text _ type , substitute the result for urlunquote .
define the function urlunquote with an argument quoted _ url .
call the function force _ str with an argument quoted _ url , use the result as an argument for the call to the function unquote _ plus ,
use the result as an argument for the call to the function force _ text , return the result. call the function allow _ lazy with 2 arguments : urlunquote _ plus and six.text _ type , substitute the result for urlunquote _ plus .
define the function urlencode with 2 arguments query and doseq set to integer 0 .
if query is an instance of MultiValueDict class ,
call the method query.lists , substitute the result for query .
otherwise if query has an attribute &apos; items &apos; ,
call the method query.items , substitute the result for query .
call the function original _ urlencode with 2 arguments : list with 2 elements : result of the function force _ str with an argument k ,
and list with results of the function force _ str with an argument i , for every i in v , only if v is a list or a tuple , otherwise second element is result of the function force _ str with an argument v , for every k and v in query , and doseq , return the result. define the function cookie _ date with an argument epoch _ seconds set to None .
call the function formatdate with an argument epoch _ seconds , substitute the result for rfcdate .
return a string &apos; % s- % s- % s GMT &apos; , formated with : first 7 elements of rfcdate , elements of rfcdate from 8-th to the 11-th index ,
and elements of rfcdate from 12-th to the 25-th index. define the function http _ date with an argument epoch _ seconds set to None .
call the function formatdate with 2 arguments : epoch _ seconds and usegmt set to boolean True , return the result .
define the function parse _ http _ date with an argument date .
for every regex in tuple with 3 elements : RFC1123 _ DATE , RFC850 _ DATE and ASCTIME _ DATE ,
call the method regex.match with an argument date , substitute the result for m .
if m is not None ,
break from the loop execution .
if not ,
raise an ValueError exception with an argument string &quot; % r is not in a valid HTTP date format &quot; formated with date .
try ,
call the method m.group with an argument string &apos; year &apos; , convert the result into a string , substitute it for year .
if year is lesser than integer 100 ,
if year is lesser than integer 70 ,
increment year by integer 2000 .
if not ,
increment year by integer 1900 .
call the method m.group with an argument string &apos; mon &apos; , convert the result to lowercase , use it as an argument for the call to the ,
method MONTHS.index , increment the result by integer 1 , substitute it for month. call the method m.group with an argument string &apos; fay &apos; , convert the result into a string , substitute it for day .
call the method m.group with an argument string &apos; hour &apos; , convert the result into a string , substitute it for hour .
call the method m.group with an argument string &apos; min &apos; , convert the result into a string , substitute it for min .
call the method m.group with an argument string &apos; sec &apos; , convert the result into a string , substitute it for sec .
call the method MONTHS.index with 6 arguments : year , month , day , hour , min and sec , substitute the result for result .
call the method result.utctimetuple , use the result as an argument for the call to the method calendar.timegm , return the result .
if Exception exception is caught .
call the function six.reraise with 3 arguments : ValueError , instance of a class ValueError , created with an argument string ,
&quot; % r is not a valid date &quot; formated with date and third element of the result of the function sys.exc _ info. define the function parse _ http _ date _ safe an argument date .
try ,
call the function parse _ http _ date with an argument date , return the result .
if Exception exception is caught .
do nothing .
define the functionbase36 _ to _ int with an argument s .
if length of s is greater than integer 13 ,
raise an ValueError exception with an argument string &quot; Base36 input too large &quot; .
convert s to integer of base 36 , substitute it for value .
if six.PY2 is true and value is greater than sys.maxint ,
raise an ValueError exception with an argument string &quot; Base36 input too large &quot; .
return value .
define the function int _ to _ base36 with an argument i .
digits is a string &quot; 0123456789abcdefghijklmnopqrstuvwxyz &quot; .
factor is integer 0 .
if i is smaller than integer 0 ,
raise an ValueError exception with an argument string &quot; Negative base36 conversion input . &quot; .
if six.PY2 is true ,
if i is not an instance of six.integer _ types class ,
raise an TypeError exception with an argument string &quot; Non-integer base36 conversion input . &quot; .
if i is greater than sys.maxint ,
raise an ValueError exception with an argument string &quot; Base36 conversion input too large . &quot; .
endless loop ,
increment factor by one .
bring integer 36 to the power of factor , if i is smaller than the result ,
decrement factor by one .
break from the loop execution .
base36 is an empty list .
while factor is greater or equal to integer 0 ,
bring integer 36 to the power of factor , substitute the result for j .
floor the division of i by j , use it an an index to get the element of the digits list , append the result for base36 .
i is the reminder of the division of i by j .
decrement factor by one .
join elements of base36 into a string , return it .
define the function urlsafe _ base64 _ encode with an argument s .
call the method base64.urlsafe _ b64encode with an argument s , strip the result of the bytes string &apos; \ n = &apos; from the right , return it .
define the function urlsafe _ base64 _ decode with an argument s .
call the method s.encode with an argument string &apos; utf-8 &apos; , substitute the result for s .
try ,
left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4 ,
pad the rest of the field with bytes string &apos; = &apos; , use the result as an argument for the call to the method base64.urlsafe _ b64decode , return the result. if LookupError or BinasciiError , renamed to e , exceptions are caught .
raise an ValueError exception with an argument e .
define the function parse _ etags with an argument etag _ str .
call the method ETAG _ MATCH.findall with an argument etag _ str , substitute the result for etags .
if etags is false ,
return a list with an element etag _ str .
for every e in etags call the method e.encode with an argument string &apos; ascii &apos; , call the method decode on the result with an argument ,
string &apos; unicode _ escape &apos; , substitute the list of results for etags. return etags .
define the function quote _ etag with an argument etag .
return a string &apos; &quot; % s &quot; &apos; formated with etag , in which every occurrence of &apos; \ \ &apos; is replaced with &apos; \ \ \ \ &apos; and every occurrence of &apos; &quot; &apos; ,
is replaced with &apos; \ \ &quot; &apos; . define the function same _ origin with 2 arguments url1 and url2 .
substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2 .
try ,
if p2.scheme , p2.hostname and p2.port equals p1.scheme , p1.hostname and p1.port , respectively , return boolean True , otherwise return boolean False .
if ValueError exception is caught .
return boolean False .
define the function is _ safe _ url with 2 arguments url and host set to None .
if url is false ,
return boolean False .
replace every occurrence of &apos; \ \ &apos; in url with &apos; / &apos; .
if url starts with &apos; / / / &apos; ,
return boolean False .
call the function urlparse with an argument url , substitute the result for url _ info .
if url _ info.netloc is false and url _ info.scheme is true ,
return boolean False .
if url _ info.netloc is false or url _ info.netloc equals host , and if url _ info.scheme is false or url _ info.scheme equals ,
import module warnings .
import module sys .
from django.utils import six into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
call the function warnings.warn with 3 arguments : string &quot; django.utils.importlib will be removed in Django 1.9 . &quot; ,
RemovedInDjango19Warning and stacklevel set to integer 2. define the function _ resolve _ name with 3 arguments : name , package and level .
if package doesnt have an &apos; rindex &apos; attribute ,
raise an ValueError with an argument string &quot; &apos; package &apos; not set to a string &quot; .
substitute length of package for dot .
for every x is the range of integers from level to the integer 2 , in the reversed order ,
try ,
call the method package.rindex with 3 arguments : string &apos; .&apos; , integer 0 and dot , substitute the result for dot .
if ValueError exception is caught ,
raise an ValueError with an argument string &quot; attempted relative import beyond top-level package &quot; .
return a string &quot; % s . % s &quot; formated with first dot package elements and name .
if six.PY3 is true ,
from importlib import import _ module .
if not ,
define the function import _ module with 3 arguments : name and package set to None .
if name starts with an string &apos; .&apos; ,
if package is false ,
raise an TypeError with an argument string &quot; relative imports require the &apos; package &apos; argument &quot; .
level is an integer 0 .
for every character in name ,
if character is not equal to a string &apos; .&apos; ,
break from the loop execution .
increment level by one .
call the function _ resolve _ name with 3 arguments : name list elements from the level index to the end , package and level ,
substitute the result for name. call the function _ _ import _ _ with an argument name .
return sys.modules dictionary value under the name key .
from django.core.exceptions import ValidationError into default name space .
from django.utils.translation import ugettext _ lazy as _ into default name space .
from django.utils.six.moves import xrange into default name space .
define the function clean _ ipv6 _ address with 3 arguments : ip _ str , unpack _ ipv4 set to boolean False and error _ message ,
best _ doublecolon _ start is an integer -1 .
best _ doublecolon _ len is an integer 0 .
doublecolon _ start is an integer -1 .
doublecolon _ len is an integer 0 .
call he function is _ valid _ ipv6 _ address with an argument ip _ str , if it evaluates to false ,
raise an ValidationError exception with 2 arguments : error _ message and code as a string &apos; invalid &apos; .
call the function _ explode _ shorthand _ ip _ string with an argument ip _ str , substitute the result for ip _ str .
call the function _ explode _ shorthand _ ip _ string with an argument ip _ str , substitute the result for ip _ str .
if unpack _ ipv4 is true ,
call the function _ unpack _ ipv4 with an argument ip _ str , substitute the result for ipv4 _ unpacked .
if ipv4 _ unpacked is true ,
return ipv4 _ unpacked .
split ip _ str by &apos; : &apos; , substitute the result for hextets .
for every index in range of integers from 0 to length of hextets , not included ,
get the value under the index key of the hextets dictionary , remove the leading &apos; 0&apos; characters ,
substitute the result for value under the index key of the hextets dictionary. get the value under the index key of the hextets dictionary , if it is false ,
value under the index key of the hextets dictionary is a string &apos; 0&apos; .
if value under the index key of the hextets dictionary equals to string &apos; 0&apos; ,
increment doublecolon _ len by integer 1 ,
if doublecolon _ start equals integer -1 ,
substitute index for doublecolon _ start .
if doublecolon _ len is greater than best _ doublecolon _ len ,
substitute doublecolon _ len for best _ doublecolon _ len .
substitute doublecolon _ start for best _ doublecolon _ start .
if not ,
doublecolon _ len is integer 0 .
doublecolon _ start is integer -1 .
if best _ doublecolon _ len is greater than integer 1 ,
sum best _ doublecolon _ start and best _ doublecolon _ len , substitute the result for best _ doublecolon _ end ,
if best _ doublecolon _ end equals length of hextets ,
append an empty string to list hextets .
replace hextets list from the best _ doublecolon _ start index to best _ doublecolon _ end index with an empty string .
if best _ doublecolon _ start equals integer 0 ,
prepend an empty string to hextets list .
join elements of hextets into a string , separated with &apos; : &apos; , substitute it for result .
convert result to lowercase and return it .
define the function _ sanitize _ ipv4 _ mapping with an argument ip _ str .
convert ip _ str to lowercase , if it doesnt start with a string &apos; 0000 : 0000 : 0000 : 0000 : 0000 : ffff : &apos; ,
return ip _ str .
split ip _ str into parts by &apos; : &apos; , substitute the result for hextets .
if &apos; .&apos; is contained in last elements of hextets ,
return ip _ str .
ipv4 _ address is a string &quot; % d . % d . % d . % d &quot; formated with first 2 elements of seventh element of hextets converted into hexadecimal number ,
second 2 elements of seventh element of hextets converted into hexadecimal number , first 2 elements of eight element of hextets converted into hexadecimal number , second 2 elements of eight element of hextets converted into hexadecimal number. join first 5 elements of hextets into a string , separated by &apos; : &apos; , substitute the result for result .
append &apos; : &apos; and ipv4 _ address to result .
return result .
define the function _ unpack _ ipv4 with an argument ip _ str .
convert ip _ str to lowercase , if it doesnt start with a string &apos; 0000 : 0000 : 0000 : 0000 : 0000 : ffff : &apos; ,
return None .
split ip _ str into 2 parts from right , return second element of the result .
define the function is _ valid _ ipv6 _ address with an argument ip _ str .
from django.core.validators import validate _ ipv4 _ address .
if &apos; : &apos; is not contained in ip _ str .
return boolean False .
if count of occurrence of &apos; : : &apos; in ip _ str is greater than integer 1 ,
return boolean False .
if string &apos; : : : &apos; is contained in ip _ str ,
return boolean False .
if ip _ str starts with &apos; : , but it doesnt starts with &apos; : : &apos; , or if ip _ str ends with &apos; : , but it doesnt ends with &apos; : : &apos; ,
return boolean False .
if count of occurrence of &apos; : &apos; in ip _ str is greater than integer 7 ,
return boolean False .
if &apos; : : &apos; is not contained in ip _ str and number of occurrences of &apos; : &apos; in ip _ str is not equal to integer 7 ,
if count of occurrence of &apos; .&apos; in ip _ str is not equal to integer 3 ,
return boolean False .
call the function _ explode _ shorthand _ ip _ string with an argument ip _ str , substitute the result for ip _ str .
split ip _ str into parts by &apos; : &apos; , for every hextet in the result ,
if count of occurrence of &apos; .&apos; in ip _ str is equal to integer 3 ,
split ip _ str by &apos; : &apos; , if last element of the result is not equal to hextet .
return boolean False .
try ,
call the function validate _ ipv4 _ address with an argument hextet .
if ValidationError exception is caught ,
return boolean False .
if not ,
try ,
if hextet converted to hexadecimal number is smaller than hexadecimal 0 , or hextet converted to hexadecimal number is smaller than hexadecimal FFFF ,
return boolean False .
if ValueError exception is caught .
return boolean False .
return boolean True .
define the function _ explode _ shorthand _ ip _ string with an argument ip _ str .
call the function _ is _ shorthand _ ip with an argument ip _ str , if it evaluates to false ,
return ip _ str .
new _ ip is an empty list ,
split ip _ str by &apos; : : &apos; , substitute it for hextet .
split ip _ str into parts by &apos; : &apos; , if &apos; .&apos; is contained in the last element of the result ,
fill _ to is an integer 7 .
if not ,
fill _ to is an integer 8 .
if length of hextet is greater than integer 1 ,
split first and second element of hextet into parts by &apos; : &apos; , sum their lengths , substitute the result for sep .
split first element of hextet into parts by &apos; : &apos; , append them to new _ ip .
for every _ _ in range of integers from 0 up to sep subtracted from fill _ to ,
append string &apos; 0000 &apos; to new _ ip .
split second element of hextet into parts by &apos; : &apos; , append them to new _ ip .
if not ,
split ip _ str into parts by &apos; : &apos; , substitute the result for new _ ip .
ret _ ip is an empty list .
for every hextet in new _ ip ,
subtract length of hextet from 4 , create a string with previous result number of character &apos; 0&apos; , append hextet to it ,
convert the result into a lowercase , append it to ret _ ip. join elements of ret _ ip into a string separated with &apos; : &apos; , return it .
define the function _ is _ shorthand _ ip with an argument ip _ str .
if count of occurrence of &apos; : : &apos; in ip _ str equals integer 1 ,
return boolean True .
split ip _ str into parts by &apos; : &apos; , for every x in the result , calculate length of x , if any is smaller than integer 4 ,
return boolean True .
return boolean False .
define the function is _ iterable with an argument x .
try ,
create an iterator out of x .
if TypeError exception is caught ,
return boolean False .
if not ,
return boolean True .
import module re .
derive the class Tok from the object base class .
num is an integer 0 .
define the method _ _ init _ _ with 4 arguments : self , name , regex and next set to None .
substitute Tok.num for self.id.
increment Tok.num with an integer 1 .
substitute name for self.name.
substitute regex for self.regex.
substitute next for self.next.
define the function literals with 3 arguments : choices , prefix set to an empty string and suffix set to an empty string .
for every c in choices split into words , concatenate prefix , result of the function re.escape with an argument c and suffix ,
and join the results into a string , separated with &apos; &#124; &apos; character , return the result. derive the class Lexer from the object base class .
define the method _ _ init _ _ with 3 arguments self , states and first .
self.regexes is an empty dictionary .
self.tokens is an empty dictionary .
call the method states.items , for every state and rules in the result ,
parts is an empty list .
for every tok in rules ,
groupid is a string &quot; t % d &quot; formated with tok.id.
substitute tok for value under the groupid key of the self.toks dictionary .
format a string &quot; ( ? P &lt; % s &gt; % s ) &quot; with groupid and tok.regex , append it to the parts .
call the function re.compile with 2 arguments : elements of parts joined into a string , separated with &apos; &#124; &apos; ,
and result of bitwise OR performed on 2 operands : re.MULTILINE and re.VERBOSE , substitute the result for value under the state key of the self.regexes dictionary. substitute first for self.state.
define the method lex with 2 arguments self and text .
substitute length of text for end .
substitute self.state for state .
substitute self.regexes for regexes .
substitute self.toks for toks .
start is an integer 0 .
while start is lesser than end .
get the value under the state key of the regexes dictionary , call the method finditer on the result with 2 arguments : text and start ,
for every match in the result , substitute match.lastgroup for name .
substitute value under the name key of the toks dictionary for tok .
call the method match.group with an arugument name , substitute the result for toktext .
increment start by length of toktext .
yield a tuple with 2 elements : tok.name and toktext .
if tok.next is true ,
substitute tok.next for state .
break from the loop execution .
substitute state for self.state.
derive the class JsLexer from the Lexer base class .
both _ before is a list containing 14 elements , all of them are instances of Tok class , created with 2 arguments , a string and a raw string .
both _ after is an list with an element instance of Tok class , created with 2 arguments : string &apos; other &apos; and raw string &apos; .&apos; .
states is a dictionary with 2 arguments : appended list with an element instance of a class Tok , created with 3 arguments : &quot; punct &quot; ,
result of the function literals called with an argument string &quot; / = / &quot; and next as a string &apos; reg &apos; , to the both _ before , appended both _ after to the previous result , for &apos; div &apos; and appended list with an element instance of a class Tok , created with 3 arguments : string &quot; regex &quot; , raw string &apos; / ( &#91; ^ * \ \ / &#91; &#93; &#124; \ \ . &#124; \ &#91; ( &#91; ^ \ &#93; \ \ &#93; &#124; \ \ . ) * \ &#93; ) ( &#91; ^ \ \ / &#91; &#93; &#124; \ \ . &#124; \ &#91; ( &#91; ^ \ &#93; \ \ &#93; &#124; \ \ . ) * \ &#93; ) * / &#91; a-zA-Z0-9 &#93; * &apos; , and next as a string &apos; div &apos; , to the both _ before , appended both _ after to the previous result for &apos; div &apos; . define the method _ _ init _ _ with an argument self .
call the method _ _ init _ _ with 2 arguments : self.states and string &apos; reg &apos; from the base class of the class JsLexer .
define the function prepare _ js _ for _ gettext with an argument js .
define the function escape _ quotes with an argument m .
call the method m.group with an argument integer 0 , substitute the result for s .
if s equals a string &apos; &quot; &apos; ,
return an raw string &apos; \ &quot; &apos; .
if not ,
return s .
lexer is an instance of JsLexer class .
c is an empty list .
call the method lexer.lex with an arguments js , for every name and tok in the result ,
if name equals a string &apos; regex &apos; ,
tok is a string &apos; &quot; REGEX &quot; &apos; ,
otherwise if name starts with a string &apos; string &apos; ,
if tok starts with &quot; &apos; &quot; ,
call the function re.sub with 3 arguments : raw string &quot; \ \ . &#124; . &quot; , escape _ quotes and tok without the first and last element ,
substitute the result for guts. concatenate string &apos; &quot; &apos; , guts and string &apos; &quot; &apos; , substitute the result for tok .
otherwise if name equals a string &apos; id &apos; .
replace every occurrence of &apos; \ \ &apos; in tok with &apos; U &apos; , substitute the result for tok .
append tok to c .
join elements of c into a string , return it .
import module logging .
import module sys .
import module warnings .
from django.conf import settings into default name space .
from django.core import mail into default name space .
from django.core.mail import get _ connection into default name space .
from django.utils.deprecation import RemovedInNextVersionWarning into default name space .
from django.utils.module _ loading import import _ string into default name space .
from django.views.debug import ExceptionReporter and get _ exception _ reporter _ filter into default name space .
from logging import NullHandler .
from logging.config import dictConfig .
substitute logging.getLogger for getLogger .
DEFAULT _ LOGGING is a dictionary with 5 initial entries : 1 for &apos; version &apos; , False for &apos; disable _ existing _ loggers &apos; ,
and 3 additional pairs of dictionaries for string. define the function configure _ logging with 2 arguments : logging _ config and logging _ settings .
if sys.warnoptions is false ,
call the method logging.captureWarnings with an argument boolean True .
call the function warnings.simplefilter with 2 arguments : string &quot; default &quot; and RemovedInNextVersionWarning .
if logging _ config is true ,
call the function import _ string with an argument logging _ config , substitute the result for logging _ config _ func .
call the function logging _ config _ func with an argument DEFAULT _ LOGGING .
if logging _ settings is true ,
call the function logging _ config _ func with an argument logging _ settings .
derive the class AdminEmailHandler from logging.Handler base class .
define the method _ _ init _ _ with 3 arguments : self , include _ html set to boolean False and email _ backend set to None .
call the method logging.Handler. _ _ init _ _ with an argument self .
substitute include _ html for self.include _ html .
substitute email _ backend for self.email _ backend .
define the method emit with 2 arguments : self and record .
try ,
substitute record.request for request .
subject is an string &apos; % s ( % s IP ) : % s &apos; , formated with record.levelname , string &apos; internal &apos; if value under the &apos; REMOTE _ ADDR &apos; key ,
of the request.META dictionary is contained in settings.INTERNAL _ IPS , otherwise use string &apos; EXTERNAL &apos; , and result of the method record.getMessage. call the function get _ exception _ reporter _ filter with an argument request , substitute the result for filter .
call the method filter.get _ request _ repr with an argument request , format string &apos; \ n { 0 } &apos; with the result , substitute the result for request _ repr .
if Exception exception is caught ,
subject is an string &apos; % s : % s &apos; formated with record.levelname and result of the method record.getMessage , respectively .
request is None .
request _ repr is a string &quot; unavailable &quot; .
call the function self.format _ subject with an argument subject , substitute the result for subject .
if record.exc _ info is true ,
substitute record.exc _ info for exc _ info .
if not ,
exc _ info is an tuple with 3 elements : None , result of method record.getMessage and None .
message is an string &quot; % s \ n \ nRequest repr ( ) : % s &quot; formated with the result of the metod self.format with an argument record ,
and request _ repr , respectively. reporter is an instance of ExceptionReporter class , created with 3 arguments : request , is _ email as boolean True ,
unpacked list exc _ info. if self.include _ html is true , call the method reporter.get _ traceback _ html and substitute the result for html _ message ,
otherwise html _ message is None. call the method mail.mail _ admins with 5 arguments : subject , message , fail _ silently as boolean True , tml _ message as html _ message ,
and connection as the result of the method self.connection. define the connection with an argument self .
call the function get _ connection with 2 arguments : backend set to self.email _ backend and fail _ silently set to boolean True .
define the method format _ subject with 2 arguments : self and subject .
replace every occurrence of &apos; \ n &apos; in subject with &apos; \ \ n &apos; and replace every occurrence of &apos; \ r &apos; in subject with &apos; \ \ r &apos; ,
substitute the result for formatted _ subject. return first 989 elements of formatted _ subject .
derive the class CallbackFilter from logging.Filter base class .
define the method _ _ init _ _ with 2 arguments : self and callback .
substitute callback for self.callback.
define the method filter with 2 arguments : self and record .
call the method self.callback with an argument record , if the result evaluates to true ,
return integer 1 .
return integer 0 .
derive the class RequireDebugFalse from logging.Filter base class .
define the method filter with 2 arguments : self and record .
if settings.DEBUG is true , return boolean False , otherwise return boolean True .
derive the class RequireDebugTrue from logging.Filter base class .
define the method filter with 2 arguments : self and record .
return settings.DEBUG.
try ,
from functools import lru _ cache .
if ImportError exception is caught .
from collections import namedtuple .
from functools import update _ wrapper .
from threading import RLock .
_ CacheInfo is an instance of namedtuple class created with 2 arguments : string &quot; CacheInfo &quot; and a list with 4 elements : string &apos; hits &apos; ,
&quot; misses &quot; , &quot; maxsize &quot; and &quot; currsize &quot; . derive class _ HashedSeq from list base class .
_ _ slots _ _ is a string &apos; hashvalue &apos; .
define the method _ _ init _ _ with 3 arguments : self , tup and hash set to hash .
substitute tup for elements of self .
get the hash value of the tup , substitute it for self.hashvalue.
define the method _ _ hash _ _ with an argument self .
return self.hashvalue.
define the function _ make _ key with 9 arguments : args , kwds , typed , kwd _ mark as a tuple with an element result of the function object ,
substitute args for key .
if kwds is true ,
sort elements of kwds , substitute the result for sorted _ items .
increment key by kwd _ mark .
for every item in sorted _ items ,
increment key by item .
if typed is true ,
create a tuple out of types of v , for every v in args , extend key tuple with the result .
if kwds is true ,
create a tuple out of types of v , for every k and v in sorted _ items , extend key tuple with the result .
otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes ,
return first element of key .
return instance of _ HashedSeq class , created with an argument key .
define the function lru _ cache with 2 arguments maxsize set to integer 100 and typed set to boolean False .
define the function decorating _ function with an argument user _ function .
cache is an empty dictionary .
stats is an list with 2 elements : 2 integers 0 .
HITS and MISSES are integer 0 and 1 , respectively .
substitute _ make _ key for make _ key .
substitute cache.get for cache _ get .
substitute len for _ len .
lock is an instance of RLock class .
root is an empty list .
root is a list with elements : root , root , None and None .
nonlocal _ root is an list with an element root .
substitute integers 0 , 1 , 2 and 3 for PREV , NEXT , KEY and RESULT , respectivley .
if maxsize equals integer 0 ,
define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
call the function user _ function with 2 arguments : unpacked list args and unpacked dictionary kwds , substitute the result for result .
increment stats dictionary value under the MISSES key by integer 1 .
return result .
otherwise if maxsize is None ,
define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
call the function make _ key with 3 arguments : args , kwds and typed , substitute the result for key .
call the function cache _ get with 2 arguments : key and root , substitute the result for result .
if result is not root ,
increment stats dictionary value under the HITS key by integer 1 .
return result .
call the function user _ function with 2 arguments unpacked list args and unpacked dictionary kwds , substitute the result for result .
substitute result for cache dictionary value under the key key .
increment stats dictionary value under the MISSES key by integer 1 .
return result .
if not ,
define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
if kwds is true or typed is true , call the function make _ key with 3 arguments : args , kwds and typed , substitute the result for key ,
otherwise substitute args for key. with lock ,
call the function cache _ get with an argument key , substitute the result for link .
if link is not None ,
substitute nonlocal _ root for a tuple with an element root .
substitute link for link _ prev , link _ next , key and result , respectively .
substitute link _ next for value under the NEXT key of the link _ prev dictionary .
substitute link _ prev for value under the PREV key of the link _ next dictionary .
substitute value under the PREV key of the root dictionary for last .
substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary .
substitute last for value under the PREV key of the link dictionary .
substitute root for value under the NEXT key of the link dictionary .
increment stats dictionary value under the HITS key by integer 1 .
return result .
call the function user _ function with 2 arguments : unpacked list args and unpacked dictionary kwds , substitute the result for result .
with lock ,
substitute nonlocal _ root for tuple root .
if key is contained in cache ,
do nothing .
otherwise if result of the call to the function _ len with an argument cache is greater than or equal to maxsize ,
substitute root for oldroot .
substitute key for value under the KEY key of the oldroot dictionary .
substitute result for value under the RESULT key of the oldroot dictionary .
substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal _ root .
substitute value under the KEY key of the root dictionary for oldkey .
substitute value under the RESULT key of the root dictionary for oldvalue .
root dictionary values under the KEY and RESULT keys are both None .
delete entry under the oldkey key of the cache dictionary .
substitute oldroot for value under the key key of the cache dictionary .
if not ,
substitute value under the PREV key of the root dictionary for last .
link is a list with 4 elements : last , root , key and result .
substitute link for value under the NEXT key of the last dictionary , for value under the PREV key of the root dictionary ,
for value under the key key of the cache dictionary. increment stats dictionary value under the MISSES key by integer 1 .
return result .
define the function cache _ info .
with lock ,
return an instance of _ CacheInfo class , created with 4 arguments : value under the HITS key of the stats dictionary ,
value under the MISSES key of the stats dictionary , maxsize and length of cache. define the function cache _ clear .
with lock ,
call the method cache.clear.
substitute first element of nonlocal _ root for root .
root is an list with 4 elements : root , root , None and None .
stats is a list with 2 elements : 2 integers 0 .
substitute user _ function for wrapper . _ _ wrapped _ _ .
substitute cache _ info for wrapper.cache _ info .
substitute cache _ clear for wrapper.cache _ clear .
call the function update _ wrapper with 2 arguments : wrapper and user _ function , return the result .
return decorating _ function .
from _ _ future _ _ import absolute _ import into default name space .
import module copy .
from importlib import import _ module into default name space .
import module os .
import module sys .
import module warnings .
from django.core.exceptions import ImproperlyConfigured into default name space .
from django.utils import six into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
define the function import _ string with an argument dotted _ path .
try ,
split dotted _ path into two parts from the right at the &apos; .&apos; character , assign the result to module _ path and class _ name , respectively .
if ValueError exception is caught ,
msg is a string &quot; % s doesn &apos;t look like a module path &quot; formated with dotted _ path .
call the function six.reraise with 3 arguments : ImportError , instance of ImportError class created with an argument msg ,
and third element of result of the function sys.exc _ info. call the function import _ module with an argument module _ path , substitute the result for module .
try ,
get attribute class _ name form the module object , return it .
if AttributeError exception is caught ,
msg is a string &apos; Module &quot; % s &quot; does not define a &quot; % s &quot; attribute / class &apos; formated with dotted _ path and class _ name , respectively .
call the function six.reraise with 3 arguments : ImportError , instance of ImportError class created with an argument msg ,
and third element of result of the function sys.exc _ info. define the function import _ by _ path with 2 arguments dotted _ path and error _ prefix set to an empty string ..
call the function warnings.warn with 3 arguments : string &apos; import _ by _ path ( ) has been deprecated . Use import _ string ( ) instead . &apos; ,
RemovedInDjango19Warning and stacklevel as integer 2. try ,
call the function import _ string with an argument dotted _ path , substitute the result for attr .
if ImportError , renamed to e , exception is caught ,
msg is a string &apos; % sError importing module % s : &quot; % s &quot; &apos; , where &apos; % s &apos; is replaced with error _ prefix , dotted _ path and e , respectively .
call the function six.reraise with 3 arguments : ImproperlyConfigured , instance of ImproperlyConfigured class created with msg ,
and third element of the function sys.exc _ info result. return attr .
define the function autodiscover _ modules with 2 arguments unpacked list args and unpacked dictionary kwargs .
from django.apps import apps .
get value under the &apos; register _ to &apos; key of the kwargs dictionary , substitute it for register _ to .
call the method apps.get _ app _ configs , for every app _ config in the result ,
try ,
if register _ to is true ,
call the method copy.copy with an argument register _ to . _ registry , substitute the result for before _ import _ registry .
for every module _ to _ search in args ,
call the function import _ module with an argument string &apos; % s . % s &apos; , where &apos; % s &apos; is replaced with app _ config.name and module _ to _ search .
is exception is caught ,
if register _ to is true ,
substitute before _ import _ registry for register _ to . _ registry .
if call to the function module _ has _ submodule with 2 arguments : app _ config.module and module _ to _ search evaluates to true ,
raise an exception ,
if first and second element of sys.version _ info are both equal to integer 3 ,
if first and second element of sys.version _ info are equal to integers 3 and 4 , respectively ,
from importlib.util import find _ spec as importlib _ find .
if not ,
from importlib import find _ loader as importlib _ find .
define the function module _ has _ submodule with 2 arguments : package and module _ name .
try ,
substitute package . _ _ name _ _ for package _ name .
substitute package . _ _ path _ _ for package _ path .
if AttributeError exception is caught ,
return boolean False .
concatenate package _ name , string &apos; .&apos; and module _ name , substitute it for full _ module _ name .
call the function importlib _ find with 2 arguments : full _ module _ name and package _ path , if the result is not None , return boolean True ,
otherwise return boolean False. if not ,
import imp .
define the function module _ has _ submodule with 2 arguments : package and module _ name .
join package . _ _ name _ _ and module _ name into a string separated with &apos; .&apos; , substitute it for name .
try ,
if value under the name key of the sys.modules dictionary is not None , return boolean True , otherwise return boolean False .
if KeyError exception is caught ,
do nothing .
try ,
substitute package . _ _ path _ _ for package _ path .
if AttributeError exception is caught ,
return boolean False .
for every finder in sys.meta _ path ,
if call to the method finder.find _ module with 2 arguments : name and package _ path evaluates to true ,
return boolean True .
for every entry in package _ path ,
try ,
substitute the value under the entry key of the sys.path _ importer _ cache dictionary for finder .
if finder is None ,
try ,
call the method imp.find _ module with 2 arguments : module _ name and list containing element entry , assign the result to file _ , _ ,
and _ , respectively. if file _ is true ,
close file _ file descriptor .
return boolean True .
if ImportError exception is caught ,
skip this loop iteration ,
otherwise if call to the method finder.find _ module with an argument name evaluates to true ,
return boolean True .
if not ,
skip this loop iteration ,
if KeyError exception is caught ,
for every hook in sys.path _ hooks ,
try ,
call the function hook with an argument entry , substitute the result for finder .
if call to the method finder.find _ module with an argument name evaluates to true ,
return boolean True .
if not ,
break from the loop execution ,
if ImportError exception is caught ,
skip this loop iteration ,
if not ,
if entry is a directory ,
try ,
call the method imp.find _ module with 2 arguments : module _ name and list containing element entry , assign the result to file _ , _ ,
and _ , respectively. if file _ is true ,
close file _ file descriptor .
return boolean True .
if ImportError exception is caught ,
do nothing .
if not ,
return boolean False .
from django.conf import settings into default name space .
from django.utils.safestring import mark _ safe into default name space .
from django.utils import six into default name space .
define the function format with 6 arguments : number , decimal _ sep , decimal _ pos set to None , grouping set to integer 0 ,
if settings.USE _ L10N is true , substitute settings.USE _ THOUSAND _ SEPARATOR for use _ grouping ,
otherwise substitute settings.USE _ L10N for use _ grouping. if use _ grouping is true substitute it for use _ grouping , otherwise substitute force _ grouping for use _ grouping .
if use _ grouping is true and grouping is greater than integer 0 , use _ grouping is boolean True , otherwise it is boolean False .
if number is an integer and use _ grouping is false and decimal _ pos is false ,
call the function six.text _ type with an argument number , use the result as an argument for the call to the function mark _ safe ,
return the result. sign is an empty string .
call the function six.text _ type with an argument number , substitute the result for str _ number .
if first element of str _ number equals a string &apos; -&apos; .
sign is a string &apos; -&apos; .
remove the first element from str _ number .
if &apos; .&apos; is not contained in str _ number ,
split str _ number by &apos; .&apos; , substitute the result for int _ part and dec _ part , respectively .
if decimal _ pos is not None ,
substitute first decimal _ pos elements of dec _ part for dec _ part .
if not ,
substitute str _ number and an empty string for int _ part and dec _ part .
if decimal _ pos is not None
subtract length of dec _ part from decimal _ pos , multiply the number of character &apos; 0&apos; by the result ,
append the resulting string to dec _ part , substitute it for dec _ part. if dec _ part is true ,
add decimal _ sep and dec _ part , substitute the result for dec _ part .
if use _ grouping is true ,
int _ part _ gd is an empty string .
for every cnt and digit in enumerated list int _ part with reversed ordering of elements ,
if cnt is true and remained of dividing cnt with grouping is zero ,
increment int _ part _ gd by thousand _ sep .
append digit to int _ part _ gd .
invert the ordering of elements of int _ part _ gd , substitute it for int _ part .
sum sign , int _ part and dec _ part , return the result .
from _ _ future _ _ import unicode _ literals into default name space .
from django.utils import six into default name space .
from django.utils.six.moves import zip into default name space .
ESCAPE _ MAPPINGS is an dictionary with 10 initial entries : None for &apos; A &apos; , None for &apos; b &apos; , None for &apos; B &apos; , &apos; 0&apos; for &apos; d &apos; , &apos; x &apos; for &apos; D &apos; ,
&apos; &apos; for &apos; s &apos; , &apos; x &apos; for &apos; S &apos; , &apos; x &apos; for &apos; W &apos; , &apos; ! &apos; for &apos; W &apos; and None for &apos; Z &apos; . derive the class Choice from list base class .
derive the class Group from list base class .
derive the class NonCapture from list base class .
define the function normalize with an argument pattern .
result is an empty list .
non _ capturing _ groups is an empty list .
consume _ next is boolean True .
call the function next _ char with an argument iterator pattern , substitute the result for pattern _ iter .
num _ args is an integer 0 .
try ,
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
if StopIteration exception ,
return a list with an element tuple with 2 elements : an empty string and an empty list .
try ,
endless loop ,
if escaped is true ,
append ch to result .
otherwise if ch equals a string &apos; .&apos; ,
append string &apos; .&apos; to result .
otherwise if ch equals a string &apos; &#124; &apos; ,
raise an NotImplementedError exception with an argument string &apos; Awaiting Implementation &apos; .
otherwise if ch equals a string &apos; ^ &apos; ,
do nothing .
otherwise if ch equals a string &apos; $ &apos; ,
skip this loop iteration .
otherwise if ch equals a string &apos; ) &apos; ,
remove first element from non _ capturing _ groups , substitute it for start .
inner is an instance of NonCapture , created with elements of result from start index to the end .
append list with element inner to list containing first start elements of result , substitute it for result .
otherwise if ch equals a string &apos; &#91; &apos; ,
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
append ch to result .
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
while escaped is true or ch is not equal to a string &apos; &#93; &apos; ,
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
otherwise if ch equals a string &apos; ( &apos; ,
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
if ch is not equal to a sring &apos; ? &apos; or escaped is true ,
name is a string &quot; _ % d &quot; formated with num _ args .
increment num _ args by one .
instantiate a class Group with 2 arguments : string &quot; % % ( % s ) s &quot; formated with name , and name , append it to result .
call the function walk _ to _ end with 2 arguments : ch and pattern _ iter .
if not ,
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
if ch is contained in string &quot; iLmsu # &quot; ,
call the function walk _ to _ end with 2 arguments : ch and pattern _ iter .
otherwise if ch equals a string &apos; : &apos; ,
append length of result to non _ capturing _ groups .
otherwise if ch equals a string &apos; P &apos; ,
raise an ValueError with an argument string &quot; Non-reversible reg-exp portion : &apos; ( ? % s &apos; &quot; formated with ch .
if not ,
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
if ch is not equal to string &apos; &lt; &apos; or string &apos; = &apos; ,
raise an ValueError with an argument string &quot; Non-reversible reg-exp portion : &apos; ( ? P % s &apos; &quot; formated with ch .
if ch equals a string &apos; &lt; &apos; ,
terminal _ char is an string &apos; &gt; &apos; .
if not ,
terminal _ char is an string &apos; ) &apos; .
name is an empty list .
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
while ch is not equal to terminal _ char ,
append ch to result .
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
join elements of name into a string , substitute it for param .
if terminal _ char is not equal to string &apos; ) &apos; ,
instantiate a class Group with 2 arguments : string &quot; % % ( % s ) s &quot; formated with param , and param , append it to result .
call the function walk _ to _ end with 2 arguments : ch and pattern _ iter .
if not ,
instantiate a class Group with 2 arguments : string &quot; % % ( % s ) s &quot; formated with param , and None , append it to result .
otherwise if ch is contained in string &quot; * ? + { &quot; ,
call the function get _ quantifier with 2 arguments : ch and pattern _ iter , substitute the result for count and ch , respectively .
if ch is true ,
consume _ next is boolean False .
if count is equal to integer 0 .
if call to the function contains with 2 arguments : last element of result and Group , evaluates to true ,
last element of result is an instance of Choice class , created with an argument list with 2 elements : None and last element of result .
if not ,
remove the first element from result .
otherwise if count is greater than integer 1 ,
create a list with count decremented by 1 number of last element of result elements , extend list result with it .
if not ,
append ch to result .
if consume _ next is true ,
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
if not ,
consume _ next is boolean True .
if StopIteration exception ,
do nothing .
if NotImplementedError exception ,
return a list with an element tuple with 2 elements : an empty string and an empty list .
call the function flatten _ result with an argument result , unpack the resulting list and zip it in the list of tuples , return the result .
define the function next _ char with an argument input _ iter .
for every ch in input _ iter ,
if ch is not equal to string &apos; \ \ &apos; .
yield ch and boolean False .
skip this loop iteration .
get the next element of the iterable pattern _ iter , assign the result for ch .
get the value under ch key of the ESCAPE _ MAPPINGS dictionary , if it exists substitute it for representative , if not substitute ch for representative .
if representative is None ,
skip this loop iteration .
yield representative and boolean True .
define the function walk _ to _ end with 2 arguments ch and input _ iter .
if ch equal a string &apos; ( &apos; ,
nesting is integer 1 .
if not ,
nesting is integer 0 .
for every ch and escaped in input _ iter ,
if escaped is true ,
skip this loop iteration .
otherwise if ch equals a string &apos; ( &apos; ,
increment nesting by one .
otherwise if ch equals a string &apos; ) &apos; ,
if nesting is false ,
return nothing .
decrement nesting by one .
define the function get _ quantifier with 2 arguments ch and input _ iter .
if ch is contained in string &apos; * ? + &apos; ,
try ,
get the next element of the iterable pattern _ iter , assign the result for ch2 and escaped , respectively .
if StopIteration exception ,
ch2 is None .
if ch2 equals string &apos; ? &apos; ,
ch2 is None .
if ch equals string &apos; + &apos; ,
return integer 1 and ch2 .
return integer 0 and ch2 .
quant is an empty list .
while ch is not equal to a string &apos; } &apos; ,
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
append ch to quant .
remove last element for quant .
join elements of quant into a string , split it by string &apos; , &apos; , substitute the result for values .
try ,
get the next element of the iterable pattern _ iter , assign the result for ch and escaped , respectively .
if StopIteration exception ,
ch is None .
if ch equals a string &apos; ? &apos; ,
ch is None .
convert first element of values into a integer , return the result and ch .
define the function contains with 2 arguments source and inst .
if source is an instance of inst class ,
return boolean True .
if source is an instance of NonCapture class ,
for every elt in source ,
call the function contains with 2 arguments : elt and inst , if it evaluates to true ,
return boolean True .
return boolean False .
define the function flatten _ result with an argument source .
if source is None ,
return a list containing an empty string and a list containing an empty list .
if source is an instance of Group class ,
if second element of source is None ,
params is an empty list ,
if not ,
params is a list with second element of source as a element .
return a list containing first element of source and a list containing params .
result is a list containing an empty string .
result _ args is a list containing an empty list .
pos and last are integer 0 .
for every pos and elt in enumerated iterable source ,
if elt is an instance of six.string _ types class ,
skip this loop iteration .
join source list elements from last till pos indexes into a string , substitute the result for piece .
if elt is an instance of Group class ,
increment piece by firs element of elt .
substitute second element of elt for param .
if not ,
param is None .
increment pos by one , substitute the result for last .
for every i in range of integers from 0 to length of result , not included ,
increment i-th element of result by piece .
if param is true ,
append param to i-th element of result _ args .
if elt is an instance of Choice or NonCapture classes ,
if elt is an instance of NonCapture class ,
elt is an list with an element elt .
inner _ result and inner _ args are empty lists .
for every item in elt ,
call the function flatten _ result with an argument item , assign the result to res and args , respectively .
extend list inner _ result with res .
extend list inner _ args with args .
new _ result is an empty list .
new _ args is an empty list .
zip elements of result and result _ args into a list of tuples , for every item and args in the result ,
zip elements of inner _ result and inner _ args into a list of tuples , for every i _ item and i _ args in the result ,
sum item and i _ item together , append the result to new _ result .
append i _ args to args , append new _ args with the result .
substitute new _ result for result .
substitute new _ args for result _ args .
if pos is greater than or equal to last ,
join elements of list source from index last to the end into a string , substitute it for piece .
for every i in range of integers from 0 to length of result , not included ,
increment i-th element of result by piece .
return result and result _ args .
from django.utils.functional import curry and Promise into default name space .
from django.utils import six into default name space .
derive the class EscapeData from object base class .
do nothing .
derive the class EscapeBytes from bytes and EscapeData base classes .
do nothing .
derive the class EscapeText from six.text _ type and EscapeData base classes .
do nothing .
if six.PY3 is true ,
substitute EscapeText for EscapeString .
if not ,
substitute EscapeBytes for EscapeString .
substitute EscapeText for EscapeUnicode .
derive the class SafeData from object base class .
define the method _ _ html _ _ with an argument self .
return self .
derive the class SafeBytes from bytes and SafeData base classes .
define the method _ _ add _ _ with 2 arguments self and rhs .
call the _ _ add _ _ method with an arguments rhs from the base class of the class SafeBytes , substitute the result for t .
if rhs is an instance of SafeText ,
return an instance of SafeText , created with an argument t .
otherwise if rhs is an instance of SafeBytes ,
return an instance of SafeBytes , created with an argument t .
return t .
define the method _ proxy _ method with 3 arguments self , unpacked list args and unpacked dictionary kwargs .
remove kwargs dictionary element under the &apos; method &apos; key , substitute it for method .
call the function method with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , substitute the result for data .
if data is an instance of bytes ,
return an instance of SafeBytes , created with an argument data .
if not ,
return an instance of SafeText , created with an argument data .
call the function curry with 2 arguments : _ proxy _ method and method set to bytes.decode , substitute the result for decode .
derive the class SafeText from six.text _ type and SafeData base classes .
define the method _ _ add _ _ with 2 arguments self and rhs .
call the _ _ add _ _ method with an arguments rhs from the base class of the class SafeText , substitute the result for t .
if rhs is an instance of SafeData .
return an instance of SafeText , created with an argument t .
return t .
define the method _ proxy _ method with 3 arguments self , unpacked list args and unpacked dictionary kwargs .
remove kwargs dictionary element under the &apos; method &apos; key , substitute it for method .
call the function method with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , substitute the result for data .
if data is an instance of bytes .
return an instance of SafeBytes , created with an argument data .
if not ,
return an instance of SafeText , created with an argument data .
call the function curry with 2 arguments : _ proxy _ method and method set to six.text _ type.encode , substitute the result for encode .
if six.PY3 is true ,
substitute SafeText for SafeString .
if not ,
substitute SafeBytes for SafeString .
substitute SafeText for SafeUnicode .
define the function mark _ safe with an argument s .
if s is an instance of SafeData .
return s .
if s is an instance of bytes or Promise and s . _ delegate _ bytes is true ,
return an instance of SafeBytes , created with an argument s .
if s is an instance of six.text _ type or Promise ,
return an instance of SafeText , created with an argument s .
return an instance of SafeText , created with an argument s converted into a string .
define the function mark _ for _ escaping with an argument s .
if s is an instance of SafeData or EscapeData ,
return s .
if s is an instance of bytes or Promise and s . _ delegate _ bytes is true ,
return an instance of EscapeBytes , created with an argument s .
if s is an instance of six.text _ type or Promise ,
return an instance of EscapeText , created with an argument s .
return an instance of EscapeBytes , created with an argument , reuslt of the call to the function bytes with an argument s .
import module opera .
import module sys .
import module types .
_ _ author _ _ is a string &quot; Benjamin Peterson &lt; benjamin @ python.org &gt; &quot; .
_ _ version _ _ is a string &quot; 1.6.1 &quot; .
if first element of sys.version _ info equals integer 2 , PY2 is boolean True , otherwise it is boolean False .
if first element of sys.version _ info equals integer 3 , PY3 is boolean True , otherwise it is boolean False .
if PY3 is true ,
substitute str for string _ types .
substitute int for integer _ types .
substitute type for class _ types .
substitute str for text _ type .
substitute bytes for binary _ type .
substitute sys.maxsize for MAXSIZE .
if not ,
substitute basestring for string _ types .
integer _ types is a tuple with 2 elements int and long .
class _ types is a tuple with 2 elements : type and types.ClassType.
substitute unicode for text _ type .
substitute str for binary _ type .
if sys.platform starts with string &apos; java &apos; ,
bitwise shift integer 1 to the left by 31 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE .
if not ,
derive class X from the object base class .
define the method _ _ len _ _ with an argument self .
bitwise shift integer 1 to the left by 31 spaces , return the result .
try
instantiate class X , get its length .
if OverflowError exception is caught ,
bitwise shift integer 1 to the left by 31 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE .
if not ,
bitwise shift integer 1 to the left by 63 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE .
delete X.
define the function _ add _ doc with 2 arguments : func and doc .
substitute doc for func . _ _ doc _ _ .
define the function _ import _ module with an argument name .
call the function _ _ import _ _ with an argument name .
return value under the name key of the sys.modules dictionary .
derive class _ LazyDescr from the object base class .
define the method _ _ init _ _ with 2 arguments : self and name .
substitute name for self.name.
define the method _ _ get _ _ with 3 arguments : self , obj and tp .
try ,
call the method self . _ resolve , substitute the result for result .
if ImportError exception is caught ,
raise an AttributeError with an argument string &quot; % s could not be imported &quot; , formated with self.name.
set self.name attribute of the obj object to result .
delete self.name attribute from the obj . _ _ class _ _ object .
return result .
derive class MovedModule from the _ LazyDescr base class .
define the method _ _ init _ _ with 4 arguments : self , name , old and new set to None .
call the _ _ init _ _ method with an argument name from the base class of the MovedModule class .
if PY3 is true ,
if new is None ,
substitute name for new .
substitute new for self.mod.
if not ,
substitute old for self.mod.
define the method _ resolve with an argument self .
call the function _ import _ module with an argument self.mod , return the result .
define the method _ _ getattr _ _ with 2 arguments : self and attr set to None .
if attr equals any of the strings &quot; _ _ file _ _ &quot; , &quot; _ _ name _ _ &quot; or &quot; _ _ path _ _ &quot; and self.mod is not contained in sys.modules ,
raise an AttributeError with an argument attr .
try ,
call the method self . _ resolve , substitute the result for _ module .
if ImportError exception is caught ,
raise an AttributeError with an argument attr .
get attr attribute from the _ module object , substitute it for value .
set attr attribute of the self object to value .
return value .
derive class _ LazyModule from the types.ModuleType base class .
define the method _ _ init _ _ with 2 arguments : self and name .
call the method _ _ init _ _ with an argument name form the base class of the class _ LazyModule .
substitute self . _ _ class _ _ . _ _ doc _ _ for self . _ _ doc _ _ .
define the method _ _ dir _ _ with an argument self .
attrs is a list with 2 elements : strings &quot; _ _ doc _ _ &quot; and &quot; _ _ name _ _ &quot; .
append attr.name to attrs for every attr in self . _ moved _ attributes .
return attrs .
_ moved _ attributes is an empty list .
derive class MovedAttribute from the _ LazyDescr base class .
define the method _ _ init _ _ with 6 arguments : self , name , old _ mod , new _ mod , old _ attr set to None , new _ attr set to None .
call the method _ _ init _ _ with an argument name form the base class of the class MovedAttribute .
if PY3 is true ,
if new _ mod is None ,
substitute name for new _ mod .
substitute new _ mod for self.mod.
if new _ attr is None ,
if old _ attr is None ,
substitute name for new _ attr .
if not ,
substitute old _ attr for new _ attr .
substitute new _ attr for self.attr.
if not ,
substitute old _ mod for self.mod.
if old _ attr is None ,
substitute name for old _ attr .
substitute old _ attr for self.attr.
define the method _ resolve with an argument self .
call the function _ import _ module with an argument self.mod , substitute the result for module .
gett self.attr from the module object , return it .
derive class _ MovedItems from the _ LazyModule base class .
_ moved _ attributes is a list with 55 initial elements , 13 of them are the results of the call to the function MovedAttribute ,
with different 3 string arguments , the others are results of the call to the function MovedModule called with 3 string arguments. for every attr in _ moved _ attributes ,
set attr.name attribute of the _ MovedItemst object to attr .
if attr is an instance of MovedModule .
concatenate _ _ name _ _ , string &apos; .moves &apos; and attr.name together , use it as an key to get the value from the sys.modules dictionary ,
substitute attr for the obtained value. delete attr .
substitute _ moved _ attributes for _ MovedItems . _ moved _ attributes .
append string &apos; .moves &apos; to _ _ name _ _ , use it as an argument to instantiate _ MovedItems class , assign it to moves ,
and to value under the &apos; .moves &apos; appended to _ _ name _ _ key of the sys.modules dictionary. derive class Module _ six _ moves _ urllib _ parse from the _ LazyModule base class .
_ urllib _ parse _ moved _ attributes is a list with 16 elemetns , all of them are the results of the call to the function MovedAttribute with different 3 string arguments .
for every attr in _ urllib _ parse _ moved _ attributes ,
set attr.name attribute of the Module _ six _ moves _ urllib _ parse object to attr .
delete attr .
substitute _ urllib _ parse _ moved _ attributes for Module _ six _ moves _ urllib _ parse . _ moved _ attributes .
call the method Module _ six _ moves _ urllib _ request with an argument : string &quot; .moves.urllib _ parse &quot; appended to _ _ name _ _ ,
assign the result to the value under the string &quot; .moves.urllib _ parse &quot; appended to _ _ name _ _ key of the sys.modules dictionary , and to the value under the string &quot; .moves.urllib.parse &quot; appended to _ _ name _ _ key of the sys.modules dictionary. derive class Module _ six _ moves _ urllib _ error from the _ LazyModule base class .
_ urllib _ error _ moved _ attributes is a list with 3 elements : result of the call to the function MovedAttribute with 3 arguments :
strings &quot; URLError &quot; , &quot; urllib2 &quot; , &quot; urllib.error &quot; , result of the call to the function MovedAttribute with 3 arguments : strings &quot; HTTPError &quot; , &quot; urllib2 &quot; , &quot; urllib.error &quot; and result of the call to the function MovedAttribute with 3 arguments : strings &quot; ContentTooShortError &quot; , &quot; urllib &quot; , &quot; urllib.error &quot; . for every attr in _ urllib _ error _ moved _ attributes ,
set attr.name attribute of the Module _ six _ moves _ urllib _ error object to attr .
delete attr .
substitute _ urllib _ error _ moved _ attributes for Module _ six _ moves _ urllib _ error . _ moved _ attributes .
call the method Module _ six _ moves _ urllib _ request with an argument : string &quot; .moves.urllib.error &quot; appended to _ _ name _ _ ,
assign the result to the value under the string &quot; .moves.urllib _ error &quot; appended to _ _ name _ _ key of the sys.modules dictionary , and to the value under the string &quot; .moves.urllib.error &quot; appended to _ _ name _ _ key of the sys.modules dictionary. derive class Module _ six _ moves _ urllib _ request from the _ LazyModule base class .
_ urllib _ request _ moved _ attributes is an list with 33 elements , all of them are the results of the call to the function MovedAttribute with 3 different string arguments .
for every attr in _ urllib _ request _ moved _ attributes ,
set attr.name attribute of the Module _ six _ moves _ urllib _ request object to attr .
delete attr .
substitute _ urllib _ request _ moved _ attributes for Module _ six _ moves _ urllib _ request . _ moved _ attributes .
call the method Module _ six _ moves _ urllib _ request with an argument : string &quot; .moves.urllib.request &quot; appended to _ _ name _ _ ,
assign the result to the value under the string &quot; .moves.urllib _ request &quot; appended to _ _ name _ _ key of the sys.modules dictionary , and to the value under the string &quot; .moves.urllib.request &quot; appended to _ _ name _ _ key of the sys.modules dictionary. derive class Module _ six _ moves _ urllib _ response from the _ LazyModule base class .
_ urllib _ response _ moved _ attributes is a list with 4 elements : result of the function MovedAttribute , called with 3 arguments :
strings &quot; addbase &quot; , &quot; urllib &quot; and &quot; urllib.response &quot; , result of the function MovedAttribute , called with 3 arguments : strings &quot; addclosehook &quot; , &quot; urllib &quot; , &quot; urllib.response &quot; , result of the function MovedAttribute , called with 3 arguments : strings &quot; addinfo &quot; , &quot; urllib &quot; , &quot; urllib.response &quot; and result of the function MovedAttribute , called with 3 arguments : strings &quot; addinfourl &quot; , &quot; urllib &quot; , &quot; urllib.response &quot; . for every attr in _ urllib _ response _ moved _ attributes ,
set attr.name attribute of Module _ six _ moves _ urllib _ response object to attr .
delete attr .
substitute _ urllib _ response _ moved _ attributes for Module _ six _ moves _ urllib _ response . _ moved _ attributes .
instantiate class Module _ six _ moves _ urllib _ response with an argument , string &quot; .moves.urllib.response &quot; appended to _ _ name _ _ ,
assign it to value under the string &quot; .moves.urllib _ response &quot; appended to _ _ name _ _ key of the sys.modules dictionary , and to value under the string &quot; .moves.urllib.response &quot; appended to _ _ name _ _ key of the sys.modules dictionary. derive class Module _ six _ moves _ urllib _ robotparser from the _ LazyModule base class .
_ urllib _ robotparser _ moved _ attributes is a list containing an instance of MovedAttribute class , created with 3 argument : strings ,
&quot; RobotFileParser &quot; , &quot; robotparser &quot; , &quot; urllib.robotparser &quot; . for every attr in _ urllib _ robotparser _ moved _ attributes ,
set attr.name attribute of Module _ six _ moves _ urllib _ robotparser object to attr .
delete attr .
substitute _ urllib _ robotparser _ moved _ attributes for Module _ six _ moves _ urllib _ robotparser . _ moved _ attributes .
instantiate class Module _ six _ moves _ urllib _ robotparser with an argument , string &quot; .moves.urllib.robotparser &quot; appended to _ _ name _ _ ,
assign it to value under the string &quot; .moves.urllib _ robotparser &quot; appended to _ _ name _ _ key of the sys.modules dictionary , and to value under the string &quot; .moves.urllib.robotparser &quot; appended to _ _ name _ _ key of the sys.modules dictionary. derive class Module _ six _ moves _ urllib from the types.ModuleType base class .
append string &quot; .moves.urllib _ parse &quot; to _ _ name _ _ , use it as an key to get the value from the sys.modules dictionary , substitute it for parse .
append string &quot; .moves.urllib _ error &quot; to _ _ name _ _ , use it as an key to get the value from the sys.modules dictionary , substitute it for error .
append string &quot; .moves.urllib _ request &quot; to _ _ name _ _ , use it as an key to get the value from the sys.modules dictionary , substitute it for request .
append string &quot; .moves.urllib _ response &quot; to _ _ name _ _ , use it as an key to get the value from the sys.modules dictionary , substitute it for response .
append string &quot; .moves.urllib _ robotparser &quot; to _ _ name _ _ , use it as an key to get the value from the sys.modules dictionary , substitute it for robotparser .
define the method _ _ dir _ _ with an argument self .
return a list with 5 elements : strings &apos; parse &apos; , &apos; error &apos; , &apos; request &apos; , &apos; response &apos; and &apos; robotparser &apos; .
instantiate class Module _ six _ moves _ urllib with an argument , string &quot; .moves.urllib &quot; appended to _ _ name _ _ ,
substitute it for value under the string &quot; .moves.urllib &quot; appended to _ _ name _ _ key of the sys.modules dictionary. define the function add _ move with an argument move .
set move.name attribute of the _ MovedItems to move .
define the function remove _ move with an argument name .
try ,
delete name attribute of the _ MovedItems object .
if AttributeError exception is caught ,
try ,
delete entry under the name key of the moves . _ _ dict _ _ dictionary .
if NameError exception is caught ,
raise an AttributeError with an argument string &quot; no such move , % r &quot; , formated with a tuple with an element name .
if PY3 is true ,
_ meth _ func is a string &quot; _ _ func _ _ &quot; .
_ meth _ self is a string &quot; _ _ self _ _ &quot; .
_ func _ closure is a string &quot; _ _ closure _ _ &quot; .
_ func _ code is a string &quot; _ _ code _ _ &quot; .
_ func _ defaults is a string &quot; _ _ defaults _ _ &quot; .
_ func _ globals is a string &quot; _ _ globals _ _ &quot; .
_ iterkeys is a string &quot; keys &quot; .
_ itervalues is a string &quot; values &quot; .
_ iteritems is a string &quot; items &quot; .
_ iterlists is a string &quot; lists &quot; .
if not ,
_ meth _ func is a string &quot; im _ func &quot; .
_ meth _ self is a string &quot; im _ self &quot; .
_ func _ closure is a string &quot; func _ closure &quot; .
_ func _ code is a string &quot; func _ code &quot; .
_ func _ defaults is a string &quot; func _ defaults &quot; .
_ func _ globals is a string &quot; func _ globals &quot; .
_ iterkeys is a string &quot; iterkeys &quot; .
_ iterkeys is a string &quot; iterkeys &quot; .
_ iteritems is a string &quot; iteritems &quot; .
_ iterlists is a string &quot; iterlists &quot; .
try ,
substitute next for advance _ iterator .
if NameError exception is caught ,
define the function advance _ iterator with an argument it .
return next element of the iterable it .
substitute klass . _ _ dict _ _ for next .
try ,
substitute callable for callable .
if NameError exception is caught ,
define the function callable with an argument obj .
if &quot; _ _ call _ _ &quot; is contained in klass . _ _ dict _ _ for any klass in _ _ mro _ _ field of the obj class , return boolean True , otherwise return False .
if PY3 is true ,
define the function get _ unbound _ function with an argument unbound .
return unbound .
substitute Iterator for create _ bound _ method .
substitute object for Iterator .
if not ,
define the function get _ unbound _ function with an argument unbound .
return unbound.im _ func .
define the function create _ bound _ function with 2 arguments : func and obj .
call the method types.MethodType with 3 arguments : func , obj and obj . _ _ class _ _ , return the result .
derive the class Iterator from the base class object .
define the method next with an argument self .
call the function type with an argument self , on the result call the method _ _ next _ _ with an argument self , return the result .
substitute callable for callable .
call the function _ add _ doc with 2 arguments : get _ unbound _ function and string &quot; &quot; &quot; Get the function out of a possibly unbound function &quot; &quot; &quot; .
call the method operator.attrgetter with an argument _ meth _ func , substitute the result for get _ method _ function .
call the method operator.attrgetter with an argument _ meth _ self , substitute the result for get _ method _ self .
call the method operator.attrgetter with an argument _ func _ closure , substitute the result for get _ method _ closure .
call the method operator.attrgetter with an argument _ func _ code , substitute the result for get _ method _ code .
call the method operator.attrgetter with an argument _ func _ defaults , substitute the result for get _ method _ defaults .
call the method operator.attrgetter with an argument _ func _ globals , substitute the result for get _ method _ globals .
define the function iterkeys with 2 arguments : d and unpacked dictionary kw .
get _ iterkeys attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,
return it. define the function itervalues with 2 arguments : d and unpacked dictionary kw .
get _ itervalues attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,
return it. define the function iteritems with 2 arguments : d and unpacked dictionary kw .
get _ iteritems attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,
return it. define the function iterlists with 2 arguments : d and unpacked dictionary kw .
get _ iterlists attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,
return it. if PY3 is true ,
define the function b with an argument s .
call the method e.encode with an argument string &quot; latin-1 &quot; .
define the function u with an argument s .
return s .
substitute chr for unichr .
if second element of sys.version _ info is smaller than or equal to integer 1 ,
define the function int2byte with an argument i .
call the function bytes with an argument tuple with an element i , return the result .
if not ,
call the method operator.methodcaller with 3 arguments : string &apos; to _ bytes &apos; , integer 1 and string &apos; big &apos; , substitute the result for int2byte .
call te method operator.itemgetter with an argument integer 0 , substitute the result for byte2int .
substitute operator.getitem for indexbytes .
substitute iter for iterbytes .
import io .
substitute io.StringIO for StringIO .
substitute io.BytesIO for BytesIO .
if not ,
define the function b with an argument s .
return s .
define the function u with an argument s .
replace every occurrence of raw string &apos; \ \ &apos; in s with a raw string &apos; \ \ \ \ &apos; , use the result and string &quot; unicode _ escape &quot; ,
as arguments for the call to the unicode function , return the result. substitute unichr for unichr .
substitute chr for int2byte .
define the function byte2int with an argument bs .
get the integer representation of the first element of bs , return it .
define the function indexbytes with 2 arguments buf and i .
get the integer representation of the i-th element of buf , return it .
define the function iterbytes with an argument buf .
convert byte to its integer representation , return all of the results for every byte in buf .
import StringIO .
assign StringIO.StringIO to StringIO and BytesIO .
call the function _ add _ doc with 2 arguments : b and string &quot; &quot; &quot; Byte literal &quot; &quot; &quot; .
call the function _ add _ doc with 2 arguments : u and string &quot; &quot; &quot; Text literal &quot; &quot; &quot; .
if PY3 is true ,
get &apos; exec &apos; attribute from the moves.builtins object , substitute it for exec _ .
define the function reraise with 3 arguments : tp , value and tb set to None .
if value . _ _ traceback _ _ is not tb ,
raise an value.with _ traceback exception with an argument tb .
raise an exception value .
if not ,
define the function exec with 3 arguments : _ code _ , _ globs _ set to None and _ locs _ set to None .
if _ globs _ is None ,
call the method sys . _ getframe with an argument 1 , substitute the result for frame .
substitute frame.f _ globals for _ globs _ .
if _ locs _ is None ,
substitute if _ locs _ is None for _ locs _ .
delete frame .
otherwise if _ locs _ is None ,
substitute _ globs _ with an argument _ locs _ .
execute code statement &quot; &quot; &quot; exec _ code _ in _ globs _ , _ locs _ &quot; &quot; &quot; .
call the function exec _ with an argument string &quot; &quot; &quot; def reraise ( tp , value , tb = None ) : raise tp , value , tb &quot; &quot; &quot; .
get attribute &apos; print &apos; from the moves.builtins object , if it exists substitute it for print _ , if not print _ is None .
if print _ is None ,
define the function print _ with 2 arguments : unpacked list args and unpacked dictionary kwargs .
remover &apos; file &apos; key from the kwargs dictionary , if it exists substitute it for fp , if not substitute sys.stdout for fp .
if fp is None ,
return nothing .
define the function write with an argument data .
if data is not an instance of basestring ,
convert data to string , substitute it for data .
if fp is an instance of file and data is an instance of unicode and fp.encoding is not None ,
get &apos; errors &apos; attribute from fp object , substitute it for errors if it exists , if not errors is None .
if errors is None ,
errors is a string &quot; strict &quot; .
call the method data.encode with 2 arguments : fp.encoding and errors , substitute the result for data .
write data to fp .
want _ unicode is boolean False .
remove &apos; sep &apos; key from the kwargs dictionary , if it exists substitute it for sep , if not sep is None .
if sep is not None ,
if sep is an instance of unicode ,
want _ unicode is boolean True .
otherwise if sep is not an instance of string type ,
raise an TypeError exception with an argument string &quot; sep must be None or a string &quot; .
remove &apos; end &apos; key from the kwargs dictionary , if it exists substitute it for end , if not end is None .
if end is not None ,
if end is an instance of unicode ,
want _ unicode is boolean True .
otherwise if end is not an instance of string type ,
raise an TypeError exception with an argument string &quot; end must be None or a string &quot; .
if kwargs is true ,
raise an TypeError exception with an argument string &quot; invalid keyword arguments to print ( ) &quot; .
if want _ unicode is false ,
for every arg in args ,
if arg is an instance of unicode ,
want _ unicode is boolean True .
break from the loop execution .
if want _ unicode is true ,
convert newline character to unicode and substitute the result for newline .
convert whitespace character to unicode and substitute the result for space .
if not ,
substitute newline character for newline .
substitute string &quot; &quot; for space .
if sep is None ,
substitute space for sep .
if end is None
substitute space for end .
for every i and arg in enumerated iterable args ,
if i is true ,
call the function write with an argument sep .
call the function write with an argument arg .
call the function write with an argument end .
call the function _ add _ doc with 2 arguments : reraise and string &quot; &quot; &quot; Reraise an exception . &quot; &quot; &quot; .
define the function with _ metaclass with 2 arguments meta and unpacked list bases .
derive the class metaclass form the meta base class .
substitute type . _ _ call _ _ for _ _ call _ _ .
substitute type . _ _ init _ _ for _ _ init _ _ .
define the method _ _ new _ _ with 4 arguments : cls , name , this _ bases and d .
if this _ bases is None ,
call the method type . _ _ new _ _ with 4 arguments : cls , name , empty tuple and d , return the result .
call the function meta with 3 arguments : name , base and d .
return an instance of metaclass class , created with 3 arguments : string &apos; temporary _ class &apos; , None and an empty dictionary .
define the function add _ metaclass with an argument metaclass .
define the function wrapper with an argument cls .
call the method cls . _ _ dict _ _ .copy substitute the result for orig _ vars .
remove &apos; _ _ dict _ _ &apos; key from the orig _ vars dictionary .
remove &apos; _ _ weakref _ _ &apos; key from the orig _ vars dictionary .
get the value under the &apos; _ _ slots _ _ &apos; key of the orig _ vars dictionary , substitute it for slots .
if slots is not None ,
if slots is an instance of str ,
slots is a list with an element , slots .
for every slots _ var in slots ,
remove slots _ var key from the orig _ vars dictionary .
return an instance of metaclass class , created with 3 arguments : cls . _ _ name _ _ , cls . _ _ bases _ _ and orig _ vars .
return wrapper .
if PY3 is true ,
_ assertCountEqual is a strnig &quot; assertCountEqual &quot; .
_ assertRaisesRegex is a strnig &quot; assertRaisesRegex &quot; .
_ assertRegex is a strnig &quot; assertRegex &quot; .
substitute memoryview for memoryview .
buffer _ types is a tuple with 3 elements : bytes , bytearray and memoryview .
if not ,
_ assertCountEqual is a strnig &quot; assertItemsEqual &quot; .
_ assertRaisesRegex is a strnig &quot; assertRaisesRegexp &quot; .
_ assertRegex is a strnig &quot; assertRegexpMatches &quot; .
if sys.platform starts with a string &apos; java &apos; ,
substitute memoryview for memoryview .
if not ,
substitute buffer for memoryview .
buffer _ types is a tuple with 2 elements bytearray and memoryview .
define the function assertCountEqual with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
get _ assertCountEqual attribute of the self object , call the result with 2 arguments : unpacked list args ,
and unpacked dictionary kwargs , return the result. define the function assertRaisesRegex with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
get _ assertRaisesRegex attribute of the self object , call the result with 2 arguments : unpacked list args ,
and unpacked dictionary kwargs , return the result. define the function assertRegex with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
get _ assertRegex attribute of the self object , call the result with 2 arguments : unpacked list args ,
and unpacked dictionary kwargs , return the result. call the function MovedModule with 2 arguments : strings &quot; _ dummy _ thread &quot; and &quot; dummy _ thread &quot; ,
use the result as an argument for the call to the add _ move function. call the function MovedModule with 2 arguments : strings &quot; _ thread &quot; and &quot; thread &quot; ,
import module contextlib .
try ,
import threading .
except ImportError .
import dummy _ threading as threading .
derive the class RWLock from the object base class .
define the method _ _ init _ _ with an argument self .
call the method threading.RLock , substitute the result for self.mutex.
call the method threading.Semaphore with an argument integer 0 , substitute the result for self.can _ read .
call the method threading.Semaphore with an argument integer 0 , substitute the result for self.can _ write .
self.active _ readers is an integer 0 .
self.active _ writers is an integer 0 .
self.waiting _ readers is an integer 0 .
self.waiting _ writers is an integer 0 .
define the method reader _ enters with an argument self .
with self.mutex perform ,
if self.active _ writers and self.waiting _ writers both equal to integer 0 ,
increment self.active _ readers by 1 .
call the method self.can _ read.release.
if not ,
increment self.waiting _ readers by 1 .
call the method self.can _ read.acquire.
define the method reader _ leaves with an argument self .
with self.mutex perform ,
decrement self.active _ readers by integer 1 ,
if self.active _ readers equals integer 0 and self.waiting _ writers is not equal to integer 0 ,
increment self.active _ writers by 1 .
decrement self.waiting _ writers by integer 1 ,
call the method self.can _ write.release.
contextlib.contextmanager decorator ,
define the method reader with an argument self .
call the method self.reader _ enters .
try ,
yield nothing .
finally perform ,
call the method self.reader _ leaves .
define the method writer _ enters with an argument self .
with self.mutex perform ,
if self.active _ writers equals integer 0 and self.waiting _ writers equals integer 0 and self.active _ readers equals integer 0 ,
increment self.active _ writers by integer 1 ,
call the method self.can _ write.release.
if not ,
increment self.waiting _ writers by integer 1 ,
call the method self.can _ write.acquire.
define the method writer _ leaves with an argument self .
with self.mutex perform ,
decrement self.active _ writers by integer 1 ,
if self.waiting _ writers is not equal to integer 0 ,
increment self.active _ writers by integer 1 ,
decrement self.waiting _ writers by integer 1 ,
call the method self.can _ write.release.
otherwise if self.waiting _ readers is not equal to integer 0 ,
substitute self.waiting _ readers for t .
self.waiting _ readers is integer 0 .
increment self.active _ readers by t .
while t is greater than integer 0 ,
call the method self.can _ read.release.
decrement t by integer 1 ,
contextlib.contextmanager decorator ,
define the method writer with an argument self .
call the method self.writer _ enters .
try ,
yield nothing .
finally perform ,
call the method self.writer _ leaves .
from django.utils import six into default name space .
color _ names is a tuple with 8 elements : strings &apos; black &apos; , &apos; red &apos; , &apos; green &apos; , &apos; yellow &apos; , &apos; blue &apos; , &apos; magenta &apos; , &apos; cyan &apos; and &apos; white &apos; .
foreground is a dictionary created with elements : x appended to a string &apos; 3&apos; for value under the key x of color _ names dictionary ,
for every x in sequence of integers from 0 to 7. background is a dictionary created with elements : x appended to a string &apos; 4&apos; for value under the key x of color _ names dictionary ,
for every x in sequence of integers from 0 to 7 . RESET is a string &apos; 0&apos; .
opt _ dict is an dictionary with 5 elements : &apos; 1&apos; for &apos; bold &apos; , &apos; 4&apos; for &apos; underscore &apos; , &apos; 5&apos; for &apos; blink &apos; , &apos; 7&apos; for &apos; reverse &apos; ,
and &apos; 8&apos; for &apos; conceal &apos; . define the method colorize with 3 arguments : text set to an empty string , opts set to an empty tuple and unpacked dictionary kwargs .
code _ list is an empty list .
if text is an empty string and length of opts equals integer 1 and first element of opts equals string &apos; reset &apos; ,
format string &apos; \ x1b &#91; % sm &apos; with RESET , return the result .
call the function six.iteritems with an argument kwargs , for every k and v in the result ,
if k equals a string &apos; fg &apos; ,
append value under the key v of foreground dictionary to code _ list .
otherwise if k equals a string &apos; bg &apos; ,
append value under the key v of background dictionary to code _ list .
for every o in opts ,
if o is contained in opt _ dict ,
append value under the 0 key of the opt _ dict dictionary to code _ list .
if string &apos; noreset &apos; is not contained in opts ,
if text is true format with it and RESET a string &apos; % s \ x1b &#91; % sm &apos; , if not format it with an empty string and RESET , substitute the result for text .
join elements of code _ list in a string , separated by &apos; ; &apos; , format string &apos; \ x1b &#91; % sm &apos; with it , append text to the result if exists ,
return the string. define the function make _ style with 2 arguments : opts set to an empty tuple and unpacked dictionary kwargs .
return lambda function with text as argument and return value being result of the function colorize , called with 3 arguments : text ,
opts and unpacked dictionary kwargs . NOCOLOR _ PALETTE is a string &apos; nocolor &apos; .
DARK _ PALETTE is a string &apos; dark &apos; .
LIGHT _ PALETTE is a string &apos; light &apos; .
PALETTES is a dictionary containing 3 elements , a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR _ PALETTE ,
a dictionary with 18 pairs of dictionary value and string keys for DARK _ PALETTE , and a dictionary with 18 pairs of dictionary value and string keys for LIGHT _ PALETTE. substitute DARK _ PALETTE for DEFAULT _ PALETTE .
define the function parse _ color _ setting with an argument config _ string .
if config _ string is false ,
return value under the DEFAULT _ PALETTE key of the PALETTES dictionary .
convert config _ string to lowercase and split it by &apos; ; &apos; character , substitute the result for parts .
get value under the config _ string key of the PALETTES dictionary , call the copy method on the result and substitute it for palette .
for every part in parts ,
if part is contained in PALETTES ,
get the value under the part key of the PALETTES dictionary , update with it palette dictionary .
otherwise if &apos; = &apos; is contained in part ,
definition is an empty dictionary ,
split part by &apos; = &apos; character , substitute the result for role and instructions , respectively .
convert role to uppercase .
split instructions by &apos; , &apos; character , substitute the result for styles .
reverse the order of elements of styles .
remove first element from styles , split it by the &apos; / &apos; character , substitute the result for colors .
reverse the order of colors elements ,
remove the first element from colors , substitute it for fg .
if fg is contained in color _ names ,
substitute fg for value under the &apos; fg &apos; key of definition dictionary .
if colors is true and last element of colors is contained in color _ names ,
substitute last element of colors for value under the &apos; bg &apos; key of definition dictionary .
opts is a tuple created out of elements s , for every s in styles is s is in the keys of the opt _ dict dictionary .
if opts is true ,
substitute opts for value under the &apos; opts &apos; key of definition dictionary .
if role is contained in value under the NOCOLOR _ PALETTE key of the PALETTES dictionary and definition is true ,
substitute definition for value under the role key of palette dictionary .
if palette equals value under the NOCOLOR _ PALETTE key of the PALETTES dictionary ,
return None .
return palette .
from _ _ future _ _ import unicode _ literals into default name space .
import module re .
import module unicodedata .
from gzip import GzipFile into default name space .
from io import BytesIO into default name space .
import module warnings .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils.functional import allow _ lazy and SimpleLazyObject into default name space .
from django.utils import six into default name space .
from django.utils.six.moves import html _ entities into default name space .
from django.utils.translation import ugettext _ lazy , ugettext as _ and pgettext into default name space .
from django.utils.safestring import mark _ safe into default name space .
if six.PY2 is true ,
from django.utils.encoding import force _ unicode .
if identity lambda function returns false , substitute the x for capfirst , if not call the function force _ text with an argument x ,
convert the first element of the result to uppercase , append to it the rest of the result , substitute it for capfirst. call the function allow _ lazy with 3 arguments : capfirst and six.text _ type .
call the function re.compile with 2 arguments : raw string &apos; &lt; . * ? &gt; &#124; ( ( ? : \ w &#91; - \ w &#93; * &#124; &amp; . * ? ; ) + ) &apos; and bitwise OR performed with 2 operands ,
re.U and re.S , substitute the result for re _ words. call the function re.compile with 2 arguments : raw string &apos; &lt; . * ? &gt; &#124; ( . ) &apos; and bitwise OR performed with 2 operands ,
re.U and re.S , substitute the result for re _ chars. call the function re.compile with 2 arguments : raw string &apos; &lt; ( / ) ? ( &#91; ^ &#93; + ? ) ( ? : ( \ s * / ) &#124; . * ? ) ? &gt; &apos; and bitwise OR performed with 2 operands ,
re.U and re.S , substitute the result for re _ chars. call the function re.compile with an argument raw string &apos; \ r \ n &#124; \ r &apos; , substitute the result for re _ newlines .
call the function re.compile with an argument raw string &apos; ( ( ( ? &lt; = &#91; a-z &#93; ) &#91; A-Z &#93; ) &#124; ( &#91; A-Z &#93; ( ? ! &#91; A-Z &#93; &#124; $ ) ) ) &apos; , substitute the result for re _ camel _ case .
define the function wrap with 2 arguments text and width .
call the function force _ text with an argument text , substitute the result for text .
define the function _ generator .
call the method text.splitlines with an argument boolean True , for every line in the result ,
if line ends with a new line character substitute width incremented by integer 1 for max _ width , if not substitute width for max _ width .
while length of line is grater than max _ width ,
get fist max _ width incremented by 1 elements from line , find index of the first occurrenece of whitespace from the right side ,
add integer 1 to it , substitute the result for space. if space equals integer 0 ,
find first index of whitespace occurrence in line , add integer 1 to it , substitute the result for space .
if space equals integer 0 ,
yield line .
line is an empty string .
break from the loop execution
get the first space decremented with integer 1 elements from string line , append newline character to it , and yield the result .
remove all the elements from space index of line .
if line ends with a new line character substitute width incremented by integer 1 for max _ width , if not substitute width for max _ width .
if line is true ,
yield line .
call the function _ generator , join the result into a string , return the result .
call the function allow _ lazy with 2 arguments : wrap and six.text _ type , substitute the result for wrap .
derive the class Truncator form the SimpleLazyObject class .
define the method _ _ init _ _ with 2 arguments : self and text .
call the method _ _ init _ _ from the base class of the class Truncator ,
called with with an argument lambda function which returns result of the force _ text function called with an argument text. define the method add _ truncation _ text with 3 arguments : self , text and truncate set to None .
if truncate is None ,
call the function pgettext with an argument &apos; String to return when truncating text &apos; , &apos; % ( truncated _ text ) s ... &apos; , substitute the result for truncate .
call the function force _ text with an argument truncate , substitute the result for truncate .
if string &apos; % ( truncated _ text ) s &apos; is contained in truncate ,
format truncate with a dictionary with an element : text for &apos; truncated _ text &apos; , return the result .
if text ends with truncate ,
return text .
append truncate to text , return the result .
define the method chars with 4 arguments : self , num , truncate set to None , html set to boolean False .
convert num to an integer , substitute it for length .
call the function unicodedata.normalize with 2 arguments : string &apos; NFC &apos; and self . _ wrapped , substitute the result for text .
substitute length for truncate _ len .
for every char in result of the self.add _ truncation _ text , called with 2 arguments : an empty string and truncate .
call the method unicodedata.combining with an argument char , if it evaluates to false ,
decrement truncate _ len by integer 1 .
if truncate _ len equals integer 0 .
break from the loop execution .
if html is true ,
call the function self . _ truncate _ html with 5 arguments : length , truncate , text , truncate _ len and boolean False , return the result .
call the method self . _ text _ chars with 4 arguments : length , truncate , text and truncate _ len , return the result .
call the function allow _ lazy with an argument chars , substitute the result for chars .
define the method _ text _ chars with 5 arguments : self , length , truncate , text and truncate _ len .
s _ len is integer 0 .
end _ index is None .
for every i and char in enumerated text ,
call the function unicodedata.combining with an argument char , if it evaluates to true ,
skip this loop iteration , s
increment s _ len by integer 1 ,
if end _ index is None and s _ len is greater than truncate _ len ,
substitute i for end _ index .
if s _ len is greater than length ,
call the method self.add _ truncation _ text with 2 arguments : if end _ index is greater than zero , first end _ index elements of text ,
if not an empty string , and truncate , return the result. return text .
define the method words with 4 arguments : self , num , truncate set to None , html set to boolean False .
convert num to an integer , substitute the result for length .
if html is true ,
call the method self . _ truncate _ html with 5 arguments : length , truncate , self . _ wrapped , length and boolean True , return the result .
call the method self . _ text _ words with 2 arguments length and truncate , return the result .
call the function allow _ lazy with an argument words , substitute the result for words .
define the method _ text _ words with 3 arguments : self , length and truncate .
split self . _ wrapped into words , substitute the result for words .
if length of words is greater than length ,
substitute first length elements of words for words .
call the method self.add _ truncation _ text with 2 arguments : elements of words joined in a string , separated with whitespaces ,
and truncate , return the result. return elements of words joined in a string , separated with whitespaces .
define the method _ truncate _ html with 6 arguments : self , length , truncate , text , truncate _ len and words .
if words is not empty and length is smaller than or equal to integer 0 ,
return an empty string .
html4 _ singlets is a tuple with 9 elements : strings &apos; br &apos; , &apos; col &apos; , &apos; link &apos; , &apos; base &apos; , &apos; img &apos; , &apos; param &apos; , &apos; area &apos; , &apos; hr &apos; and &apos; input &apos; .
pos is equal to integer 0 .
end _ text _ pos is equal to integer 0 .
current _ len is equal to integer 0 .
open _ tags is an empty list .
if words is true , substitute re _ words for regex , if not substitute re _ chars for regex .
while current _ len is smaller than or equal to length ,
call the method regex.search with 2 arguments : text and pos .
if m is false ,
break from the loop execution ,
call the method m.end with an argument integer 0 , substitute the result for pos .
call the function m.group , if the result evaluates to true ,
increment current _ len by integer 1 ,
if current _ len equals truncate _ len ,
substitute pos for end _ text _ pos .
skip this loop iteration .
call the method m.group with an argument integer 0 , use it as an argument for the call to the re _ tag.match function ,
substitute the result for tag. if tag is false or current _ len is greater or equal to truncate _ len ,
skip this loop iteration .
call the method tag.groups , substitute the result for closing _ tag , tagname and self _ closing , respectively .
convert tagname to lowercase , substitute it for tagname .
if self _ closing is true or tagname is contained in html4 _ singlets ,
do nothing .
otherwise if closing _ tag is true ,
try ,
get the index of the first occurrence of tagname , substitute it for i .
if ValueError exception is caught ,
do nothing .
if not ,
create a list out of open _ tags elements form ( i + 1 ) -th index to the end , substitute it for open _ tags .
if not ,
insert tagname at the beginning of open _ tags .
if current _ len is smaller than or equal to length ,
return text .
create a list out of fist end _ text _ pos text elemnts , substitue it for out .
call the method self.add _ truncation _ text with 2 arguments : an empty string and truncate , substitute it for truncate _ text .
if truncate _ text is true ,
append truncate _ text to out .
for every tag in open _ tags ,
replace &apos; % s &apos; in string &apos; &lt; / % s &gt; &apos; with tag , append the result to out .
return out .
define the function get _ valid _ filename with an argument s .
call the function force _ text with an argument s , strip the result of whitespaces from both ends ,
replace every occurrence of whitespaces in the previous result for &apos; _ &apos; , substitute the result for s. call the function re.sub with 3 arguments : raw string &apos; ( ? u ) &#91; ^ - \ w . &#93; &apos; , an empty string and s , return the result .
call the function allow _ lazy with 2 arguments : get _ valid _ filename and six.text _ type , substitute the result for get _ valid _ filename .
define the function get _ text _ list with 2 arguments : list _ and last _ word set to result of the function ugettext _ lazy called with an argument string &apos; or &apos; .
is length of list _ equals integer 0 ,
return an empty string .
if length of list _ equals integer 1 ,
call the function force _ text with first element of list _ as an argument , return the result .
return a string &apos; % s % s % s &apos; formated with 3 elements : result of the function force _ text called with an argument i ,
separated by result of the function _ called with an argument string &apos; , &apos; , for every i in list _ without last element , result of the function force _ text called with an argument last _ word , result of the function force _ text called with an argument : last element of list _ . call the function allow _ lazy with 2 arguments : get _ text _ list and six.text _ type , substitute the result for get _ text _ list .
define the function normalize _ newlines with an argument text .
call the function force _ text with an argument text , substitute the result for text .
call the method re _ newlines.sub with 2 arguments : &apos; \ n &apos; and text , return the result .
call the function allow _ lazy with 2 arguments : normalize _ newlines and six.text _ type , substitute the result for normalize _ newlines .
define the function phone2numeric with an argument phone .
char2number is an dictionary , with 26 elements : 2 for &apos; a &apos; , 2 for &apos; b &apos; , 2 for &apos; c &apos; , 3 for &apos; d &apos; , 3 for &apos; e &apos; , 3 for &apos; f &apos; , 4 for &apos; g &apos; ,
4 for &apos; h &apos; , 4 for &apos; i &apos; , 4 for &apos; j &apos; , 5 for &apos; k &apos; , 5 for &apos; l &apos; , 5 for &apos; m &apos; , 6 for &apos; n &apos; , 6 for &apos; o &apos; , 6 for &apos; p &apos; , 7 for &apos; q &apos; , 7 for &apos; r &apos; , 7 for &apos; r &apos; , 7 for &apos; s &apos; , 7 for &apos; t &apos; , 8 for &apos; t &apos; , 8 for &apos; u &apos; , 8 for &apos; v &apos; , 9 for &apos; w &apos; , 9 for &apos; x &apos; , 9 for &apos; y &apos; and 9 for &apos; z &apos; . for every c in phone converted to lowercase , join the value under the c key of the char2number dictionary into a string , return it .
call the function allow _ lazy with an argument phone2numeric , substitute the result for phone2numeric .
define the function compress _ string with an argument s .
zbuf is an instance of BytesIO class .
zfile is an instance of GzipFile class , created with 3 arguments : mode set to string &apos; wb &apos; , compresslevel set to integer 6 ,
and fileobj set to zbuf. call the method zfile.write with an argument s .
call the method zfile.close.
call the method zbuf.getvalue , return the result .
derive the class StreamingBuffer from the object base class .
define the method _ _ init _ _ with an argument self .
self.vals is an empty list .
define the method write with 2 arguments : self and val .
append val to self.vals.
define the method read with an argument self .
join elements of self.vals into a bytes string , substitute the result for ret .
self.vals is an empty list .
return ret .
define the method flush with an argument self .
return nothing .
define the method close with an argument self .
return nothing .
define the function compress _ sequence with an argument sequence .
buf is an instance of StreamingBuffer class .
zfile is an instance of GzipFile class , created with 3 arguments : mode set to string &apos; wb &apos; , compresslevel set to integer 6 ,
and fileobj set to buf. read data from buf file stream , yield the result .
for every item in sequence ,
write item to zfile stream .
flush zfile stream buffer .
read data from buf , yield the result .
close zfile stream .
read data from buf , yield the result .
call the function re.compile with an argument string &quot; ( &#91; \ u0080- \ uffff &#93; ) &quot; , substitute the result for ustring _ re .
define the function javascript _ quote with 2 arguments : s and quote _ double _ quotes set to boolean False .
msg is an string &quot; django.utils.text.javascript _ quote ( ) is deprecated . Use django.utils.html.escapejs ( ) instead . &quot; .
call the function warnings.warn with 3 arguments : msg , RemovedInDjango19Warning and stacklevel as integer 2 .
define the function fix with an argument match .
get the unicode representation of result of the method match.group called with an integer 1 , format with in a string &quot; \ \ u % 04x &quot; ,
return the result. if type of s equals bytes ,
call the method s.decode with an argument string &apos; utf-8 &apos; , substitute the result for s .
otherwise if , type of s doesnt equal to six.text _ type ,
raise an TypeError with an argument s .
replace every occurrence of &apos; \ \ &apos; in s with &apos; \ \ \ \ &apos; .
replace every occurrence of &apos; \ r &apos; in s with &apos; \ \ r &apos; .
replace every occurrence of &apos; \ n &apos; in s with &apos; \ \ n &apos; .
replace every occurrence of &apos; \ t &apos; in s with &apos; \ \ t &apos; .
replace every occurrence of &quot; &apos; &quot; in s with &quot; \ \ &apos; &quot; .
replace every occurrence of &apos; &lt; / &apos; in s with &apos; &lt; \ \ / &apos; .
if quote _ double _ quotes is true ,
replace every occurrence of &apos; &quot; &apos; in s with &apos; &amp; quot ; &apos; .
call the method ustring _ re.sub with 2 arguments : fix and s , return the result .
call the function allow _ lazy with 2 arguments : javascript _ quote and six.text _ type , substitute the result for javascript _ quote .
call the function re.compile with 2 arguments : raw string &quot; ( ( ? : &#91; ^ \ s &apos; &quot; &#93; * ( ? : ( ? : &quot; ( ? : &#91; ^ &quot; \ \ &#93; &#124; \ \ . ) * &quot; &#124; &apos; ( ? : &#91; ^ &apos; \ \ &#93; &#124; \ \ . ) * &apos; ) &#91; ^ \ s &apos; &quot; &#93; * ) + ) &#124; \ + ) &quot; ,
and re.VERBOSE , substitute the result for smart _ split _ re. define the function smart _ split with an argument text .
call the function force _ text with an argument text , substitute the result for text .
call the method smart _ split _ re.finditer with an argument text , for every bit in result ,
call the method bit.group with an argument integer 0 , yield the result .
define the function _ replace _ entity with an argument match .
call the method match.group with an argument integer 1 , substitute the result for text .
if first element of text equals &apos; # &apos; ,
remove first element of text .
try ,
if first element of text is contained in &apos; xX &apos; .
convert text without first element to hexadecimal integer , substitute it for c .
if nor ,
convert text to an integer , substitute it for c .
call the method six.unichr with an argument c , return the result .
if ValueError exception is caught ,
call the method match.group with an argument integer 0 , return the result .
if not ,
try ,
call the function six.unichr with value under the text key of the html _ entities.name2codepoint dictionary , return the result .
if OverflowError or ValueError exceptions are caught ,
call the method match.group with an argument integer 0 , return the result .
call the method re.compile with an argument raw string &quot; &amp; ( # ? &#91; xX &#93; ? ( ? : &#91; 0-9a-fA-F &#93; + &#124; \ w { 1,8 } ) ) ; &quot; , substitute the result for _ entity _ re .
define the function unescape _ entities with an argument text .
call the method _ entity _ re.sub with 2 arguments : _ replace _ entity and text , return the result .
call the function allow _ lazy with 2 arguments : unescape _ entities and six.text _ type , substitute the result for unescape _ entities .
define the function unescape _ string _ literal with an argument s .
if first element of s is not contained in &quot; \ &quot; &apos; &quot; or last element of s is not equal to first element of s ,
raise an ValueError exception wit an argument string &quot; Not a string literal : % r &quot; , where &quot; % r &quot; is replaced with s .
substitute first element of s for quote .
remove first and last elements of s , replace every occurrence of string &apos; \ % s &apos; formated with quote with quote ,
replace every occurrence of raw string &apos; \ \ &apos; in the result with string &apos; \ \ &apos; , return the result. call the function allow _ lazy with an argument unescape _ string _ literal , substitute the result for unescape _ string _ literal .
define the function slugify with an argument value .
call the method unicodedata.normalize with 2 arguments : string &apos; NFKD &apos; and value , encode the result with 2 arguments : string &apos; ascii &apos; ,
and string &apos; ignore &apos; , call the method decode on the result with an argument string &apos; ascii &apos; , substitute the result for value. call the method re.sub with 3 arguments : string &apos; &#91; ^ \ w \ s- &#93; &apos; , empty string and value , strip the result of whitespaces from both ends ,
and convert it to lowercase , substitute the result for value. call the function re.sub with 3 arguments : string &apos; &#91; - \ s &#93; + &apos; , string &apos; -&apos; and value , use the result as an argument for the call to the ,
mark _ safe function , return the result. call the function allow _ lazy with 2 arguments : slugify and six.text _ type , substitute the result slugify .
define the function camel _ case _ to _ spaces with an argument value .
call the method re _ camel _ case.sub with 2 arguments : raw string &apos; \ 1 &apos; and value , strip the result of whitespaces from both ends ,
from _ _ future _ _ import unicode _ literals into default name space .
import module datetime .
from django.utils.html import avoid _ wrapping into default name space .
from django.utils.timezone import is _ aware and utc into default name space .
from django.utils.translation import ugettext and ungettext _ lazy into default name space .
define the function timesince with d , now defaulting to None , reversed defaulting to False as arguments .
chunks is a tuple containing 6 initial tuples :
result of multiplication of integers : 60,60,24,365 , and return value of ungettext _ lazy with 2 arguments : &apos; % d year &apos; , &apos; % d years &apos; , result of multiplication of integers : 60,60,24,30 , and return value of ungettext _ lazy with 2 arguments : &apos; % d month &apos; , &apos; % d month &apos; , result of multiplication of integers : 60,60,24,7 , and return value of ungettext _ lazy with 2 arguments : &apos; % d weeks &apos; , &apos; % d weeks &apos; , result of multiplication of integers : 60,60,24 , and return value of ungettext _ lazy with 2 arguments : &apos; % d days &apos; , &apos; % d days &apos; , result of multiplication of integers : 60,60 , and return value of ungettext _ lazy with 2 arguments : &apos; % d hours &apos; , &apos; % d hours &apos; , result of multiplication of integers : 60 , and return value of ungettext _ lazy with 2 arguments : &apos; % d minutes &apos; , &apos; % d minutes &apos; , if d is not an instance of datetime.datetime ,
call the function datetime.datetime with 3 arguments , d.year , d.month and d.day , substitute the result for d .
if now equals to boolean True and now is not an instance of datetime.datetime ,
call the function datetime.datetime with 3 arguments , now.year , now.month and now.day , substitute the result for now .
if now is false ,
call the function datetime.datetime with utc as argument if call to the is _ aware ( d ) returns True , if not None is the argument , store the result in now .
if reversed is True substitute difference of d and now for delta , if not substitute the difference of now and d for delta .
multiply delta.days , integer 24 , integer 60 and integer 60 add delta.seconds to it , substitute the result for since .
if since is lesser or equal to integer 0 ,
call the function ugettext with &apos; 0 minutes &apos; as argument , use the result as the argument for the call to the avoid _ wrapping function , return the result .
for every i and tuple containing 2 elements : seconds and name , in enumerated chunks ,
divide since by seconds , store the floored result in count .
if count does not equals to integer 0 ,
break the execution of the smallest enclosing loop .
use the remainder of the division of name by count as the argument for the call to the avoid _ wrapping function , store the result in result .
if i incremented by 1 is lesser than length of chunks ,
get the element of chunks at the ( i + 1 ) -the index , assign it to the seconds2 and name2 , respectively .
multiply seconds by count , subtract it from since , divide the result by seconds2 , store the floored result in count2 .
if count2 does not equals to integer 0 ,
call avoid _ wrapping function with name2 modulus count2 as argument , call the ugettext with &apos; , &apos; as argument , add previous 2 results , increment variable result by it .
return result .
define the function timeuntil with 2 arguments , d and now defaulting to none .
evaluate the function timesince with d , now and reversed set to boolean true as arguments , return the result .
from datetime import datetime , timedelta and tzinfo into default name space .
from threading import local into default name space .
import module sys .
import module time as _ time .
try ,
import pytz .
if ImportError exception is caught ,
pytz is None .
from django.conf import settings into default name space .
from django.utils import six into default name space .
_ _ all _ _ is a list with 15 elements : strings &apos; utc &apos; , &apos; get _ fixed _ timezone &apos; , &apos; get _ default _ timezone &apos; , &apos; get _ default _ timezone _ name &apos; ,
&apos;get _ current _ timezone &apos; , &apos; get _ current _ timezone _ name &apos; , &apos; activate &apos; , &apos; deactivate &apos; , &apos; override &apos; , &apos; localtime &apos; , &apos; now &apos; , &apos; is _ aware &apos; , &apos; is _ naive &apos; , &apos; make _ aware &apos; and &apos; make _ naive &apos; . call the function timedelta with an argument integer 0 , substitute the result for ZERO .
derive the class UTC from the tzinfo base class .
define the method _ _ repr _ _ with an argument self .
return a string &quot; &lt; UTC &gt; &quot; .
define the method utcoffset with 2 arguments self and dt .
return ZERO .
define the method tzname with 2 arguments self and dt .
return a string &quot; UTC &quot; .
define the method dst with 2 arguments self and dt .
return ZERO .
derive the class FixedOffset from the tzinfo base class .
define the method _ _ init _ _ with 3 arguments : self , offset set to None , name set to None .
if offset is not None ,
call the function timedelta with an argument minutes set to offset , substitute the result for self . _ _ offset .
if name is not None ,
substitute name for self . _ _ name .
define the method utcoffset with 2 arguments : self and dt .
return self . _ _ offset .
define the method tzname with 2 arguments : self and dt .
return self . _ _ name .
define the method dst with 2 arguments : self and dt .
return ZERO .
derive the class ReferenceLocalTimezone from the tzinfo base class .
define the method _ _ init _ _ with an argument self .
call the function timedelta with an argument seconds set to negative _ time.timezone , substitute the result for self.STDOFFSET.
if _ time.daylight is true ,
call the function timedelta with an argument seconds set to negative _ time.altzone , substitute the result for self.DSTOFFSET.
if not ,
substitute self.STDOFFSET for self.DSTOFFSET.
subtract self.STDOFFSET with self.DSTOFFSET , substitute the result for self.DSTDIFF.
call the method tzinfo . _ _ init _ _ with an argument self .
define the method utcoffset with 2 arguments : self and dt .
call the method self . _ isdst with an argument dt , if it evaluates to true ,
return self.DSTOFFSET.
if not ,
return self.STDOFFSET.
define the method utcoffset with 2 arguments : self and dt .
call the method self . _ isdst with an argument dt , if it evaluates to true ,
return self.DSTDIFF.
if not ,
return ZERO .
define the method tzname with 2 arguments : self and dt .
call the method self . _ isdst with an argument dt , use it as an key to get the value from the _ time.tzname dictionary , return it .
define the method _ isdst with 2 arguments : self and dt .
tt is a tuple with 9 elements : dt.year , dt.month , dt.day , dt.hour , dt.minute , dt.second , result of the method dt.weekday ,
ingeter 0 and integer 0. call the method _ time.mktime with an argument tt , substitute the result for stamp .
call the method _ time.localtime with an argument stamp , substitute the result for tt .
if tt.tm _ isdst is greater than integer 0 , return the result .
derive the class LocalTimezone from the ReferenceLocalTimezone base class .
define the method tzname with 2 arguments : self and dt .
if dt is None , is _ dst is boolean False , otherwise call the method _ isdst with an argument dt , substitute the result for is _ dst .
return the value under the is _ dst key of the _ time.tzname dictionary .
define the method _ isdst with 2 arguments : self and dt .
try ,
call the method _ isdst with an argument dt from the base class of the class LocalTimezone , return the result .
if OverflowError or ValueError , renamed to exc , exceptions are caught ,
get the type of the exc object , substitute it for exc _ type .
call the function exc _ type with an argument string &quot; Unsupported value : % r . You should install pytz . &quot; , replace &apos; % s &apos; with dt ,
substitute the result for exc _ value. substitute exc for exc _ value . _ _ cause _ _ .
call the function six.reraise with 3 arguments : exc _ type , exc _ value and third element of the result of the method sys.exc _ info .
if pytz is true , substitute pytz.utc for utc , otherwise substitute result of the function UTC for utc .
define the function get _ fixed _ timezone with an argument offset .
if offset is an instance of timedelta class ,
substitute offset.seconds for offset .
if offset is smaller than integer 0 , sign is &apos; -&apos; , otherwise sign is &apos; + &apos; .
divide absolute offset by module 60 , use the result to format string &apos; % 02d % 02d &apos; , substitute it for hhmm .
sum sign and hhmm , substitute the result for name .
return an instance of FixedOffset class , created with 2 arguments : offset and name .
_ localtime is None .
define the function get _ default _ timezone .
use global variable _ localtime .
if _ localtime is None ,
if settings.TIME _ ZONE is an instance of six.string _ types and pytz is not None ,
call the method pytz.timezone with an argument settings.TIME _ ZONE , substitute the result for _ localtime .
if not ,
_ localtime is an instance of LocalTimezone class .
return _ localtime .
define the function get _ default _ timezone _ name .
call the function get _ default _ timezone , use the result as an argument for the call to the function _ get _ timezone _ name , return the result .
call the method local , substitute the result for _ active .
define the function get _ current _ timezone .
get &apos; value &apos; attribute of the _ active object , if it exists return it , if not , call the function get _ default _ timezone and return the result .
define the function get _ current _ timezone _ name .
call the function get _ current _ timezone , use the result as an argument for the call to the function _ get _ timezone _ name , return the result .
define the function _ get _ timezone _ name with an argument timezone .
try ,
return timezone.zone.
if AttributeError exception is caught ,
call the method timezone.tzname with an argument None , return the result .
define the function activate with an argument timezone .
if timezone is an instance of tzinfo ,
substitute timezone for _ active.value.
otherwise if timezone is an instance of six.string _ types and pytz is not None ,
call the method pytz.timezone with an argument timezone , substitute the result for _ active.value.
if not ,
raise an ValueError with an argument string &quot; Invalid timezone : % r &quot; , substitute &apos; % r &apos; with timezone .
define the function deactivate .
if active has an attribute &apos; value &apos; ,
delete _ active.value.
derive the class override from the object base class .
define the method _ _ init _ _ with 2 arguments : self and timezone .
substitute timezone for self.timezone.
get &apos; value &apos; attribute of the _ active object
define the method _ _ enter _ _ with an argument self .
if self.timezone is None ,
call the method deactivate .
if not ,
call the method activate with an argument self.timezone.
define the method _ _ exit _ _ with 4 arguments self , exc _ type , exc _ value and traceback .
if self.old _ timezone is None ,
call the method deactivate .
if not ,
substitute self.old _ timezone for _ active.value.
define the function template _ localtime with 2 arguments : value and use _ tz set to None .
if value is an instance of datetime and settings.USE _ TZ if use _ tz is None else use _ tz and call to the function is _ naive ,
with an argument value evaluates to false , and if &apos; convert _ to _ local _ time &apos; attribute of value object doesnt exists , or is it does is boolean True , should _ convert is boolean True , otherwise is boolean False. if should _ convert is true , call the function localtime with an argument value and return the result , otherwise return value .
define the function localtime with 2 arguments : value and timezone set to None .
if timezone is None ,
call the function get _ current _ timezone , substitute the result for timezone .
call the method value.astimezone with an argument timezone , substitute the result for value .
if timezone has an attribute &apos; normalize &apos; ,
call the method timezone.normalize with an argument value , substitute the result for value .
return value .
define the function now .
if settings.USE _ TZ is true ,
call the method datetime.utcnow , on the result call the method replace with an argument tzinfo set to utc , return the result .
if not ,
call the method datetime.now , return the result .
define the function is _ aware with an argument value .
if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None ,
return boolean True , otherwise return boolean False. define the function is _ naive with an argument value .
if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None ,
return boolean True , otherwise return boolean False. define the function make _ aware with 2 arguments : value and timezone .
if timezone has an attribute &apos; localize &apos; ,
call the method timezone.localize with 2 arguments : value and is _ dst as None , return the result .
if not ,
call the function is _ aware with an argument value , if it evaluates to true ,
raise an ValueError exception with an argument string &quot; make _ aware expects a naive datetime , got % s &quot; , where &apos; % s &apos; is replaced with value .
call the method value.replace with an argument tzinfo as timezone , return the result .
define the function make _ naive with 2 arguments : value and timezone .
call the method value.astimezone with an argument timezone , substitute the result for value .
if timezone has an attribute &apos; normalize &apos; ,
call the method timezone.normalize with an argument value , substitute the result for value .
call the method value.replace with an arugment tzinfo set to None , return the result .
from _ _ future _ _ import unicode _ literals into default name space .
import module re .
from django.utils.encoding import force _ text into default name space .
from django.utils.functional import lazy into default name space .
from django.utils import six into default name space .
_ _ all _ _ is an list containing strings : &apos; activate &apos; , &apos; deactivate &apos; , &apos; override &apos; , &apos; deactivate _ all &apos; , &apos; get _ language &apos; ,
&apos;get _ language _ from _ request &apos; , &apos; get _ language _ info &apos; , &apos; get _ language _ bidi &apos; , &apos; check _ for _ language &apos; , &apos; to _ locale &apos; , &apos; templatize &apos; , &apos; string _ concat &apos; , &apos; gettext &apos; , &apos; gettext _ lazy &apos; , &apos; gettext _ noop &apos; , &apos; ugettext &apos; , &apos; ugettext _ lazy &apos; , &apos; ugettext _ noop &apos; , &apos; ngettext &apos; , &apos; ngettext _ lazy &apos; , &apos; ungettext &apos; , &apos; ungettext _ lazy &apos; , &apos; pgettext &apos; , &apos; pgettext _ lazy &apos; , &apos; npgettext &apos; , &apos; npgettext _ lazy &apos; and &apos; LANGUAGE _ SESSION _ KEY &apos; . LANGUAGE _ SESSION _ KEY is an string &apos; _ language &apos; .
derive the class TranslatorCommentWarning from the SyntaxWarning base class .
do nothing .
derive the class Trans from the object base class .
define the method _ _ getattr _ _ with 2 arguments : self and real _ name .
from django.conf import settings .
if settings.USE _ I18N is true ,
from django.utils.translation import trans _ real as trans .
if not ,
from django.utils.translation import trans _ null as trans .
set real _ name attribute of the self object to value of real _ name attribute of trans object .
get attribute real _ name from the trans object , return it .
_ trans is an instance of Trans class .
delete Trans .
define the function gettext _ noop with an argument message .
call the method _ trans.gettext _ noop with an argument message .
substitute gettext _ noop for ugettext _ noop .
define the function gettext _ noop with an argument message .
call the method _ trans.gettext with an argument message .
define the function ngettext with 3 arguments : singular , plural and number .
call the method _ trans.ngettext with 3 arguments singular , plural and number .
define the method ugettext with an argument message .
call the method _ trans.gettext _ noop with an argument message .
define the function ungettext with 3 arguments : singular , plural and number .
call the method _ trans.ungettext with 3 arguments singular , plural and number .
define the function pgettext with 2 arguments : context and message .
call the method _ trans.pgettext with 2 arguments context and message .
define the function npgettext with 4 arguments : context , singular , plural and number .
call the method _ trans.npgettext with 4 arguments context , singular , plural and number .
call the function lazy with 2 arguments : gettext and str , substitute gettext _ lazy .
call the function lazy with 2 arguments : ugettext and six.text _ type , substitute ugettext _ lazy .
call the function lazy with 2 arguments : pgettext and six.text _ type , substitute pgettext _ lazy .
define the function lazy _ number with 4 arguments : func , resultclass , number set to None and unpacked dictionary kwargs .
if number is an instance of int type .
substitute number for value under the &apos; number &apos; key of the kwargs dictionary .
call the function lazy with 2 arguments : func and resultclass , call the result with an argument , unpacked dictionary kwargs ,
substitute the result for proxy. if not ,
derive the class NumberAwareString from the resultclass base class .
define the method _ _ mod _ _ with 2 arguments : self and rhs .
if rhs is an instance of dict type and number is true ,
try ,
substitute value under the number key of the rhs dictionary for number _ value .
if KeyError exception is caught ,
raise an KeyError with an argument string &apos; Your dictionary lacks key \ &apos; % s \ &apos; . Please provide it , because it is required to &apos;
&apos;determine whether string is singular or plural . &apos; , where &apos; % s &apos; is replaced with number. if not ,
substitute rhs for number _ value .
substitute number _ value for kwargs dictionary value under the &apos; number &apos; key .
call the function func with unpacked dictionary kwargs as an argument , substitute the result for translated .
try ,
format translated with rhs , substitute the result for translated .
if TypeError exception is caught ,
do nothing .
return translated .
call the function lazy with 2 arguments : lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString , call the result with an argument unpacked dictionary kwargs , substitute the result for proxy .
return proxy .
define the function ngettext _ lazy with 3 arguments : singular , plural and number set to None .
call the function lazy _ number with 5 arguments : ngettext , str , singular set to singular , plural set to plural ,
and number set to number , return the result. define the function ungettext _ lazy with 3 arguments : singular , plural and number set to None .
call the function lazy _ number with 5 arguments : ungettext , six.text _ type , singular set to singular , plural set to plural ,
and number set to number , return the result. define the function npgettext _ lazy with 4 arguments : context , singular , plural and number set to None .
call the function lazy _ number with 6 arguments : npgettext , six.text _ type , context set to context , singular set to singular ,
plural set to plural and number set to number , return the result. define the function activate with an argument language .
call the function _ trans.activate with an argument language , return the result .
define the function deactivate .
call the function _ trans.deactivate , return the result .
derive the class override from the object base class .
define the method _ _ init _ _ with 3 arguments : self , language and deactivate set to boolean False .
substitute language for self.language.
substitute deactivate for self.deactivate.
call the function get _ language , substitute the result for self.old _ language .
define the method _ _ enter _ _ with an argument self .
if self.language is not None ,
call the function activate with an argument self.language.
if not ,
call the function deactivate _ all .
define the method _ _ exit _ _ with 4 arguments : self , exc _ type , exc _ value and traceback .
if self.deactivate is true ,
call the method deactivate .
if not ,
call the method activate with an argument self.old _ language .
define the function get _ language .
call the function _ trans.get _ language , return the result .
define the function get _ language _ bidi .
call the function _ trans.get _ language _ bidi , return the result .
define the function check _ for _ language with an argument lang _ code .
call the function _ trans.check _ for _ language with an argument lang _ code , return the result .
define the function to _ locale with an argument language .
call the function _ trans.to _ locale with an argument language , return the result .
define the function get _ language _ from _ request with 2 arguments : request and check _ path set to boolean False .
call the function _ trans.get _ language _ from _ request with 2 arguments : request and check _ path , return the result .
define the function get _ language _ from _ path with an argument path .
call the function _ trans.get _ language _ from _ path with an argument path , return the result .
define the function templatize with 2 arguments : src and origin set to None .
call the function _ trans.templatize with 2 arguments : src and origin , return the result .
define the function deactivate _ all .
call the function _ trans.deactivate _ all , return the result .
define the function _ string _ concat with an argument unpacked list strings .
for every s in strings , call the function force _ text with an argument s , join the results in a string , return the result .
call the function lazy with 2 arguments : _ string _ concat and six.text _ type , substitute the result for string _ concat .
define the function get _ language _ info with an argument lang _ code .
from django.conf.locale import LANG _ INFO .
try ,
get the value under the lang _ code key of the LANG _ INFO dictionary , return it .
if KeyError exception is caught ,
if character &apos; -&apos; is not contained in lang _ code ,
raise an KeyError with an argument &quot; Unknown language code % s . &quot; , where &apos; % s &apos; is replaced with lang _ code .
split lang _ code by character &apos; -&apos; , substitute the first element of the result for generic _ lang _ code .
try ,
get the LANG _ INFO dictionary value under the generic _ lang _ code key , return the result .
if KeyError exception is caught ,
raise an KeyError with an argument string &quot; Unknown language code % s and % s . &quot; , where &apos; % s &apos; is replaced with lang _ code ,
and generic _ lang _ code. call the function re.compile with an argument string &apos; \ s * \ n \ s * &apos; , substitute the result for trim _ whitespace _ re .
define the function trim _ whitespace with an argument s .
call strip s of the surrounding whitespaces , substitute every occurrence of the whitespace in the trim _ whitespace _ re with previous result , return the result .
from django.conf import settings into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils.safestring import mark _ safe and SafeData into default name space .
define the function ngettext with 3 arguments : singular , plural and number .
if number equals integer 1 ,
return singular .
return plural .
substitute ngettext for ngettext _ lazy .
define the function ungettext with 3 arguments : singular , plural and number .
call the function ngettext with 3 arguments : singular , plural and number , use the result as an argument for the call to the force _ text ,
return the result. define the function pgettext with 2 arguments : context and message .
call the function ugettext with an argument message .
define the function ngettext with 4 arguments : context , singular , plural and number .
call the function ungettext with 3 arguments : singular , plural and number , return the result .
activate is a lambda function which returns None for any argument x .
deactivate and deactivate _ all are lambda functions returning None .
get _ language is a lambda function returning settings.LANGUAGE _ CODE .
get _ language _ bidi is lambda function returning boolean True if settings.LANGUAGE _ CODE is contained in settings.LANGUAGES _ BIDI .
check _ for _ language is lambda function that returns boolean True for every argument x .
define the function gettext with an argument message .
if message is an instance of SafeData .
call the function mark _ safe with an argument message , return the result .
return message .
define the function ugettext with an argument message .
call the function gettext with an argument message , use the result as an argument for the call to the force _ text function , return the result .
substitute gettext for gettext _ noop , gettext _ lazy and _ .
define the function to _ locale with an argument language .
find position of &apos; -&apos; in the index of the language , substitute the result for p .
if p is greater or equal to integer 0 ,
append &apos; _ &apos; to string created from first p elements of languages converted to lowercase ,
convert slice of language string from ( p + 1 ) -th index to the end to uppercase , append it to the previous result , return the resulting string. if not ,
convert language to lowercase and return it .
define the function get _ language _ from _ request with 2 arguments : request and check _ path set to boolean False .
return settings.LANGUAGE _ CODE .
define the function get _ language _ from _ path with an argument request .
return None .
from _ _ future _ _ import unicode _ literals into default name space .
from collections import OrderedDict into default name space .
import module os .
import module re .
import module sys .
import module gettext as gettext _ module .
from threading import local into default name space .
import module warnings .
from django.apps import apps into default name space .
from django.conf import settings into default name space .
from django.core.exceptions import AppRegistryNotReady into default name space .
from django.dispatch import receiver into default name space .
from django.test.signals import setting _ changed into default name space .
from django.utils.deprecation import RemovedInDjango19Warning into default name space .
from django.utils.encoding import force _ text into default name space .
from django.utils. _ os import upath into default name space .
from django.utils.safestring import mark _ safe and SafeData into default name space .
from django.utils import six and lru _ cache into default name space .
from django.utils.six import StringIO into default name space .
from django.utils.translation import TranslatorCommentWarning , trim _ whitespace and LANGUAGE _ SESSION _ KEY into default name space .
_ translations is an empty dictionary .
call the function local , substitute the result for _ active .
_ default is None .
_ supported is None .
CONTEXT _ SEPARATOR is a string &quot; \ x04 &quot; .
call the function re.compile with 2 arguments : raw string &quot; ( &#91; A-Za-z &#93; { 1,8 } ( ? : - &#91; A-Za-z0-9 &#93; { 1,8 } ) * &#124; \ * ) ( ? : \ s * ; \ s * q = ( 0 ( ? : \ . \ d { , 3 } ) ? &#124; 1 ( ? : .0 { , 3 } ) ? ) ) ? ( ? : \ s * , \ s * &#124; $ ) &quot; ,
and re.VERBOSE , substitute the result for accept _ language _ re. call the function re.compile with 2 arguments : raw string &apos; ^ &#91; a-z &#93; { 1,8 } ( ? : - &#91; a-z0-9 &#93; { 1,8 } ) * $ &apos; and re.IGNORECASE ,
substitute the result for language _ code _ re. call the function re.compile with an argument raw string &apos; ^ / ( &#91; \ w- &#93; + ) ( / &#124; $ ) &apos; , substitute the result for language _ code _ prefix _ re .
_ BROWSERS _ DEPRECATED _ LOCALES is an dictionary with 2 initial entries : &apos; zh-hans &apos; for &apos; zh-cn &apos; and &apos; zh-hant &apos; for &apos; zh-tw &apos; .
substitute _ BROWSERS _ DEPRECATED _ LOCALES for _ DJANGO _ DEPRECATED _ LOCALES .
decorator function receiver with an argument setting _ changed ,
define the function reset _ cache with an argument unpacked dictionary kwargs .
if value under the &apos; setting &apos; key of the kwargs dictionary is equal to string &apos; LANGUAGES &apos; or strnig &apos; LANGUAGE _ CODE &apos; ,
use global variable _ supported .
_ supported is None .
call the method check _ for _ language.cache _ clear .
call the method get _ supported _ language _ variant.cache _ clear .
define the function to _ locale with 2 arguments language and to _ lower set to boolean False .
find first index of occurrence of character &apos; -&apos; in language , substitute it for p .
if p is greater or equal to integer 0 ,
if to _ lower is true ,
convert fist p elements of language to lowercase , append &apos; _ &apos; to it ,
covert to lowercase language elements from ( p + 1 ) -th index to the end , append it to the previous result , return it. if not ,
slice language from ( p + 1 ) -th index to the end , calculate the length of the obtained segment , if it is greater than integer 2 ,
convert fist p elements of language to lowercase , append &apos; _ &apos; to it ,
covert to lowercase language element at ( p + 1 ) -th index , append it to the previous result , covert to lowercase language elements from ( p + 2 ) -th index to the end , append it to the previous result , return it. convert fist p elements of language to lowercase , append &apos; _ &apos; to it ,
covert to uppercase language elements from ( p + 1 ) -th index to the end , append it to the previous result , return it. if not ,
convert language to lowercase , return it .
define the function to _ language with an argument locale .
find first index of occurrence of character &apos; -&apos; in locale , substitute it for p .
if p is greater or equal to integer 0 ,
convert fist p elements of locale to lowercase , append &apos; _ &apos; to it ,
covert to lowercase locale elements from ( p + 1 ) -th index to the end , append it to the previous result , return it. if not ,
convert locale to lowercase and return it .
derive the class DjangoTranslation from gettext _ module.GNUTranslations base class .
define the method _ _ init _ _ with 2 arguments : self and language .
call the method gettext _ module.GNUTranslations. _ _ init _ _ with an argument self .
substitute language for self . _ _ language .
call the function to _ language with an argument language , substitute it for self . _ _ to _ language .
call the function to _ locale with an argument language , substitute it for self . _ _ locale .
self.plural is an lambda function with an argument n , which returns result of boolean expression n not equal to integer 1 ,
converted to an integer. call the method self . _ init _ translation _ catalog .
call the method self . _ add _ installed _ apps _ translations .
call the method self . _ add _ local _ translations .
call the method self . _ add _ fallback .
define the method _ _ repr _ _ with an argument self .
return a string &quot; &lt; DjangoTranslation lang : % s &gt; &quot; , where &apos; % s &apos; is replaced with self . _ _ language .
define the method _ new _ gnu _ trans with 3 arguments : self , localedir and use _ null _ fallback set to boolean True .
call the method gettext _ module.translation with 5 arguments : domain set to string &apos; django &apos; , localedir set to localedir ,
languages set to a list with an element self . _ _ locale , codeset set to a string &apos; utf-8 &apos; and fallback set to use _ null _ fallback , substitute the result for translation. if translation has an attribute &apos; _ catalog &apos; ,
translation . _ catalog is an empty dictionary .
translation . _ info is an empty dictionary .
return translation .
define the method _ init _ translation _ catalog with an argument self .
get the value under the settings . _ _ module _ _ key of the sys.modules dictionary ,
use its _ _ file _ _ field as an argument for the call to the function upath , substitute the result for settingsfile. call the function os.path.dirname with an argument settingsfile , join the result an string &apos; locale &apos; into a file path ,
substitute it for localedir. use _ null _ fallback is boolean True .
if self . _ _ language equals settings.LANGUAGE _ CODE ,
use _ null _ fallback is boolean False .
call the function self . _ new _ gnu _ trans with 2 arguments : localedir and use _ null _ fallback , substitute the result for translation .
call the method translation . _ info.copy , substitute the result for self . _ info .
call the method translation . _ catalog.copy , substitute the result for self . _ catalog .
define the method _ add _ installed _ apps _ translations with an argument self .
try ,
call the method apps.get _ app _ configs , convert the result in a list , reverse the order of elements , substitute the result for app _ configs .
if AppRegistryNotReady exception is caught ,
rais an AppRegistryNotReady exception with an argument string &quot; The translation infrastructure cannot be initialized before the &quot;
&quot; apps registry is ready . Check that you don &apos;t make non-lazy gettext calls at import time . &quot; . for every app _ config in app _ configs ,
join app _ config.path and string &apos; locale &apos; into a file path , substitute it for localedir .
call the method self . _ new _ gnu _ trans with an argument localedir , substitute the result for translation .
call the method self.merge with an argument translation .
define the method _ add _ local _ translations with an argument self .
reverse settings.LOCALE _ PATHS element order , for every localedir in the result ,
call the function self . _ new _ gnu _ trans with an argument localedir , substitute the result for translation .
call the method self.merge with an argument translation .
define the method _ add _ fallback with an argument self .
if self . _ _ language equals settings.LANGUAGE _ CODE or self . _ _ language equals a string &quot; en-us &quot; ,
return .
call the function translation with an argument settings.LANGUAGE _ CODE , substitute the result for default _ translation .
call the method self.add _ fallback with an argument default _ translation .
define the method merge with 2 arguments self and other .
update the self . _ catalog dictionary with other . _ catalog .
define the method language with an argument self .
return self . _ _ language .
define the method to _ language with an argument self .
return self . _ _ to _ language .
define the function translation with an argument language .
use global variable _ translations .
if language is not contained in _ translations ,
_ translations dictionary value , under the language key is an instance of DjangoTranslation class , created with an argument language .
return _ translations dictionary value , under the language key .
define the function activate with an argument language .
if language is contained in _ DJANGO _ DEPRECATED _ LOCALES ,
msg is a string &quot; The use of the language code &apos; % s &apos; is deprecated . Please use the &apos; % s &apos; translation instead . &quot; .
call the method call the function warnings.warn with 3 arguments : msg formatted with language and value under the language key ,
of the _ DJANGO _ DEPRECATED _ LOCALES dictionary , RemovedInDjango19Warning and stacklevel set to integer 2. call the function translation with an argument language , substitute the result for _ active.value.
define the function deactivate .
if _ active has an attribute &quot; value &quot; ,
delete _ active.value.
define the function deactivate _ all .
call the method gettext _ module.NullTranslations , substitute the result for _ active.value.
define the function get _ language .
get &apos; value &apos; attribute of the _ active object , if it exists substitute it for t , if not t is None .
if t is not None ,
try ,
call the method t.to _ language , return the result .
if AttributeError exception is caught ,
do nothing .
return settings.LANGUAGE _ CODE .
define the function get _ language _ bidi .
call the function get _ language , split the result by &apos; -&apos; , substitute the first element of the result for base _ lang .
if base _ lang is contained in settings.LANGUAGES _ BIDI , return boolean True , if not , return boolean False .
define the function catalog .
use global variable _ default .
get &apos; value &apos; attribute of the _ active object , if it exists substitute it for t , if not t is None .
if t is not None
return t .
if _ default is None
call the function translation with an argument settings.LANGUAGE _ CODE , substitute the result for _ default .
return _ default .
define the function do _ translate with 2 arguments : message and translation _ function .
use global variable _ default .
replace every occurrence of string &apos; \ r \ n &apos; in message with &apos; \ n &apos; , replace every occurrence of string &apos; \ r &apos; ,
in the previous result for with string &apos; \ n &apos; , substitute the result for eol _ message. get &apos; value &apos; attribute of the _ active object , if it exists substitute it for t , if not t is None .
if t is not None ,
get translation _ function attribute of the object t , call the result with an argument eol _ message , substitute the result for result .
if not ,
if _ default is None ,
call the function translation with an argument settings.LANGUAGE _ CODE , substitute the result for _ default .
get translation _ function attribute of the object _ default , call the result with an argument eol _ message , substitute the result for result .
if message is an instance of SafeData ,
call the function mark _ safe with an argument result , return it .
return result .
define the function gettext with an argument message .
call the function do _ translate with 2 arguments : message and string &apos; gettext &apos; , return the result .
if six.PY3 is true ,
substitute gettext for ugettext .
if not ,
define the function ugettext with an argument message .
call the function do _ translate with 2 arguments : message and string &apos; ugettext &apos; , return the result .
define the function pgettext with 2 arguments : context and message .
convert to strings and concatenate context , CONTEXT _ SEPARATOR and message , substitute the result for msg _ with _ ctxt .
call the function ugettext with an argument msg _ with _ ctxt , substitute the result for result .
if CONTEXT _ SEPARATOR is contained in result ,
call the function force _ text with an argument message , return the result .
return result .
define the function locale with an argument locale .
return message .
define the function do _ ntranslate with 4 arguments : singular , plural , number and translation _ function .
use global variable _ default .
get &apos; value &apos; attribute of the _ active object , if it exists substitute it for t , if not t is None .
if t is not None ,
get translation _ function attribute of the t object , call the result with 3 arguments : singular , plural and number , return the result .
if _ default is None ,
call the function translation with an argument settings.LANGUAGE _ CODE , substitute the result for _ default .
get translation _ function attribute of the _ default object , call the result with 3 arguments : singular , plural and number , return the result .
define the function ngettext with 3 arguments : singular , plural and number .
call the function do _ ntranslate with 3 arguments : singular , plural , number and string &apos; ngettext &apos; , return the result .
if six.PY3 is true ,
substitute ngettext for ungettext .
if not ,
define the function ungettext with 3 arguments : singular , plural and number .
call the function do _ ntranslate with 3 arguments : singular , plural , number and string &apos; ngettext &apos; , return the result .
define the function npgettext with 4 arguments : context , singular , plural and number .
msgs _ with _ ctxt is a tuple containing 2 elements : string created by concatenating context , CONTEXT _ SEPARATOR and singular ,
string created by concatenating context , CONTEXT _ SEPARATOR and plural and number. call the function ungettext with unpacked dictionary msgs _ with _ ctxt , substitute the result for result .
if CONTEXT _ SEPARATOR is contained in result ,
call the function ungettext with 3 arguments : singular , plural and number , substitute the result for result .
return result .
define the function all _ locale _ paths .
get the value under the settings . _ _ module _ _ key of the sys.modules dictionary , use its _ _ file _ _ field as an argument ,
for the call to the function upath , get the directory name of the resulting system path , join the result and string &apos; locale &apos; , into a valid file path , substitute it for globalpath. append settings.LOCALE _ PATHS converted into a list to a list containing an element globalpath , return it .
decorator function lru _ cache.lru _ cache with an argument maxsize set to integer 1000 .
define the function check _ for _ language with an argument lang _ code .
call the method language _ code _ re.search with an argument lang _ code , if it evaluates to false ,
return boolean False .
call the function all _ locale _ paths , for every path is the result ,
call the method gettext _ module.find with 3 arguments : string &apos; django &apos; , path and list with an element : result of the function ,
to _ locale called with an argument lang _ code , if the result is not None , return boolean True .
return boolean False .
decorator function lru _ cache.lru _ cache with an argument maxsize set to integer 1000 .
define the function get _ supported _ language _ variant with 2 arguments : lang _ code and strict set to boolean False .
use global variable _ supported .
if _ supported is None ,
_ supported is an instance of OrderedDict class , created with an argument settings.LANGUAGES.
if lang _ code is true ,
get the value under the lang _ code key of the _ BROWSERS _ DEPRECATED _ LOCALES dictionary , substitute it for replacement .
if lang _ code is not contained in _ supported and replacement is contained in _ supported ,
return replacement .
split lang _ code by &apos; -&apos; , substitute the first element of the result for generic _ lang _ code .
for every code in tuple with 2 elements : lang _ code and generic _ lang _ code ,
if code is contained in _ supported and call to the function check _ for _ language with an argument code evaluates to true ,
return code .
if strict is false ,
for every supported _ code in _ supported ,
append &apos; -&apos; to generic _ lang _ code , if supported _ code starts with it ,
return supported _ code .
raise an LookupError with an argument lang _ code .
define the function get _ language _ from _ path with 2 arguments : path and strict set to boolean False .
call the function language _ code _ prefix _ re.match with an argument path , substitute it for regex _ match .
if regex _ match is false ,
return None .
call the method regex _ match.group with an argument integer 1 , substitute the result for lang _ code .
try ,
call the function get _ supported _ language _ variant with 2 arguments : lang _ code and strict set to strict , return the result .
if LookupError exception is caught ,
return None .
define the function get _ language _ from _ request with 2 arguments : request and check _ path set to boolean False .
use global variable _ supported .
if _ supported is None ,
_ supported is an instance of OrderedDict class , created with an argument settings.LANGUAGES.
if check _ path is true ,
call the function get _ language _ from _ path with an argument request.path _ info , substitute it for lang _ code .
if lang _ code is not None ,
return lang _ code .
if request has an attribute &apos; session &apos; ,
get the value under the LANGUAGE _ SESSION _ KEY key of the request.session dictionary , substitute it for lang _ code .
if lang _ code is contained in _ supported and lang _ code is not None and result of the function check _ for _ language ,
called with an argument lang _ code is true , return lang _ code .
get the value under the settings.LANGUAGE _ COOKIE _ NAME key of the request.COOKIES dictionary , substitute it for lang _ code .
try ,
call the function get _ supported _ language _ variant with an argument lang _ code , return the result .
if LookupError exception is caught ,
do nothing .
get the value under the &apos; HTTP _ ACCEPT _ LANGUAGE &apos; key of the request.META dictionary , if it exists substitute it for accept ,
if not accept is an empty string. call the function parse _ accept _ lang _ header with an argument accept , for every accept _ lang and unused in the result ,
if accept _ lang equals &apos; * &apos; ,
break from the loop execution .
call the method language _ code _ re.search with an argument accept _ lang , if it evaluates to false ,
skip this loop iteration .
try ,
call the function get _ supported _ language _ variant with an argument accept _ lang , return the result .
if LookupError exception is caught ,
skip this loop iteration .
try ,
call the function get _ supported _ language _ variant with an argument settings.LANGUAGE _ CODE , return the result .
if LookupError exception is caught ,
return settings.LANGUAGE _ CODE .
call the function re.compile with an argument raw string &apos; \ S &apos; , substitute it for dot _ re .
define the function blankout with 2 arguments : src and char .
call the method dot _ re.sub with 2 arguments : char and src , return the result .
call the function re.compile with an argument raw string &quot; ^ \ s + . * context \ s + ( ( ? : &quot; &#91; ^ &quot; &#93; * ? &quot; ) &#124; ( ? : &apos; &#91; ^ &apos; &#93; * ? &apos; ) ) \ s * &quot; , substitute the result for context _ re .
call the function re.compile with an argument string &quot; ^ \ s * trans \ s + ( ( ? : &quot; &#91; ^ &quot; &#93; * ? &quot; ) &#124; ( ? : &apos; &#91; ^ &apos; &#93; * ? &apos; ) ) ( \ s + . * context \ s + ( ( ? : &quot; &#91; ^ &quot; &#93; * ? &quot; ) &#124; ( ? : &apos; &#91; ^ &apos; &#93; * ? &apos; ) ) ) ? \ s * &quot; , substitute the result for inline _ re .
call the function re.compile with an argument raw string &quot; ^ \ s * blocktrans ( \ s + . * context \ s + ( ( ? : &quot; &#91; ^ &quot; &#93; * ? &quot; ) &#124; ( ? : &apos; &#91; ^ &apos; &#93; * ? &apos; ) ) ) ? ( ? : \ s + &#124; $ ) &quot; ,
substitute the result for block _ re. call the function re.compile with an argument raw string &quot; ^ \ s * endblocktrans $ &quot; , substitute the result for endblock _ re .
call the function re.compile with an argument raw string &quot; ^ \ s * plural $ &quot; , substitute the result for plural _ re .
call the function re.compile with an argument raw string &quot; _ \ ( ( ( ? : &quot; . * ? &quot; ) &#124; ( ? : &apos; . * ? &apos; ) ) \ ) &quot; , substitute the result for constant _ re .
call the function re.compile with an argument raw string &quot; ( ? &lt; ! % ) % ( ? ! % ) &quot; , substitute the result for one _ percent _ re .
define the function templatize with 2 arguments : src and origin set to None .
from django.template import Lexer , TOKEN _ TEXT , TOKEN _ VAR , TOKEN _ BLOCK , TOKEN _ COMMENT and TRANSLATOR _ COMMENT _ MARK .
call the function force _ text with 2 arguments : src and settings.FILE _ CHARSET .
out is an instance of StringIO class , created with an empty string as an argument .
message _ context is None .
intrans is boolean False .
inplural is boolean False .
trimmed is boolean False .
singular is an empty list .
plural is an empty list .
incomment is boolean False .
comment is an empty list .
lineno _ comment _ map is an dictionary .
comment _ lineno _ cache is None .
